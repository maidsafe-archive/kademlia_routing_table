var searchIndex = {};
searchIndex["kademlia_routing_table"] = {"doc":"A routing table to manage contacts for a node in a [Kademlia][1] distributed hash table.","items":[[3,"AddedNodeDetails","kademlia_routing_table","This is returned by `RoutingTable::add_node` if a new node has been added.",null,null],[12,"must_notify","","The list of contacts that need to be notified about the new node: If the bucket was\nalready full, that&#39;s nobody, but if it wasn&#39;t, everyone with a bucket index greater than\nthe new nodes&#39; must be notified.",0,null],[12,"unneeded","","List of contacts no longer within the close group at the bucket index of the contact added.",0,null],[12,"common_groups","","Whether we are together in any close group with that contact.",0,null],[3,"DroppedNodeDetails","","This is returned by `RoutingTable::drop_connection` if a node was dropped.",null,null],[12,"incomplete_bucket","","`Some(i)` if the entry has been removed from a full bucket with index `i`, indicating\nthat an attempt to refill that bucket has to be made.",1,null],[12,"common_groups","","Whether we were together in any close group with that contact.",1,null],[3,"RoutingTable","","A routing table to manage contacts for a node.",null,null],[4,"Destination","","A message destination.",null,null],[13,"Group","","The close group of the given address. The message should reach `GROUP_SIZE` nodes.",2,null],[13,"Node","","The individual node at the given address. The message should reach exactly one node.",2,null],[11,"fmt","","",0,{"inputs":[{"name":"addednodedetails"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"addednodedetails"},{"name":"addednodedetails"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"addednodedetails"},{"name":"addednodedetails"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"droppednodedetails"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"droppednodedetails"},{"name":"droppednodedetails"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"droppednodedetails"},{"name":"droppednodedetails"}],"output":{"name":"bool"}}],[17,"GROUP_SIZE","","The size of a close group.",null,null],[17,"PARALLELISM","","The number of nodes a message is sent to in each hop for redundancy.",null,null],[8,"ContactInfo","","Contact info about a node in the network.",null,null],[10,"name","","Returns the name of this contact.",3,{"inputs":[{"name":"contactinfo"}],"output":{"name":"xorname"}}],[11,"fmt","","",2,{"inputs":[{"name":"destination"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"destination"}],"output":{"name":"destination"}}],[11,"eq","","",4,{"inputs":[{"name":"routingtable"},{"name":"routingtable"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"routingtable"},{"name":"routingtable"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"routingtable"}],"output":{"name":"routingtable"}}],[11,"fmt","","",4,{"inputs":[{"name":"routingtable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new routing table for the node with the given name.",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"add","","Adds a contact to the routing table, or updates it.",4,{"inputs":[{"name":"routingtable"},{"name":"t"}],"output":{"name":"option"}}],[11,"need_to_add","","Returns whether it is desirable to add the given contact to the routing table.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"}],"output":{"name":"bool"}}],[11,"remove_if_unneeded","","Removes `name` from routing table and returns `true` if we no longer need to stay connected.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"}],"output":{"name":"bool"}}],[11,"allow_connection","","Returns whether we can allow the given contact to connect to us.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"}],"output":{"name":"bool"}}],[11,"dynamic_quorum_size","","Returns the current calculated quorum size.",4,{"inputs":[{"name":"routingtable"}],"output":{"name":"usize"}}],[11,"furthest_close_bucket","","Returns the bucket index of the furthest close node, or `0` if the table is empty.",4,{"inputs":[{"name":"routingtable"}],"output":{"name":"usize"}}],[11,"remove","","Removes the contact from the table.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"}],"output":{"name":"option"}}],[11,"target_nodes","","Returns a collection of nodes to which a message should be sent onwards.",4,{"inputs":[{"name":"routingtable"},{"name":"destination"},{"name":"xorname"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"is_recipient","","Returns whether the message is addressed to this node.",4,{"inputs":[{"name":"routingtable"},{"name":"destination"}],"output":{"name":"bool"}}],[11,"other_close_nodes","","Returns the other members of `name`&#39;s close group, or `None` if we are not a member of it.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"}],"output":{"name":"option"}}],[11,"close_nodes","","Returns the members of `name`&#39;s close group, or `None` if we are not a member of it.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"}],"output":{"name":"option"}}],[11,"is_close","","Returns `true` if there are fewer than `GROUP_SIZE` nodes in our routing table that are\ncloser to `name` than we are.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"}],"output":{"name":"bool"}}],[11,"len","","Number of entries in the routing table.",4,{"inputs":[{"name":"routingtable"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if there are no entries in the routing table.",4,{"inputs":[{"name":"routingtable"}],"output":{"name":"bool"}}],[11,"our_name","","Returns the name of the node this routing table is for.",4,{"inputs":[{"name":"routingtable"}],"output":{"name":"xorname"}}],[11,"contains","","Returns whether the given node is in the routing table.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"}],"output":{"name":"bool"}}],[11,"get","","Returns the contact associated with the given name.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"}],"output":{"name":"option"}}],[11,"bucket_len","","Returns the number of entries in the bucket with the given index.",4,{"inputs":[{"name":"routingtable"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bucket_count","","Returns the number of buckets.",4,{"inputs":[{"name":"routingtable"}],"output":{"name":"usize"}}],[11,"find","","Returns an entry that satisfies the given `predicate`.",4,{"inputs":[{"name":"routingtable"},{"name":"f"}],"output":{"name":"option"}}],[11,"closest_nodes_to","","Returns the `n` nodes in our routing table that are closest to `target`.",4,{"inputs":[{"name":"routingtable"},{"name":"xorname"},{"name":"usize"},{"name":"bool"}],"output":{"name":"vec"}}]],"paths":[[3,"AddedNodeDetails"],[3,"DroppedNodeDetails"],[4,"Destination"],[8,"ContactInfo"],[3,"RoutingTable"]]};
searchIndex["xor_name"] = {"doc":"# xor_name","items":[[3,"BitIndexOutOfBoundsError","xor_name","A bit was indexed by a value `i` that did not satisfy `0 &lt;= i &lt; XOR_NAME_BITS`.",null,null],[3,"XorName","","A [`XOR_NAME_BITS`](constant.XOR_NAME_BITS.html)-bit number, viewed as a point in XOR space.",null,null],[4,"XorNameFromHexError","","Errors that can occur when decoding a `XorName` from a string.",null,null],[13,"InvalidCharacter","","The given invalid hex character occurred at the given position.",0,null],[13,"InvalidLength","","The hex string did not encode `XOR_NAME_LEN` bytes.",0,null],[5,"slice_as_u8_64_array","","Create a 64-byte array of `u8` from a 64-byte reference to a `u8` slice.",null,null],[5,"closer_to_target","","Returns true if `lhs` is closer to `target` than `rhs`.",null,{"inputs":[{"name":"xorname"},{"name":"xorname"},{"name":"xorname"}],"output":{"name":"bool"}}],[5,"closer_to_target_or_equal","","Returns true if `lhs` is closer to `target` than `rhs`, or when `lhs == rhs`.",null,{"inputs":[{"name":"xorname"},{"name":"xorname"},{"name":"xorname"}],"output":{"name":"bool"}}],[17,"XOR_NAME_LEN","","Constant byte length of `XorName`.",null,null],[17,"XOR_NAME_BITS","","Constant bit length of `XorName`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"xornamefromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"bitindexoutofboundserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a XorName from a `XOR_NAME_LEN` byte array.",2,null],[11,"get_id","","Return the internal array.",2,null],[11,"as_hex","","Hex-encode the `XorName` as a `String`.",2,{"inputs":[{"name":"xorname"}],"output":{"name":"string"}}],[11,"bucket_distance","","**Deprecated**",2,{"inputs":[{"name":"xorname"},{"name":"xorname"}],"output":{"name":"usize"}}],[11,"cmp_closeness","","**Deprecated**",2,{"inputs":[{"name":"xorname"},{"name":"xorname"},{"name":"xorname"}],"output":{"name":"ordering"}}],[11,"bucket_index","","Returns the number of leading bits in which `self` and `name` agree.",2,{"inputs":[{"name":"xorname"},{"name":"xorname"}],"output":{"name":"usize"}}],[11,"with_flipped_bit","","Returns a copy of `self`, with the `index`-th bit flipped.",2,{"inputs":[{"name":"xorname"},{"name":"usize"}],"output":{"name":"result"}}],[11,"count_differing_bits","","Returns the number of bits in which `self` differs from `other`.",2,{"inputs":[{"name":"xorname"},{"name":"xorname"}],"output":{"name":"u32"}}],[11,"cmp_distance","","Compares `lhs` and `rhs` with respect to their distance from `self`.",2,{"inputs":[{"name":"xorname"},{"name":"xorname"},{"name":"xorname"}],"output":{"name":"ordering"}}],[11,"from_hex","","Hex-decode a `XorName` from a `&amp;str`.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"xorname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"xorname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"xorname"},{"name":"xorname"}],"output":{"name":"bool"}}],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"xorname"}}],[11,"cmp","","",2,{"inputs":[{"name":"xorname"},{"name":"xorname"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"xorname"},{"name":"xorname"}],"output":{"name":"option"}}],[11,"hash","","",2,{"inputs":[{"name":"xorname"},{"name":"h"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"xorname"}],"output":{"name":"self"}}],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"xorname"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[4,"XorNameFromHexError"],[3,"BitIndexOutOfBoundsError"],[3,"XorName"]]};
searchIndex["maidsafe_utilities"] = {"doc":"# MaidSafe Utilities","items":[[0,"thread","maidsafe_utilities","Utilities related to threading.",null,null],[3,"RaiiThreadJoiner","maidsafe_utilities::thread","A RAII style thread joiner. The destruction of an instance of this type will block until\nthe thread it is managing has joined.",null,null],[11,"new","","Create a new instance of self-managing thread joiner",0,{"inputs":[{"name":"joinhandle"}],"output":{"name":"raiithreadjoiner"}}],[11,"drop","","",0,{"inputs":[{"name":"raiithreadjoiner"}],"output":null}],[0,"log","maidsafe_utilities","Allows initialising the env_logger with a standard message format.",null,null],[5,"init","maidsafe_utilities::log","Initialises the env_logger for output to stderr.",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"init_to_file","","Initialises the env_logger for output to a file and to stderr.",null,{"inputs":[{"name":"bool"},{"name":"p"}],"output":{"name":"result"}}],[0,"event_sender","maidsafe_utilities","Utilities related to event-subsetting.",null,null],[3,"EventSender","maidsafe_utilities::event_sender","This structure is coded to achieve event-subsetting. Receivers in Rust are blocking. One cannot\nlisten to multiple receivers at the same time except by using `try_recv` which again is bad for\nthe same reasons spin-lock based on some sleep is bad (wasting cycles, 50% efficient on an\naverage etc.).",null,null],[4,"EventSenderError","","Errors that can be returned by EventSender",null,null],[13,"EventSubset","","Error sending the event subset",1,null],[13,"Category","","Error sending the event category",1,null],[4,"MaidSafeEventCategory","","Category of events meant for a MaidSafe observer listening to both, routing and crust events",null,null],[13,"Crust","","Used by Crust to indicate a Crust Event has been fired",2,null],[13,"Routing","","Used by Routing to indicate a Routing Event has been fired",2,null],[6,"MaidSafeObserver","","Observer that Crust (and users of Routing if required) must allow to be registered",null,null],[11,"fmt","","",1,{"inputs":[{"name":"eventsendererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of `EventSender`. Category type, category value and EventSubset type\nare baked into `EventSender` to disallow user code from misusing it.",3,{"inputs":[{"name":"sender"},{"name":"category"},{"name":"sender"}],"output":{"name":"eventsender"}}],[11,"send","","Fire an allowed event/signal to the observer.",3,{"inputs":[{"name":"eventsender"},{"name":"eventsubset"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"eventsender"}],"output":{"name":"eventsender"}}],[11,"fmt","","",2,{"inputs":[{"name":"maidsafeeventcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"maidsafeeventcategory"}],"output":{"name":"maidsafeeventcategory"}}],[0,"serialisation","maidsafe_utilities","Functions for serialisation and deserialisation",null,null],[4,"SerialisationError","maidsafe_utilities::serialisation","Serialisation error.",null,null],[13,"Serialise","","Error during serialisation (encoding).",4,null],[13,"Deserialise","","Error during deserialisation (decoding).",4,null],[5,"serialise","","Serialise an Encodable type",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"deserialise","","Deserialise a Decodable type",null,null],[5,"serialise_into","","Serialise an Encodable type directly into a Write.",null,{"inputs":[{"name":"t"},{"name":"w"}],"output":{"name":"result"}}],[5,"deserialise_from","","Deserialise a Decodable type directly from a Read",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"serialisationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"serialisationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"serialisationerror"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"serialisationerror"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"encodingerror"}],"output":{"name":"serialisationerror"}}],[11,"from","","",4,{"inputs":[{"name":"decodingerror"}],"output":{"name":"serialisationerror"}}],[14,"unwrap_result!","maidsafe_utilities","A replacement for calling `unwrap()` on a `Result`.",null,null],[14,"unwrap_option!","","A replacement for calling `unwrap()` on an `Option`.",null,null],[14,"thread!","","This macro is intended to be used in all cases where we want to spawn a new thread of execution\nand if that is not possible then panic out.",null,null]],"paths":[[3,"RaiiThreadJoiner"],[4,"EventSenderError"],[4,"MaidSafeEventCategory"],[3,"EventSender"],[4,"SerialisationError"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"LogBuilder","env_logger","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"logbuilder"},{"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",0,{"inputs":[{"name":"logbuilder"},{"name":"f"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,{"inputs":[{"name":"logbuilder"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",0,{"inputs":[{"name":"logbuilder"}],"output":{"name":"result"}}]],"paths":[[3,"LogBuilder"]]};
searchIndex["ws"] = {"doc":"Usage\n-----","items":[[3,"Error","ws","A struct indicating the kind of error that has occured and any precise details of that error.",null,null],[12,"kind","","",0,null],[12,"details","","",0,null],[3,"Sender","","A representation of the output of the WebSocket connection. Use this to send messages to the\nother endpoint.",null,null],[3,"Frame","","A struct representing a WebSocket frame.",null,null],[3,"Handshake","","A struct representing the two halves of the WebSocket handshake.",null,null],[12,"request","","The HTTP request sent to begin the handshake.",1,null],[12,"response","","The HTTP response from the server confirming the handshake.",1,null],[12,"peer_addr","","The socket address of the other endpoint. This address may\nbe an intermediary such as a proxy server.",1,null],[12,"local_addr","","The socket address of this enpoint.",1,null],[3,"Request","","The handshake request.",null,null],[3,"Response","","The handshake response.",null,null],[3,"Settings","","WebSocket settings",null,null],[12,"max_connections","","The maximum number of connections that this WebSocket will support.\nThe default setting is low and should be increased when expecting more\nconnections because this is a hard limit and no new connections beyond\nthis limit can be made until an old connection is dropped.\nDefault: 100",2,null],[12,"panic_on_new_connection","","Whether to panic when unable to establish a new TCP connection.\nDefault: false",2,null],[12,"panic_on_shutdown","","Whether to panic when a shutdown of the WebSocket is requested.\nDefault: false",2,null],[12,"fragments_capacity","","The maximum number of fragments the connection can handle without reallocating.\nDefault: 10",2,null],[12,"fragments_grow","","Whether to reallocate when `fragments_capacity` is reached. If this is false,\na Capacity error will be triggered instead.\nDefault: true",2,null],[12,"fragment_size","","The maximum length of outgoing frames. Messages longer than this will be fragmented.\nDefault: 65,535",2,null],[12,"in_buffer_capacity","","The size of the incoming buffer. A larger buffer uses more memory but will allow for fewer\nreallocations.\nDefault: 2048",2,null],[12,"in_buffer_grow","","Whether to reallocate the incoming buffer when `in_buffer_capacity` is reached. If this is\nfalse, a Capacity error will be triggered instead.\nDefault: true",2,null],[12,"out_buffer_capacity","","The size of the outgoing buffer. A larger buffer uses more memory but will allow for fewer\nreallocations.\nDefault: 2048",2,null],[12,"out_buffer_grow","","Whether to reallocate the incoming buffer when `out_buffer_capacity` is reached. If this is\nfalse, a Capacity error will be triggered instead.\nDefault: true",2,null],[12,"panic_on_internal","","Whether to panic when an Internal error is encountered. Internal errors should generally\nnot occur, so this setting defaults to true as a debug measure, whereas production\napplications should consider setting it to false.\nDefault: true",2,null],[12,"panic_on_capacity","","Whether to panic when a Capacity error is encountered.\nDefault: false",2,null],[12,"panic_on_protocol","","Whether to panic when a Protocol error is encountered.\nDefault: false",2,null],[12,"panic_on_encoding","","Whether to panic when an Encoding error is encountered.\nDefault: false",2,null],[12,"panic_on_io","","Whether to panic when an Io error is encountered.\nDefault: false",2,null],[12,"panic_on_timeout","","Whether to panic when a Timer error is encountered.\nDefault: false",2,null],[12,"masking_strict","","The WebSocket protocol requires frames sent from client endpoints to be masked as a\nsecurity and sanity precaution. Enforcing this requirement, which may be removed at some\npoint may cause incompatibilities. If you need the extra security, set this to true.\nDefault: false",2,null],[12,"key_strict","","The WebSocket protocol requires clients to verify the key returned by a server to ensure\nthat the server and all intermediaries can perform the protocol. Verifying the key will\nconsume processing time and other resources with the benifit that we can fail the\nconnection early. The default in WS-RS is to accept any key from the server and instead\nfail late if a protocol error occurs. Change this setting to enable key verification.\nDefault: false",2,null],[12,"method_strict","","The WebSocket protocol requires clients to perform an opening handshake using the HTTP\nGET method for the request. However, since only WebSockets are supported on the connection,\nverifying the method of handshake requests is not always necessary. To enforce the\nrequirement that handshakes begin with a GET method, set this to true.\nDefault: false",2,null],[12,"encrypt_server","","Indicate whether server connections should use ssl encryption when accepting connections.\nSetting this to true means that clients should use the `wss` scheme to connect to this\nserver. Note that using this flag will in general necessitate overriding the\n`Handler::build_ssl` method in order to provide the details of the ssl context. It may be\nsimpler for most users to use a reverse proxy such as nginx to provide server side\nencryption.",2,null],[3,"WebSocket","","The WebSocket struct. A WebSocket can support multiple incoming and outgoing connections.",null,null],[3,"Builder","","Utility for constructing a WebSocket from various settings.",null,null],[4,"ErrorKind","","The type of an error, which may indicate other kinds of errors as the underlying cause.",null,null],[13,"Internal","","Indicates an internal application error.\nThe WebSocket will automatically attempt to send an Error (1011) close code.",3,null],[13,"Capacity","","Indicates a state where some size limit has been exceeded, such as an inability to accept\nany more new connections.\nIf a Connection is active, the WebSocket will automatically attempt to send\na Size (1009) close code.",3,null],[13,"Protocol","","Indicates a violation of the WebSocket protocol.\nThe WebSocket will automatically attempt to send a Protocol (1002) close code, or if\nthis error occurs during a handshake, an HTTP 400 reponse will be generated.",3,null],[13,"Encoding","","Indicates that the WebSocket received data that should be utf8 encoded but was not.\nThe WebSocket will automatically attempt to send a Invalid Frame Payload Data (1007) close\ncode.",3,null],[13,"Io","","Indicates an underlying IO Error.\nThis kind of error will result in a WebSocket Connection disconnecting.",3,null],[13,"Parse","","Indicates a failure to parse an HTTP message.\nThis kind of error should only occur during a WebSocket Handshake, and a HTTP 500 response\nwill be generated.",3,null],[13,"Queue","","Indicates a failure to send a command on the internal EventLoop channel. This means that\nthe WebSocket is overloaded and the Connection will disconnect.",3,null],[13,"Timer","","Indicates a failure to schedule a timeout on the EventLoop.",3,null],[13,"Custom","","A custom error kind for use by applications. This error kind involves extra overhead\nbecause it will allocate the memory on the heap. The WebSocket ignores such errors by\ndefault, simply passing them to the Connection Handler.",3,null],[4,"Message","","An enum representing the various forms of a WebSocket message.",null,null],[13,"Text","","A text WebSocket message",4,null],[13,"Binary","","A binary WebSocket message",4,null],[4,"CloseCode","","Status code used to indicate why an endpoint is closing the WebSocket connection.",null,null],[13,"Normal","","Indicates a normal closure, meaning that the purpose for\nwhich the connection was established has been fulfilled.",5,null],[13,"Away","","Indicates that an endpoint is &quot;going away&quot;, such as a server\ngoing down or a browser having navigated away from a page.",5,null],[13,"Protocol","","Indicates that an endpoint is terminating the connection due\nto a protocol error.",5,null],[13,"Unsupported","","Indicates that an endpoint is terminating the connection\nbecause it has received a type of data it cannot accept (e.g., an\nendpoint that understands only text data MAY send this if it\nreceives a binary message).",5,null],[13,"Status","","Indicates that no status code was included in a closing frame. This\nclose code makes it possible to use a single method, `on_close` to \nhandle even cases where no close code was provided.",5,null],[13,"Abnormal","","Indicates an abnormal closure. If the abnormal closure was due to an\nerror, this close code will not be used. Instead, the `on_error` method\nof the handler will be called with the error. However, if the connection\nis simply dropped, without an error, this close code will be sent to the\nhandler.",5,null],[13,"Invalid","","Indicates that an endpoint is terminating the connection\nbecause it has received data within a message that was not\nconsistent with the type of the message (e.g., non-UTF-8 [RFC3629]\ndata within a text message).",5,null],[13,"Policy","","Indicates that an endpoint is terminating the connection\nbecause it has received a message that violates its policy.  This\nis a generic status code that can be returned when there is no\nother more suitable status code (e.g., Unsupported or Size) or if there\nis a need to hide specific details about the policy.",5,null],[13,"Size","","Indicates that an endpoint is terminating the connection\nbecause it has received a message that is too big for it to\nprocess.",5,null],[13,"Extension","","Indicates that an endpoint (client) is terminating the\nconnection because it has expected the server to negotiate one or\nmore extension, but the server didn&#39;t return them in the response\nmessage of the WebSocket handshake.  The list of extensions that\nare needed should be given as the reason for closing.\nNote that this status code is not used by the server, because it\ncan fail the WebSocket handshake instead.",5,null],[13,"Error","","Indicates that a server is terminating the connection because\nit encountered an unexpected condition that prevented it from\nfulfilling the request.",5,null],[13,"Restart","","Indicates that the server is restarting. A client may choose to reconnect,\nand if it does, it should use a randomized delay of 5-30 seconds between attempts.",5,null],[13,"Again","","Indicates that the server is overloaded and the client should either connect\nto a different IP (when multiple targets exist), or reconnect to the same IP\nwhen a user has performed an action.",5,null],[4,"OpCode","","Operation codes as part of rfc6455.",null,null],[13,"Continue","","Indicates a continuation frame of a fragmented message.",6,null],[13,"Text","","Indicates a text data frame.",6,null],[13,"Binary","","Indicates a binary data frame.",6,null],[13,"Close","","Indicates a close control frame.",6,null],[13,"Ping","","Indicates a ping control frame.",6,null],[13,"Pong","","Indicates a pong control frame.",6,null],[13,"Bad","","Indicates an invalid opcode was received.",6,null],[5,"listen","","A utility function for setting up a WebSocket server.",null,{"inputs":[{"name":"a"},{"name":"f"}],"output":{"name":"result"}}],[5,"connect","","A utility function for setting up a WebSocket client.",null,{"inputs":[{"name":"u"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"kind"},{"name":"i"}],"output":{"name":"error"}}],[11,"into_box","","",0,{"inputs":[{"name":"error"}],"output":{"name":"box"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"notifyerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"timererror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"box"}],"output":{"name":"error"}}],[11,"clone","","",7,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",7,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Get the length of the frame.\nThis is the length of the header + the length of the payload.",7,{"inputs":[{"name":"frame"}],"output":{"name":"usize"}}],[11,"is_final","","Test whether the frame is a final frame.",7,{"inputs":[{"name":"frame"}],"output":{"name":"bool"}}],[11,"has_rsv1","","Test whether the first reserved bit is set.",7,{"inputs":[{"name":"frame"}],"output":{"name":"bool"}}],[11,"has_rsv2","","Test whether the second reserved bit is set.",7,{"inputs":[{"name":"frame"}],"output":{"name":"bool"}}],[11,"has_rsv3","","Test whether the third reserved bit is set.",7,{"inputs":[{"name":"frame"}],"output":{"name":"bool"}}],[11,"opcode","","Get the OpCode of the frame.",7,{"inputs":[{"name":"frame"}],"output":{"name":"opcode"}}],[11,"payload","","Get a reference to the frame&#39;s payload.",7,{"inputs":[{"name":"frame"}],"output":{"name":"vec"}}],[11,"set_final","","Make this frame a final frame.",7,{"inputs":[{"name":"frame"},{"name":"bool"}],"output":{"name":"frame"}}],[11,"set_rsv1","","Set the first reserved bit.",7,{"inputs":[{"name":"frame"},{"name":"bool"}],"output":{"name":"frame"}}],[11,"set_rsv2","","Set the second reserved bit.",7,{"inputs":[{"name":"frame"},{"name":"bool"}],"output":{"name":"frame"}}],[11,"set_rsv3","","Set the third reserved bit.",7,{"inputs":[{"name":"frame"},{"name":"bool"}],"output":{"name":"frame"}}],[11,"set_opcode","","Set the OpCode.",7,{"inputs":[{"name":"frame"},{"name":"opcode"}],"output":{"name":"frame"}}],[11,"payload_mut","","Edit the frame&#39;s payload.",7,{"inputs":[{"name":"frame"}],"output":{"name":"vec"}}],[11,"into_data","","Consume the frame into its payload.",7,{"inputs":[{"name":"frame"}],"output":{"name":"vec"}}],[11,"message","","Create a new data frame.",7,{"inputs":[{"name":"vec"},{"name":"opcode"},{"name":"bool"}],"output":{"name":"frame"}}],[11,"pong","","Create a new Pong control frame.",7,{"inputs":[{"name":"vec"}],"output":{"name":"frame"}}],[11,"ping","","Create a new Ping control frame.",7,{"inputs":[{"name":"vec"}],"output":{"name":"frame"}}],[11,"close","","Create a new Close control frame.",7,{"inputs":[{"name":"closecode"},{"name":"str"}],"output":{"name":"frame"}}],[11,"parse","","Parse the input stream into a frame.",7,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"format","","Write a frame out to a buffer",7,{"inputs":[{"name":"frame"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",7,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"eq","","",4,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"text","","Create a new text WebSocket message from a stringable.",4,{"inputs":[{"name":"s"}],"output":{"name":"message"}}],[11,"binary","","Create a new binary WebSocket message by converting to Vec&lt;u8&gt;.",4,{"inputs":[{"name":"b"}],"output":{"name":"message"}}],[11,"is_text","","Indicates whether a message is a text message.",4,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_binary","","Indicates whether a message is a binary message.",4,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"len","","Get the length of the WebSocket message.",4,{"inputs":[{"name":"message"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the WebSocket message has no content.\nFor example, if the other side of the connection sent an empty string.",4,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"into_data","","Consume the WebSocket and return it as binary data.",4,{"inputs":[{"name":"message"}],"output":{"name":"vec"}}],[11,"into_text","","Attempt to consume the WebSocket message and convert it to a String.",4,{"inputs":[{"name":"message"}],"output":{"name":"result"}}],[11,"as_text","","Attempt to get a &amp;str from the WebSocket message,\nthis will try to convert binary data to utf8.",4,{"inputs":[{"name":"message"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"message"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"message"}}],[11,"from","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"stdresult"}}],[11,"fmt","","",1,{"inputs":[{"name":"handshake"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remote_addr","","Get the IP address of the remote connection.",1,{"inputs":[{"name":"handshake"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"request"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header","","Get the value of the first instance of an HTTP header.",8,{"inputs":[{"name":"request"},{"name":"str"}],"output":{"name":"option"}}],[11,"header_mut","","Edit the value of the first instance of an HTTP header.",8,{"inputs":[{"name":"request"},{"name":"str"}],"output":{"name":"option"}}],[11,"headers","","Access the request headers.",8,{"inputs":[{"name":"request"}],"output":{"name":"vec"}}],[11,"headers_mut","","Edit the request headers.",8,{"inputs":[{"name":"request"}],"output":{"name":"vec"}}],[11,"origin","","Get the origin of the request if it comes from a browser.",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"key","","Get the unhashed WebSocket key sent in the request.",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"hashed_key","","Get the hashed WebSocket key from this request.",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"version","","Get the WebSocket protocol version from the request (should be 13).",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"resource","","Get the path of the request.",8,{"inputs":[{"name":"request"}],"output":{"name":"str"}}],[11,"protocols","","Get the possible protocols for the WebSocket connection.",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"add_protocol","","Add a possible protocol to this request.\nThis may result in duplicate protocols listed.",8,{"inputs":[{"name":"request"},{"name":"str"}],"output":null}],[11,"remove_protocol","","Remove a possible protocol from this request.",8,{"inputs":[{"name":"request"},{"name":"str"}],"output":null}],[11,"extensions","","Get the possible extensions for the WebSocket connection.",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"add_extension","","Add a possible extension to this request.\nThis may result in duplicate extensions listed. Also, the order of extensions\nindicates preference, so if the preference matters, consider using the\n`Sec-WebSocket-Protocol` header directly.",8,{"inputs":[{"name":"request"},{"name":"str"}],"output":null}],[11,"remove_extension","","Remove a possible extension from this request.\nThis will remove all configurations of the extension.",8,{"inputs":[{"name":"request"},{"name":"str"}],"output":null}],[11,"client_addr","","Get the IP address of the client.",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"parse","","Attempt to parse an HTTP request from a buffer. If the buffer does not contain a complete\nrequest, this will return `Ok(None)`.",8,null],[11,"from_url","","Construct a new WebSocket handshake HTTP request from a url.",8,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"format","","Write a request out to a buffer",8,{"inputs":[{"name":"request"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"request"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_mut","","Edit the value of the first instance of an HTTP header.",9,{"inputs":[{"name":"response"},{"name":"str"}],"output":{"name":"option"}}],[11,"headers","","Access the request headers.",9,{"inputs":[{"name":"response"}],"output":{"name":"vec"}}],[11,"headers_mut","","Edit the request headers.",9,{"inputs":[{"name":"response"}],"output":{"name":"vec"}}],[11,"status","","Get the HTTP status code.",9,{"inputs":[{"name":"response"}],"output":{"name":"u16"}}],[11,"set_status","","Set the HTTP status code.",9,{"inputs":[{"name":"response"},{"name":"u16"}],"output":null}],[11,"reason","","Get the HTTP status reason.",9,{"inputs":[{"name":"response"}],"output":{"name":"str"}}],[11,"set_reason","","Set the HTTP status reason.",9,{"inputs":[{"name":"response"},{"name":"r"}],"output":null}],[11,"key","","Get the hashed WebSocket key.",9,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"protocol","","Get the protocol that the server has decided to use.",9,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"set_protocol","","Set the protocol that the server has decided to use.",9,{"inputs":[{"name":"response"},{"name":"str"}],"output":null}],[11,"extensions","","Get the extensions that the server has decided to use. If these are unacceptable, it is\nappropriate to send an Extension close code.",9,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"add_extension","","Add an accepted extension to this response.\nThis may result in duplicate extensions listed.",9,{"inputs":[{"name":"response"},{"name":"str"}],"output":null}],[11,"remove_extension","","Remove an accepted extension from this response.\nThis will remove all configurations of the extension.",9,{"inputs":[{"name":"response"},{"name":"str"}],"output":null}],[11,"parse","","Attempt to parse an HTTP response from a buffer. If the buffer does not contain a complete\nresponse, thiw will return `Ok(None)`.",9,null],[11,"from_request","","Construct a new WebSocket handshake HTTP response from a request.\nThis will create a response that ignores protocols and extensions. Edit this response to\naccept a protocol and extensions as necessary.",9,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"format","","Write a response out to a buffer",9,{"inputs":[{"name":"response"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"opcode"}],"output":{"name":"opcode"}}],[11,"eq","","",6,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"opcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"opcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",6,{"inputs":[{"name":"opcode"}],"output":{"name":"u8"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"opcode"}}],[11,"clone","","",5,{"inputs":[{"name":"closecode"}],"output":{"name":"closecode"}}],[11,"eq","","",5,{"inputs":[{"name":"closecode"},{"name":"closecode"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"closecode"},{"name":"closecode"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"closecode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",5,{"inputs":[{"name":"closecode"}],"output":{"name":"u16"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"closecode"}}],[11,"clone","","",10,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"fmt","","",10,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"token","","A Token identifying this sender within the WebSocket.",10,{"inputs":[{"name":"sender"}],"output":{"name":"token"}}],[11,"send","","Send a message over the connection.",10,{"inputs":[{"name":"sender"},{"name":"m"}],"output":{"name":"result"}}],[11,"broadcast","","Send a message to the endpoints of all connections.",10,{"inputs":[{"name":"sender"},{"name":"m"}],"output":{"name":"result"}}],[11,"close","","Send a close code to the other endpoint.",10,{"inputs":[{"name":"sender"},{"name":"closecode"}],"output":{"name":"result"}}],[11,"close_with_reason","","Send a close code and provide a descriptive reason for closing.",10,{"inputs":[{"name":"sender"},{"name":"closecode"},{"name":"s"}],"output":{"name":"result"}}],[11,"ping","","Send a ping to the other endpoint with the given test data.",10,{"inputs":[{"name":"sender"},{"name":"vec"}],"output":{"name":"result"}}],[11,"pong","","Send a pong to the other endpoint responding with the given test data.",10,{"inputs":[{"name":"sender"},{"name":"vec"}],"output":{"name":"result"}}],[11,"connect","","Queue a new connection on this WebSocket to the specified URL.",10,{"inputs":[{"name":"sender"},{"name":"url"}],"output":{"name":"result"}}],[11,"shutdown","","Request that all connections terminate and that the WebSocket stop running.",10,{"inputs":[{"name":"sender"}],"output":{"name":"result"}}],[11,"timeout","","Schedule a `token` to be sent to the WebSocket Handler&#39;s `on_timeout` method\nafter `ms` milliseconds",10,{"inputs":[{"name":"sender"},{"name":"u64"},{"name":"token"}],"output":{"name":"result"}}],[11,"cancel","","Queue the cancellation of a previously scheduled timeout.",10,{"inputs":[{"name":"sender"},{"name":"timeout"}],"output":{"name":"result"}}],[0,"util","","The util module rexports some tools from mio in order to facilitate handling timeouts.",null,null],[11,"as_usize","mio::token","",11,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[11,"with_capacity","mio::util::mpmc_bounded_queue","",12,{"inputs":[{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",12,{"inputs":[{"name":"queue"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",12,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"cmp","mio::event","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"eq","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"edge","","",13,{"inputs":[],"output":{"name":"pollopt"}}],[11,"empty","","",13,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","",13,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","",13,{"inputs":[],"output":{"name":"pollopt"}}],[11,"all","","",13,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","",13,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_level","","",13,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",13,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"bits","","",13,{"inputs":[{"name":"pollopt"}],"output":{"name":"usize"}}],[11,"contains","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",13,null],[11,"remove","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",13,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",13,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",13,{"inputs":[{"name":"pollopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"eq","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"none","","",14,{"inputs":[],"output":{"name":"eventset"}}],[11,"readable","","",14,{"inputs":[],"output":{"name":"eventset"}}],[11,"writable","","",14,{"inputs":[],"output":{"name":"eventset"}}],[11,"error","","",14,{"inputs":[],"output":{"name":"eventset"}}],[11,"hup","","",14,{"inputs":[],"output":{"name":"eventset"}}],[11,"all","","",14,{"inputs":[],"output":{"name":"eventset"}}],[11,"is_readable","","",14,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_writable","","",14,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_error","","",14,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_hup","","",14,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"insert","","",14,null],[11,"remove","","",14,null],[11,"bits","","",14,{"inputs":[{"name":"eventset"}],"output":{"name":"usize"}}],[11,"contains","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"bitor","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitxor","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitand","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"sub","","",14,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"not","","",14,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"fmt","","",14,{"inputs":[{"name":"eventset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"ioevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"ioevent"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"ioevent"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"ioevent"}],"output":{"name":"ioevent"}}],[11,"new","","Create a new IoEvent.",15,{"inputs":[{"name":"eventset"},{"name":"token"}],"output":{"name":"ioevent"}}],[11,"fmt","mio::event_loop","",16,{"inputs":[{"name":"eventloopconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"new","","Creates a new configuration for the event loop with all default options\nspecified.",16,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event\nloop&#39;s notification channel before a send will fail.",16,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"eventloopconfig"}}],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of\nthe event loop.",16,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"eventloopconfig"}}],[11,"timer_tick_ms","","",16,{"inputs":[{"name":"eventloopconfig"},{"name":"u64"}],"output":{"name":"eventloopconfig"}}],[11,"timer_wheel_size","","",16,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"eventloopconfig"}}],[11,"timer_capacity","","",16,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"eventloopconfig"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",17,{"inputs":[{"name":"eventloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The\nevent loop will not be running yet.",17,{"inputs":[],"output":{"name":"result"}}],[11,"configured","","",17,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",17,{"inputs":[{"name":"eventloop"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",17,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",17,{"inputs":[{"name":"eventloop"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",17,null],[11,"is_running","","Indicates whether the event loop is currently running. If it&#39;s not it has either\nstopped or is scheduled to stop on the next tick.",17,{"inputs":[{"name":"eventloop"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",17,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",17,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",17,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",17,{"inputs":[{"name":"eventloop"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the\nhandler if any of the registered handles become ready during that\ntime.",17,{"inputs":[{"name":"eventloop"},{"name":"h"},{"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"fmt","","",18,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","",18,{"inputs":[{"name":"sender"},{"name":"m"}],"output":{"name":"result"}}],[11,"map_non_block","core::result","",19,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"fmt","mio::net::tcp","",20,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified\naddress.",20,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",20,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",20,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",20,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",20,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",20,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",20,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",20,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",21,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",21,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",21,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",21,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",21,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","",21,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"register","","",21,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",21,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",21,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",21,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",20,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",21,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",21,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::net::udp","",22,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",22,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",22,{"inputs":[],"output":{"name":"result"}}],[11,"bound","","",22,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",22,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",22,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",22,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",22,null],[11,"recv_from","","",22,null],[11,"set_broadcast","","",22,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",22,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",22,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",22,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",22,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",22,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",22,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",22,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",22,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",22,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",22,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::net::unix","",23,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",23,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",23,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",23,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",23,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_clone","","",23,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"register","","",23,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",23,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",23,{"inputs":[{"name":"unixsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",23,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",24,{"inputs":[{"name":"unixstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",24,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",24,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"read_recv_fd","","",24,null],[11,"try_read_recv_fd","","",24,null],[11,"try_read_buf_recv_fd","","",24,{"inputs":[{"name":"unixstream"},{"name":"b"}],"output":{"name":"result"}}],[11,"write_send_fd","","",24,null],[11,"try_write_send_fd","","",24,null],[11,"try_write_buf_send_fd","","",24,{"inputs":[{"name":"unixstream"},{"name":"b"},{"name":"i32"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"register","","",24,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",24,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",24,{"inputs":[{"name":"unixstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",24,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",25,{"inputs":[{"name":"unixlistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",25,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",25,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"try_clone","","",25,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"register","","",25,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",25,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",25,{"inputs":[{"name":"unixlistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",25,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"from","","",25,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",26,{"inputs":[{"name":"pipereader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",26,null],[11,"register","","",26,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",26,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",26,{"inputs":[{"name":"pipereader"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",27,{"inputs":[{"name":"pipewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",27,null],[11,"flush","","",27,{"inputs":[{"name":"pipewriter"}],"output":{"name":"result"}}],[11,"register","","",27,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",27,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",27,{"inputs":[{"name":"pipewriter"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",27,{"inputs":[{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",23,{"inputs":[{"name":"unixsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",23,{"inputs":[{"name":"i32"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",24,{"inputs":[{"name":"unixstream"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",24,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",25,{"inputs":[{"name":"unixlistener"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",25,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",26,{"inputs":[{"name":"pipereader"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",26,{"inputs":[{"name":"i32"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",27,{"inputs":[{"name":"pipewriter"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",27,{"inputs":[{"name":"i32"}],"output":{"name":"pipewriter"}}],[11,"from_str","mio::net","",28,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_capacity","mio::notify","",29,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"check","","",29,{"inputs":[{"name":"notify"},{"name":"usize"},{"name":"bool"}],"output":{"name":"usize"}}],[11,"notify","","",29,{"inputs":[{"name":"notify"},{"name":"m"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"notify"}],"output":{"name":"option"}}],[11,"cleanup","","",29,null],[11,"close","","",29,null],[11,"clone","","",29,{"inputs":[{"name":"notify"}],"output":{"name":"notify"}}],[11,"fmt","","",29,{"inputs":[{"name":"notify"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",29,{"inputs":[{"name":"notify"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",29,{"inputs":[{"name":"notify"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",29,{"inputs":[{"name":"notify"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"notifyerror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"notifyerror"}],"output":{"name":"option"}}],[11,"new","mio::poll","",31,{"inputs":[],"output":{"name":"result"}}],[11,"register","","",31,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",31,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",31,{"inputs":[{"name":"poll"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"poll"},{"name":"option"}],"output":{"name":"result"}}],[11,"event","","",31,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"events","","",31,{"inputs":[{"name":"poll"}],"output":{"name":"events"}}],[11,"fmt","","",31,{"inputs":[{"name":"poll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",32,{"inputs":[{"name":"events"}],"output":{"name":"option"}}],[11,"fmt","mio::sys::unix::epoll","",33,{"inputs":[{"name":"selector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"result"}}],[11,"id","","",33,{"inputs":[{"name":"selector"}],"output":{"name":"usize"}}],[11,"select","","Wait for events from the OS",33,{"inputs":[{"name":"selector"},{"name":"events"},{"name":"option"}],"output":{"name":"result"}}],[11,"register","","Register event interests for the given IO handle with the OS",33,{"inputs":[{"name":"selector"},{"name":"i32"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Register event interests for the given IO handle with the OS",33,{"inputs":[{"name":"selector"},{"name":"i32"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister event interests for the given IO handle with the OS",33,{"inputs":[{"name":"selector"},{"name":"i32"}],"output":{"name":"result"}}],[11,"drop","","",33,null],[11,"new","","",34,{"inputs":[],"output":{"name":"events"}}],[11,"len","","",34,{"inputs":[{"name":"events"}],"output":{"name":"usize"}}],[11,"get","","",34,{"inputs":[{"name":"events"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"new","mio::sys::unix::awakener::pipe","",35,{"inputs":[],"output":{"name":"result"}}],[11,"wakeup","","",35,{"inputs":[{"name":"awakener"}],"output":{"name":"result"}}],[11,"cleanup","","",35,null],[11,"register","","",35,{"inputs":[{"name":"awakener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",35,{"inputs":[{"name":"awakener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",35,{"inputs":[{"name":"awakener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","mio::sys::unix::eventedfd","",36,{"inputs":[{"name":"eventedfd"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",36,{"inputs":[{"name":"eventedfd"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",36,{"inputs":[{"name":"eventedfd"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",36,{"inputs":[{"name":"eventedfd"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","mio::sys::unix::io","",37,{"inputs":[{"name":"io"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",37,{"inputs":[{"name":"i32"}],"output":{"name":"io"}}],[11,"from","","",37,{"inputs":[{"name":"i32"}],"output":{"name":"io"}}],[11,"from_raw_fd","","",37,{"inputs":[{"name":"i32"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",37,{"inputs":[{"name":"io"}],"output":{"name":"i32"}}],[11,"register","","",37,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",37,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",37,{"inputs":[{"name":"io"},{"name":"selector"}],"output":{"name":"result"}}],[11,"read","","",37,null],[11,"write","","",37,null],[11,"flush","","",37,{"inputs":[{"name":"io"}],"output":{"name":"result"}}],[11,"drop","","",37,null],[11,"fmt","mio::sys::unix::tcp","",38,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",38,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",38,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",38,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",38,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",38,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",38,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",38,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",38,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",38,null],[11,"write","","",38,null],[11,"flush","","",38,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",38,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",38,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",38,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",38,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",38,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"new","","",39,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",39,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",39,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",39,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","",39,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"register","","",39,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",39,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",39,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"as_raw_fd","","",39,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"fmt","mio::sys::unix::udp","",40,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",40,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",40,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","",40,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",40,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",40,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",40,null],[11,"recv_from","","",40,null],[11,"set_broadcast","","",40,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",40,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",40,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",40,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",40,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",40,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",40,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",40,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",40,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",40,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"fmt","mio::sys::unix::uds","",41,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",41,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",41,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",41,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"accept","","",41,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",41,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",41,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"read_recv_fd","","",41,null],[11,"write_send_fd","","",41,null],[11,"read","","",41,null],[11,"write","","",41,null],[11,"flush","","",41,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"register","","",41,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",41,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",41,{"inputs":[{"name":"unixsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",41,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"from","","",41,{"inputs":[{"name":"io"}],"output":{"name":"unixsocket"}}],[11,"from_raw_fd","","",41,{"inputs":[{"name":"i32"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",41,{"inputs":[{"name":"unixsocket"}],"output":{"name":"i32"}}],[11,"fmt","mio::timer","",42,{"inputs":[{"name":"timer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"timeout"}],"output":{"name":"timeout"}}],[11,"new","","",42,{"inputs":[{"name":"u64"},{"name":"usize"},{"name":"usize"}],"output":{"name":"timer"}}],[11,"next_tick_in_ms","","",42,{"inputs":[{"name":"timer"}],"output":{"name":"option"}}],[11,"setup","","",42,null],[11,"timeout_ms","","",42,{"inputs":[{"name":"timer"},{"name":"t"},{"name":"u64"}],"output":{"name":"result"}}],[11,"timeout_at_ms","","",42,{"inputs":[{"name":"timer"},{"name":"t"},{"name":"u64"}],"output":{"name":"result"}}],[11,"clear","","",42,{"inputs":[{"name":"timer"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"now","","",42,{"inputs":[{"name":"timer"}],"output":{"name":"u64"}}],[11,"tick_to","","",42,{"inputs":[{"name":"timer"},{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"entrylinks"}],"output":{"name":"entrylinks"}}],[11,"fmt","","",45,{"inputs":[{"name":"timererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"timererrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","mio::token","",11,null],[11,"cmp","","",11,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"from_usize","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[11,"as_usize","","",11,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[3,"Token","ws::util","",null,null],[3,"Timeout","","",null,null],[6,"Slab","","",null,null],[6,"Result","ws","",null,null],[8,"Factory","","A trait for creating new WebSocket handlers.",null,null],[16,"Handler","","",47,null],[10,"connection_made","","Called when a TCP connection is made.",47,{"inputs":[{"name":"factory"},{"name":"sender"}],"output":{"name":"handler"}}],[11,"on_shutdown","","Called when the WebSocket is shutting down.",47,{"inputs":[{"name":"factory"}],"output":null}],[11,"client_connected","","Called when a new connection is established for a client endpoint.\nThis method can be used to differentiate a client aspect for a handler.",47,{"inputs":[{"name":"factory"},{"name":"sender"}],"output":{"name":"handler"}}],[11,"server_connected","","Called when a new connection is established for a server endpoint.\nThis method can be used to differentiate a server aspect for a handler.",47,{"inputs":[{"name":"factory"},{"name":"sender"}],"output":{"name":"handler"}}],[11,"connection_lost","","Called when a TCP connection is lost with the handler that was\nsetup for that connection.",47,{"inputs":[{"name":"factory"},{"name":"handler"}],"output":null}],[8,"Handler","","The core trait of this library.\nImplementing this trait provides the business logic of the WebSocket application.",null,null],[11,"on_shutdown","","Called when a request to shutdown all connections has been received.",48,{"inputs":[{"name":"handler"}],"output":null}],[11,"on_open","","Called when the WebSocket handshake is successful and the connection is open for sending\nand receiving messages.",48,{"inputs":[{"name":"handler"},{"name":"handshake"}],"output":{"name":"result"}}],[11,"on_message","","Called on incoming messages.",48,{"inputs":[{"name":"handler"},{"name":"message"}],"output":{"name":"result"}}],[11,"on_close","","Called any time this endpoint receives a close control frame.\nThis may be because the other endpoint is initiating a closing handshake,\nor it may be the other endpoint confirming the handshake initiated by this endpoint.",48,{"inputs":[{"name":"handler"},{"name":"closecode"},{"name":"str"}],"output":null}],[11,"on_error","","Called when an error occurs on the WebSocket.",48,{"inputs":[{"name":"handler"},{"name":"error"}],"output":null}],[11,"on_request","","A method for handling the low-level workings of the request portion of the WebSocket\nhandshake.",48,{"inputs":[{"name":"handler"},{"name":"request"}],"output":{"name":"result"}}],[11,"on_response","","A method for handling the low-level workings of the response portion of the WebSocket\nhandshake.",48,{"inputs":[{"name":"handler"},{"name":"response"}],"output":{"name":"result"}}],[11,"on_timeout","","Called when a timeout is triggered.",48,{"inputs":[{"name":"handler"},{"name":"token"}],"output":{"name":"result"}}],[11,"on_new_timeout","","Called when a timeout has been scheduled on the eventloop.",48,{"inputs":[{"name":"handler"},{"name":"token"},{"name":"timeout"}],"output":{"name":"result"}}],[11,"on_frame","","A method for handling incoming frames.",48,{"inputs":[{"name":"handler"},{"name":"frame"}],"output":{"name":"result"}}],[11,"on_send_frame","","A method for handling outgoing frames.",48,{"inputs":[{"name":"handler"},{"name":"frame"}],"output":{"name":"result"}}],[11,"build_request","","A method for creating the initial handshake request for WebSocket clients.",48,{"inputs":[{"name":"handler"},{"name":"url"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"settings"}],"output":{"name":"settings"}}],[11,"fmt","","",2,{"inputs":[{"name":"settings"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"settings"}}],[11,"new","","Create a new WebSocket using the given Factory to create handlers.",49,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"with_config","","Create a new WebSocket with a Factory and use the event loop config to\nconfigure the event loop.",49,{"inputs":[{"name":"f"},{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"listen","","Consume the WebSocket and listen for new connections on the specified address.",49,{"inputs":[{"name":"websocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"connect","","Queue an outgoing connection on this WebSocket. This method may be called multiple times,\nbut the actuall connections will not be established until after `run` is called.",49,{"inputs":[{"name":"websocket"},{"name":"url"}],"output":{"name":"result"}}],[11,"run","","Run the WebSocket. This will run the encapsulated event loop blocking until the WebSocket\nis shutdown.",49,{"inputs":[{"name":"websocket"}],"output":{"name":"result"}}],[11,"broadcaster","","Get a Sender that can be used to send messages on all connections.\nCalling `send` on this Sender is equivalent to calling `broadcast`.\nCalling `shutdown` on this Sender will shudown the WebSocket even if no connections have\nbeen established.",49,{"inputs":[{"name":"websocket"}],"output":{"name":"sender"}}],[11,"fmt","","",50,{"inputs":[{"name":"builder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Builder with default settings.",50,{"inputs":[],"output":{"name":"builder"}}],[11,"build","","Build a WebSocket using this builder and a factory.\nIt is possible to use the same builder to create multiple WebSockets.",50,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"with_config","","Set the EventLoopConfig to use with this WebSocket. If this is not set\nthe builder will use a default EventLoopConfig based on other settings.",50,{"inputs":[{"name":"builder"},{"name":"eventloopconfig"}],"output":{"name":"builder"}}],[11,"with_settings","","Set the WebSocket settings to use.",50,{"inputs":[{"name":"builder"},{"name":"settings"}],"output":{"name":"builder"}}],[11,"on_shutdown","","Called when a request to shutdown all connections has been received.",48,{"inputs":[{"name":"handler"}],"output":null}],[11,"on_open","","Called when the WebSocket handshake is successful and the connection is open for sending\nand receiving messages.",48,{"inputs":[{"name":"handler"},{"name":"handshake"}],"output":{"name":"result"}}],[11,"on_message","","Called on incoming messages.",48,{"inputs":[{"name":"handler"},{"name":"message"}],"output":{"name":"result"}}],[11,"on_close","","Called any time this endpoint receives a close control frame.\nThis may be because the other endpoint is initiating a closing handshake,\nor it may be the other endpoint confirming the handshake initiated by this endpoint.",48,{"inputs":[{"name":"handler"},{"name":"closecode"},{"name":"str"}],"output":null}],[11,"on_error","","Called when an error occurs on the WebSocket.",48,{"inputs":[{"name":"handler"},{"name":"error"}],"output":null}],[11,"on_request","","A method for handling the low-level workings of the request portion of the WebSocket\nhandshake.",48,{"inputs":[{"name":"handler"},{"name":"request"}],"output":{"name":"result"}}],[11,"on_response","","A method for handling the low-level workings of the response portion of the WebSocket\nhandshake.",48,{"inputs":[{"name":"handler"},{"name":"response"}],"output":{"name":"result"}}],[11,"on_timeout","","Called when a timeout is triggered.",48,{"inputs":[{"name":"handler"},{"name":"token"}],"output":{"name":"result"}}],[11,"on_new_timeout","","Called when a timeout has been scheduled on the eventloop.",48,{"inputs":[{"name":"handler"},{"name":"token"},{"name":"timeout"}],"output":{"name":"result"}}],[11,"on_frame","","A method for handling incoming frames.",48,{"inputs":[{"name":"handler"},{"name":"frame"}],"output":{"name":"result"}}],[11,"on_send_frame","","A method for handling outgoing frames.",48,{"inputs":[{"name":"handler"},{"name":"frame"}],"output":{"name":"result"}}],[11,"build_request","","A method for creating the initial handshake request for WebSocket clients.",48,{"inputs":[{"name":"handler"},{"name":"url"}],"output":{"name":"result"}}],[11,"on_shutdown","","Called when the WebSocket is shutting down.",47,{"inputs":[{"name":"factory"}],"output":null}],[11,"client_connected","","Called when a new connection is established for a client endpoint.\nThis method can be used to differentiate a client aspect for a handler.",47,{"inputs":[{"name":"factory"},{"name":"sender"}],"output":{"name":"handler"}}],[11,"server_connected","","Called when a new connection is established for a server endpoint.\nThis method can be used to differentiate a server aspect for a handler.",47,{"inputs":[{"name":"factory"},{"name":"sender"}],"output":{"name":"handler"}}],[11,"connection_lost","","Called when a TCP connection is lost with the handler that was\nsetup for that connection.",47,{"inputs":[{"name":"factory"},{"name":"handler"}],"output":null}]],"paths":[[3,"Error"],[3,"Handshake"],[3,"Settings"],[4,"ErrorKind"],[4,"Message"],[4,"CloseCode"],[4,"OpCode"],[3,"Frame"],[3,"Request"],[3,"Response"],[3,"Sender"],[3,"Token"],[3,"Queue"],[3,"PollOpt"],[3,"EventSet"],[3,"IoEvent"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[4,"Result"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"],[4,"IpAddr"],[3,"Notify"],[4,"NotifyError"],[3,"Poll"],[3,"Events"],[3,"Selector"],[3,"Events"],[3,"Awakener"],[3,"EventedFd"],[3,"Io"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"UnixSocket"],[3,"Timer"],[3,"Timeout"],[3,"EntryLinks"],[3,"TimerError"],[4,"TimerErrorKind"],[8,"Factory"],[8,"Handler"],[3,"WebSocket"],[3,"Builder"]]};
searchIndex["log4rs"] = {"doc":"log4rs is a highly configurable logging framework modeled after Java&#39;s\nLogback and log4j libraries.","items":[[4,"FilterResponse","log4rs","The response returned by a filter.",null,null],[13,"Accept","","Accept the log event.",0,null],[13,"Neutral","","Take no action on the log event.",0,null],[13,"Reject","","Reject the log event.",0,null],[5,"init_config","","Initializes the global logger with a log4rs logger configured by `config`.",null,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[5,"init_file","","Initializes the global logger with a log4rs logger.",null,{"inputs":[{"name":"p"},{"name":"creator"}],"output":{"name":"result"}}],[0,"appender","","A set of common appenders",null,null],[3,"FileAppender","log4rs::appender","An appender which logs to a file.",null,null],[3,"FileAppenderBuilder","","A builder for `FileAppender`s.",null,null],[3,"ConsoleAppender","","An appender which logs to stdout.",null,null],[3,"ConsoleAppenderBuilder","","A builder for `ConsoleAppender`s.",null,null],[11,"append","","",1,{"inputs":[{"name":"fileappender"},{"name":"logrecord"}],"output":{"name":"result"}}],[11,"builder","","Creates a new `FileAppender` builder for an appender which will log to\na file at the provided path.",1,{"inputs":[{"name":"p"}],"output":{"name":"fileappenderbuilder"}}],[11,"pattern","","Sets the output pattern for the `FileAppender`.",2,{"inputs":[{"name":"fileappenderbuilder"},{"name":"patternlayout"}],"output":{"name":"fileappenderbuilder"}}],[11,"append","","Determines if the appender will append to or truncate the output file.",2,{"inputs":[{"name":"fileappenderbuilder"},{"name":"bool"}],"output":{"name":"fileappenderbuilder"}}],[11,"build","","Consumes the `FileAppenderBuilder`, producing a `FileAppender`.",2,{"inputs":[{"name":"fileappenderbuilder"}],"output":{"name":"result"}}],[11,"append","","",3,{"inputs":[{"name":"consoleappender"},{"name":"logrecord"}],"output":{"name":"result"}}],[11,"builder","","Creates a new `ConsoleAppender` builder.",3,{"inputs":[],"output":{"name":"consoleappenderbuilder"}}],[11,"pattern","","Sets the output pattern for the `ConsoleAppender`.",4,{"inputs":[{"name":"consoleappenderbuilder"},{"name":"patternlayout"}],"output":{"name":"consoleappenderbuilder"}}],[11,"build","","Consumes the `ConsoleAppenderBuilder`, producing a `ConsoleAppender`.",4,{"inputs":[{"name":"consoleappenderbuilder"}],"output":{"name":"consoleappender"}}],[0,"config","log4rs","log4rs configuration",null,null],[3,"Root","log4rs::config","Configuration for the root logger.",null,null],[3,"RootBuilder","","A builder for `Root`s.",null,null],[3,"Appender","","Configuration for an appender.",null,null],[3,"AppenderBuilder","","A builder for `Appender`s.",null,null],[3,"Logger","","Configuration for a logger.",null,null],[3,"LoggerBuilder","","A builder for `Logger`s.",null,null],[3,"Config","","A log4rs configuration.",null,null],[3,"ConfigBuilder","","A builder for `Config`s.",null,null],[3,"Errors","","Errors encountered when validating a log4rs `Config`.",null,null],[4,"Error","","An error validating a log4rs `Config`.",null,null],[13,"DuplicateAppenderName","","Multiple appenders were registered with the same name.",5,null],[13,"NonexistentAppender","","A reference to a nonexistant appender.",5,null],[13,"DuplicateLoggerName","","Multiple loggers were registered with the same name.",5,null],[13,"InvalidLoggerName","","A logger name was invalid.",5,null],[11,"fmt","","",6,{"inputs":[{"name":"root"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"builder","","Creates a new `RootBuilder` with no appenders and the specified level.",6,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"rootbuilder"}}],[11,"level","","Returns the minimum level of log messages that the root logger will accept.",6,{"inputs":[{"name":"root"}],"output":{"name":"loglevelfilter"}}],[11,"appenders","","Returns the list of names of appenders that will be attached to the root logger.",6,null],[11,"fmt","","",7,{"inputs":[{"name":"rootbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"appender","","Adds an appender.",7,{"inputs":[{"name":"rootbuilder"},{"name":"string"}],"output":{"name":"rootbuilder"}}],[11,"appenders","","Adds appenders.",7,{"inputs":[{"name":"rootbuilder"},{"name":"i"}],"output":{"name":"rootbuilder"}}],[11,"build","","Consumes the `RootBuilder`, returning the `Root`.",7,{"inputs":[{"name":"rootbuilder"}],"output":{"name":"root"}}],[11,"fmt","","",8,{"inputs":[{"name":"appender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"builder","","Creates a new `AppenderBuilder` with the specified name and `Append` trait object.",8,{"inputs":[{"name":"string"},{"name":"box"}],"output":{"name":"appenderbuilder"}}],[11,"name","","Returns the name of the appender.",8,{"inputs":[{"name":"appender"}],"output":{"name":"str"}}],[11,"appender","","Returns the appender.",8,{"inputs":[{"name":"appender"}],"output":{"name":"append"}}],[11,"filters","","Returns the filters attached to the appender.",8,null],[11,"fmt","","",9,{"inputs":[{"name":"appenderbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"filter","","Adds a filter.",9,{"inputs":[{"name":"appenderbuilder"},{"name":"box"}],"output":{"name":"appenderbuilder"}}],[11,"filters","","Adds filters.",9,{"inputs":[{"name":"appenderbuilder"},{"name":"i"}],"output":{"name":"appenderbuilder"}}],[11,"build","","Consumes the `AppenderBuilder`, returning the `Appender`.",9,{"inputs":[{"name":"appenderbuilder"}],"output":{"name":"appender"}}],[11,"fmt","","",10,{"inputs":[{"name":"logger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"builder","","Creates a new `LoggerBuilder` with the specified name and level.",10,{"inputs":[{"name":"string"},{"name":"loglevelfilter"}],"output":{"name":"loggerbuilder"}}],[11,"name","","Returns the name of the logger.",10,{"inputs":[{"name":"logger"}],"output":{"name":"str"}}],[11,"level","","Returns the minimum level of log messages that the logger will accept.",10,{"inputs":[{"name":"logger"}],"output":{"name":"loglevelfilter"}}],[11,"appenders","","Returns the list of names of appenders that will be attached to the logger.",10,null],[11,"additive","","Determines if appenders of parent loggers will also be attached to this logger.",10,{"inputs":[{"name":"logger"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"loggerbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"appender","","Adds an appender.",11,{"inputs":[{"name":"loggerbuilder"},{"name":"string"}],"output":{"name":"loggerbuilder"}}],[11,"appenders","","Adds appenders.",11,{"inputs":[{"name":"loggerbuilder"},{"name":"i"}],"output":{"name":"loggerbuilder"}}],[11,"additive","","Sets the additivity of the logger.",11,{"inputs":[{"name":"loggerbuilder"},{"name":"bool"}],"output":{"name":"loggerbuilder"}}],[11,"build","","Consumes the `LoggerBuilder`, returning the `Logger`.",11,{"inputs":[{"name":"loggerbuilder"}],"output":{"name":"logger"}}],[11,"fmt","","",12,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"builder","","Creates a new `ConfigBuilder` with the specified `Root`.",12,{"inputs":[{"name":"root"}],"output":{"name":"configbuilder"}}],[11,"appenders","","Returns the `Appender`s associated with the `Config`.",12,null],[11,"root","","Returns the `Root` associated with the `Config`.",12,{"inputs":[{"name":"config"}],"output":{"name":"root"}}],[11,"loggers","","Returns the `Logger`s associated with the `Config`.",12,null],[11,"appender","","Adds an appender.",13,{"inputs":[{"name":"configbuilder"},{"name":"appender"}],"output":{"name":"configbuilder"}}],[11,"appenders","","Adds appenders.",13,{"inputs":[{"name":"configbuilder"},{"name":"i"}],"output":{"name":"configbuilder"}}],[11,"logger","","Adds a logger.",13,{"inputs":[{"name":"configbuilder"},{"name":"logger"}],"output":{"name":"configbuilder"}}],[11,"loggers","","Adds loggers.",13,{"inputs":[{"name":"configbuilder"},{"name":"i"}],"output":{"name":"configbuilder"}}],[11,"build_lossy","","Consumes the `ConfigBuilder`, returning the `Config`.",13,null],[11,"build","","Consumes the `ConfigBuilder`, returning the `Config`.",13,{"inputs":[{"name":"configbuilder"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"errors"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"errors","","Returns a slice of `Error`s.",14,null],[11,"fmt","","",14,{"inputs":[{"name":"errors"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"errors"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[0,"filter","log4rs","A set of common filters.",null,null],[3,"ThresholdFilter","log4rs::filter","A filter that rejects all events at a level below a provided threshold.",null,null],[11,"new","","Creates a new `ThresholdFilter` with the specified threshold.",15,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"thresholdfilter"}}],[11,"filter","","",15,{"inputs":[{"name":"thresholdfilter"},{"name":"logrecord"}],"output":{"name":"filterresponse"}}],[0,"pattern","log4rs","Simple pattern syntax for appender output formats.",null,null],[3,"Error","log4rs::pattern","An error parsing a `PatternLayout` pattern.",null,null],[3,"PatternLayout","","A formatter object for `LogRecord`s.",null,null],[11,"fmt","","",16,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",17,{"inputs":[{"name":"patternlayout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Returns a `PatternLayout` using the default pattern of `%d %l %t - %m`.",17,{"inputs":[],"output":{"name":"patternlayout"}}],[11,"new","","Creates a `PatternLayout` from a pattern string.",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"append","","Writes the specified `LogRecord` to the specified `Write`r according\nto its pattern.",17,{"inputs":[{"name":"patternlayout"},{"name":"w"},{"name":"logrecord"}],"output":{"name":"result"}}],[0,"toml","log4rs","Support for log4rs configuration from TOML files.",null,null],[3,"Creator","log4rs::toml","A type that can create appenders.",null,null],[3,"ParseErrors","","Errors encountered when parsing a log4rs TOML config.",null,null],[3,"Errors","","Errors encountered when deserializing a TOML configuration into a log4rs `Config`.",null,null],[3,"Config","","A deserialized TOML log4rs configuration.",null,null],[3,"FileAppenderCreator","","An appender creator for the `FileAppender`.",null,null],[3,"ConsoleAppenderCreator","","An appender creator for the `ConsoleAppender`.",null,null],[3,"ThresholdFilterCreator","","A filter creator for the `ThresholdFilter`.",null,null],[4,"Error","","An error returned when deserializing a TOML configuration into a log4rs `Config`.",null,null],[13,"AppenderCreation","","An error instantiating an appender.",18,null],[13,"FilterCreation","","An error instantiating a filter.",18,null],[13,"Config","","An error when creating the log4rs `Config`.",18,null],[8,"CreateAppender","","A trait implemented by types that can create appenders.",null,null],[10,"create_appender","","Creates an appender with the specified config.",19,{"inputs":[{"name":"createappender"},{"name":"table"}],"output":{"name":"result"}}],[8,"CreateFilter","","A trait implemented by types that can create filters.",null,null],[10,"create_filter","","Creates a filter with the specified config.",20,{"inputs":[{"name":"createfilter"},{"name":"table"}],"output":{"name":"result"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"creator"}}],[11,"new","","Creates a new `Creator` with no appender or filter mappings.",21,{"inputs":[],"output":{"name":"creator"}}],[11,"add_appender","","Adds a mapping from the specified `kind` to the specified appender\ncreator.",21,{"inputs":[{"name":"creator"},{"name":"str"},{"name":"box"}],"output":null}],[11,"add_filter","","Adds a mapping from the specified `kind` to the specified filter\ncreator.",21,{"inputs":[{"name":"creator"},{"name":"str"},{"name":"box"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"parseerrors"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"parseerrors"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",22,{"inputs":[{"name":"parseerrors"}],"output":{"name":"str"}}],[11,"fmt","","",18,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",18,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",18,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"errors"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"errors","","Returns the list of errors encountered.",23,null],[11,"fmt","","",23,{"inputs":[{"name":"errors"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"errors"}],"output":{"name":"str"}}],[11,"parse","","Creates a log4rs `Config` from the specified TOML config string and `Creator`.",24,{"inputs":[{"name":"str"},{"name":"creator"}],"output":{"name":"result"}}],[11,"refresh_rate","","Returns the requested refresh rate.",24,{"inputs":[{"name":"config"}],"output":{"name":"option"}}],[11,"config","","Returns the log4rs `Config`.",24,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"create_appender","","",25,{"inputs":[{"name":"fileappendercreator"},{"name":"table"}],"output":{"name":"result"}}],[11,"create_appender","","",26,{"inputs":[{"name":"consoleappendercreator"},{"name":"table"}],"output":{"name":"result"}}],[11,"create_filter","","",27,{"inputs":[{"name":"thresholdfiltercreator"},{"name":"table"}],"output":{"name":"result"}}],[8,"Append","log4rs","A trait implemented by log4rs appenders.",null,null],[10,"append","","Processes the provided `LogRecord`.",28,{"inputs":[{"name":"append"},{"name":"logrecord"}],"output":{"name":"result"}}],[8,"Filter","","The trait implemented by log4rs filters.",null,null],[10,"filter","","Filters a log event.",29,{"inputs":[{"name":"filter"},{"name":"logrecord"}],"output":{"name":"filterresponse"}}]],"paths":[[4,"FilterResponse"],[3,"FileAppender"],[3,"FileAppenderBuilder"],[3,"ConsoleAppender"],[3,"ConsoleAppenderBuilder"],[4,"Error"],[3,"Root"],[3,"RootBuilder"],[3,"Appender"],[3,"AppenderBuilder"],[3,"Logger"],[3,"LoggerBuilder"],[3,"Config"],[3,"ConfigBuilder"],[3,"Errors"],[3,"ThresholdFilter"],[3,"Error"],[3,"PatternLayout"],[4,"Error"],[8,"CreateAppender"],[8,"CreateFilter"],[3,"Creator"],[3,"ParseErrors"],[3,"Errors"],[3,"Config"],[3,"FileAppenderCreator"],[3,"ConsoleAppenderCreator"],[3,"ThresholdFilterCreator"],[8,"Append"],[8,"Filter"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary\nserialization strategy.","items":[[3,"RefBox","bincode","A struct for encoding nested reference types.",null,null],[3,"StrBox","","Like a RefBox, but encoding from a `str` and decoedes to a `String`.",null,null],[3,"SliceBox","","Like a RefBox, but encodes from a `[T]` and encodes to a `Vec&lt;T&gt;`.",null,null],[4,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[13,"Infinite","","",0,null],[13,"Bounded","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"refbox"}],"output":{"name":"refbox"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"refbox"},{"name":"refbox"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"refbox"},{"name":"refbox"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"refbox"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"refbox"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"refbox"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"refbox"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"refbox"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"refbox"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"refbox"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"strbox"}],"output":{"name":"strbox"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"strbox"},{"name":"strbox"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"strbox"},{"name":"strbox"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"strbox"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"strbox"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"strbox"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"strbox"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"strbox"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"strbox"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"strbox"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"slicebox"}],"output":{"name":"slicebox"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"slicebox"},{"name":"slicebox"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"slicebox"},{"name":"slicebox"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"slicebox"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"slicebox"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"slicebox"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"slicebox"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"slicebox"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"slicebox"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"slicebox"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",1,{"inputs":[{"name":"t"}],"output":{"name":"refbox"}}],[11,"take","","Takes the value out of this refbox.",1,{"inputs":[{"name":"refbox"}],"output":{"name":"box"}}],[11,"try_take","","Tries to take the value out of this refbox.",1,{"inputs":[{"name":"refbox"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"refbox"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"refbox"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new StrBox that looks at a borrowed value.",2,{"inputs":[{"name":"str"}],"output":{"name":"strbox"}}],[11,"into_string","","Extract a String from a StrBox.",2,{"inputs":[{"name":"strbox"}],"output":{"name":"string"}}],[11,"to_owned","","Convert to an Owned `SliceBox`.",2,{"inputs":[{"name":"strbox"}],"output":{"name":"strbox"}}],[11,"as_ref","","",2,{"inputs":[{"name":"strbox"}],"output":{"name":"str"}}],[11,"boxed","","Creates a new StrBox made from an allocated String.",2,{"inputs":[{"name":"string"}],"output":{"name":"strbox"}}],[11,"take","","Takes the value out of this refbox.",2,{"inputs":[{"name":"strbox"}],"output":{"name":"string"}}],[11,"try_take","","Tries to take the value out of this refbox.",2,{"inputs":[{"name":"strbox"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"strbox"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"strbox"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",3,null],[11,"into_vec","","Extract a `Vec&lt;T&gt;` from a `SliceBox`.",3,{"inputs":[{"name":"slicebox"}],"output":{"name":"vec"}}],[11,"to_owned","","Convert to an Owned `SliceBox`.",3,{"inputs":[{"name":"slicebox"}],"output":{"name":"slicebox"}}],[11,"boxed","","Creates a new SliceBox made from an allocated `Vec&lt;T&gt;`.",3,{"inputs":[{"name":"vec"}],"output":{"name":"slicebox"}}],[11,"take","","Takes the value out of this refbox.",3,{"inputs":[{"name":"slicebox"}],"output":{"name":"vec"}}],[11,"try_take","","Tries to take the value out of this refbox.",3,{"inputs":[{"name":"slicebox"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"slicebox"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"slicebox"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"refbox"}],"output":{"name":"t"}}],[11,"deref","","",3,null],[0,"rustc_serialize","","A collection of serialization and deserialization functions\nthat use the `rustc_serialize` crate for the encodable and decodable\nimplementation.",null,null],[3,"SizeChecker","bincode::rustc_serialize","",null,null],[12,"size_limit","","",4,null],[12,"written","","",4,null],[3,"EncoderWriter","","An Encoder that encodes values directly into a Writer.",null,null],[3,"DecoderReader","","A Decoder that reads bytes from a buffer.",null,null],[4,"EncodingError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",5,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",5,null],[4,"DecodingError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",6,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",6,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",6,null],[5,"encode","","Encodes an encodable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode","","Decodes a slice of bytes into an object.",null,null],[5,"encode_into","","Encodes an object directly into a `Writer`.",null,{"inputs":[{"name":"t"},{"name":"w"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode_from","","Decoes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decodingresult"}}],[5,"encoded_size","","Returns the size that an object would be if encoded using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"encoded_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be encoded.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"decodingerror"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"decodingerror"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"ioerror"}],"output":{"name":"decodingerror"}}],[11,"new","","",7,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decoderreader"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"u64"}}],[11,"read_nil","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_usize","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_u64","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_u32","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_u16","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_u8","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_isize","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_i64","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_i32","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_i16","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_i8","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_bool","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_f64","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_f32","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_char","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_str","","",7,{"inputs":[{"name":"decoderreader"}],"output":{"name":"decodingresult"}}],[11,"read_enum","","",7,{"inputs":[{"name":"decoderreader"},{"name":"str"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_enum_variant","","",7,null],[11,"read_enum_variant_arg","","",7,{"inputs":[{"name":"decoderreader"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_enum_struct_variant","","",7,null],[11,"read_enum_struct_variant_field","","",7,{"inputs":[{"name":"decoderreader"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_struct","","",7,{"inputs":[{"name":"decoderreader"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_struct_field","","",7,{"inputs":[{"name":"decoderreader"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple","","",7,{"inputs":[{"name":"decoderreader"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple_arg","","",7,{"inputs":[{"name":"decoderreader"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple_struct","","",7,{"inputs":[{"name":"decoderreader"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple_struct_arg","","",7,{"inputs":[{"name":"decoderreader"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_option","","",7,{"inputs":[{"name":"decoderreader"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_seq","","",7,{"inputs":[{"name":"decoderreader"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_seq_elt","","",7,{"inputs":[{"name":"decoderreader"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_map","","",7,{"inputs":[{"name":"decoderreader"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_map_elt_key","","",7,{"inputs":[{"name":"decoderreader"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_map_elt_val","","",7,{"inputs":[{"name":"decoderreader"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"error","","",7,{"inputs":[{"name":"decoderreader"},{"name":"str"}],"output":{"name":"decodingerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"encodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"encodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"encodingerror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"encodingerror"}],"output":{"name":"option"}}],[11,"new","","",8,{"inputs":[{"name":"w"}],"output":{"name":"encoderwriter"}}],[11,"new","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"sizechecker"}}],[11,"emit_nil","","",8,{"inputs":[{"name":"encoderwriter"}],"output":{"name":"encodingresult"}}],[11,"emit_usize","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"}],"output":{"name":"encodingresult"}}],[11,"emit_u64","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"u64"}],"output":{"name":"encodingresult"}}],[11,"emit_u32","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"u32"}],"output":{"name":"encodingresult"}}],[11,"emit_u16","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"u16"}],"output":{"name":"encodingresult"}}],[11,"emit_u8","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"u8"}],"output":{"name":"encodingresult"}}],[11,"emit_isize","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"isize"}],"output":{"name":"encodingresult"}}],[11,"emit_i64","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"i64"}],"output":{"name":"encodingresult"}}],[11,"emit_i32","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"i32"}],"output":{"name":"encodingresult"}}],[11,"emit_i16","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"i16"}],"output":{"name":"encodingresult"}}],[11,"emit_i8","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"i8"}],"output":{"name":"encodingresult"}}],[11,"emit_bool","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"bool"}],"output":{"name":"encodingresult"}}],[11,"emit_f64","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"f64"}],"output":{"name":"encodingresult"}}],[11,"emit_f32","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"f32"}],"output":{"name":"encodingresult"}}],[11,"emit_char","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"char"}],"output":{"name":"encodingresult"}}],[11,"emit_str","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"str"}],"output":{"name":"encodingresult"}}],[11,"emit_enum","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"str"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant_arg","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant_field","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct_field","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_arg","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct_arg","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option_none","","",8,{"inputs":[{"name":"encoderwriter"}],"output":{"name":"encodingresult"}}],[11,"emit_option_some","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq_elt","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_key","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_val","","",8,{"inputs":[{"name":"encoderwriter"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_nil","","",4,{"inputs":[{"name":"sizechecker"}],"output":{"name":"encodingresult"}}],[11,"emit_usize","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"}],"output":{"name":"encodingresult"}}],[11,"emit_u64","","",4,{"inputs":[{"name":"sizechecker"},{"name":"u64"}],"output":{"name":"encodingresult"}}],[11,"emit_u32","","",4,{"inputs":[{"name":"sizechecker"},{"name":"u32"}],"output":{"name":"encodingresult"}}],[11,"emit_u16","","",4,{"inputs":[{"name":"sizechecker"},{"name":"u16"}],"output":{"name":"encodingresult"}}],[11,"emit_u8","","",4,{"inputs":[{"name":"sizechecker"},{"name":"u8"}],"output":{"name":"encodingresult"}}],[11,"emit_isize","","",4,{"inputs":[{"name":"sizechecker"},{"name":"isize"}],"output":{"name":"encodingresult"}}],[11,"emit_i64","","",4,{"inputs":[{"name":"sizechecker"},{"name":"i64"}],"output":{"name":"encodingresult"}}],[11,"emit_i32","","",4,{"inputs":[{"name":"sizechecker"},{"name":"i32"}],"output":{"name":"encodingresult"}}],[11,"emit_i16","","",4,{"inputs":[{"name":"sizechecker"},{"name":"i16"}],"output":{"name":"encodingresult"}}],[11,"emit_i8","","",4,{"inputs":[{"name":"sizechecker"},{"name":"i8"}],"output":{"name":"encodingresult"}}],[11,"emit_bool","","",4,{"inputs":[{"name":"sizechecker"},{"name":"bool"}],"output":{"name":"encodingresult"}}],[11,"emit_f64","","",4,{"inputs":[{"name":"sizechecker"},{"name":"f64"}],"output":{"name":"encodingresult"}}],[11,"emit_f32","","",4,{"inputs":[{"name":"sizechecker"},{"name":"f32"}],"output":{"name":"encodingresult"}}],[11,"emit_char","","",4,{"inputs":[{"name":"sizechecker"},{"name":"char"}],"output":{"name":"encodingresult"}}],[11,"emit_str","","",4,{"inputs":[{"name":"sizechecker"},{"name":"str"}],"output":{"name":"encodingresult"}}],[11,"emit_enum","","",4,{"inputs":[{"name":"sizechecker"},{"name":"str"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant","","",4,{"inputs":[{"name":"sizechecker"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant_arg","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant","","",4,{"inputs":[{"name":"sizechecker"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant_field","","",4,{"inputs":[{"name":"sizechecker"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct","","",4,{"inputs":[{"name":"sizechecker"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct_field","","",4,{"inputs":[{"name":"sizechecker"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_arg","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct","","",4,{"inputs":[{"name":"sizechecker"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct_arg","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option","","",4,{"inputs":[{"name":"sizechecker"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option_none","","",4,{"inputs":[{"name":"sizechecker"}],"output":{"name":"encodingresult"}}],[11,"emit_option_some","","",4,{"inputs":[{"name":"sizechecker"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq_elt","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_key","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_val","","",4,{"inputs":[{"name":"sizechecker"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[6,"EncodingResult","","",null,null],[6,"DecodingResult","","",null,null],[0,"serde","bincode","A collection of serialization and deserialization functions\nthat use the `serde` crate for the serialazble and deserializable\nimplementation.",null,null],[3,"Deserializer","bincode::serde","A Deserializer that reads bytes from a buffer.",null,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"DeserializeError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",9,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",9,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",9,null],[13,"Serde","","",9,null],[4,"SerializeError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",10,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",10,null],[13,"Custom","","A custom error message",10,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializeresult"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[11,"fmt","","",9,{"inputs":[{"name":"deserializeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"deserializeerror"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"deserializeerror"}],"output":{"name":"option"}}],[11,"from","","",9,{"inputs":[{"name":"ioerror"}],"output":{"name":"deserializeerror"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"deserializeerror"}}],[11,"fmt","","",9,{"inputs":[{"name":"deserializeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",9,{"inputs":[{"name":"t"}],"output":{"name":"deserializeerror"}}],[11,"end_of_stream","","",9,{"inputs":[],"output":{"name":"deserializeerror"}}],[11,"new","","",11,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializer"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",11,{"inputs":[{"name":"deserializer"}],"output":{"name":"u64"}}],[11,"deserialize","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_usize","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_isize","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_enum","","",11,null],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_variant","","",11,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",11,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_newtype","","",11,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_tuple","","",11,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",11,null],[11,"fmt","","",10,{"inputs":[{"name":"serializeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"serializeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"serializeerror"}],"output":{"name":"str"}}],[11,"cause","","",10,{"inputs":[{"name":"serializeerror"}],"output":{"name":"option"}}],[11,"new","","",12,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"serialize_unit","","",12,{"inputs":[{"name":"serializer"}],"output":{"name":"serializeresult"}}],[11,"serialize_bool","","",12,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"serializeresult"}}],[11,"serialize_u8","","",12,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"serializeresult"}}],[11,"serialize_u16","","",12,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"serializeresult"}}],[11,"serialize_u32","","",12,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"serializeresult"}}],[11,"serialize_u64","","",12,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"serializeresult"}}],[11,"serialize_i8","","",12,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"serializeresult"}}],[11,"serialize_i16","","",12,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"serializeresult"}}],[11,"serialize_i32","","",12,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"serializeresult"}}],[11,"serialize_i64","","",12,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"serializeresult"}}],[11,"serialize_f32","","",12,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"serializeresult"}}],[11,"serialize_f64","","",12,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"serializeresult"}}],[11,"serialize_str","","",12,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"serializeresult"}}],[11,"serialize_none","","",12,{"inputs":[{"name":"serializer"}],"output":{"name":"serializeresult"}}],[11,"serialize_some","","",12,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"serializeresult"}}],[11,"serialize_seq","","",12,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple","","",12,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"serializeresult"}}],[11,"serialize_seq_elt","","",12,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"serializeresult"}}],[11,"serialize_map","","",12,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"serializeresult"}}],[11,"serialize_map_elt","","",12,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"serializeresult"}}],[11,"serialize_struct","","",12,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"serializeresult"}}],[11,"serialize_struct_elt","","",12,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"serializeresult"}}],[11,"serialize_newtype_struct","","",12,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"serializeresult"}}],[11,"serialize_unit_variant","","",12,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple_variant","","",12,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"serializeresult"}}],[11,"serialize_struct_variant","","",12,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"serializeresult"}}],[6,"DeserializeResult","","",null,null],[6,"SerializeResult","","",null,null],[11,"partial_cmp","bincode","",0,{"inputs":[{"name":"sizelimit"},{"name":"sizelimit"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sizelimit"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sizelimit"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sizelimit"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sizelimit"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"sizelimit"},{"name":"sizelimit"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"sizelimit"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sizelimit"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sizelimit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sizelimit"}],"output":{"name":"sizelimit"}}]],"paths":[[4,"SizeLimit"],[3,"RefBox"],[3,"StrBox"],[3,"SliceBox"],[3,"SizeChecker"],[4,"EncodingError"],[4,"DecodingError"],[3,"DecoderReader"],[3,"EncoderWriter"],[4,"DeserializeError"],[4,"SerializeError"],[3,"Deserializer"],[3,"Serializer"]]};
searchIndex["url"] = {"doc":"&lt;a href=&quot;https://github.com/servo/rust-url&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;../github.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;\n&lt;style&gt;.sidebar { margin-top: 53px }&lt;/style&gt;","items":[[3,"Url","url","The parsed representation of an absolute URL.",null,null],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",0,null],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",0,null],[12,"query","","The query string of the URL.",0,null],[12,"fragment","","The fragment identifier of the URL.",0,null],[3,"OpaqueOrigin","","Opaque identifier for URLs that have file or other schemes",null,null],[3,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP.",null,null],[12,"username","","The username of the URL, as a possibly empty, percent-encoded string.",1,null],[12,"password","","The password of the URL.",1,null],[12,"host","","The host of the URL, either a domain name or an IPv4 address",1,null],[12,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",1,null],[12,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",1,null],[12,"path","","The path of the URL, as vector of percent-encoded strings.",1,null],[3,"UrlParser","","A set of optional parameters for URL parsing.",null,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A (DNS) domain name.",2,null],[13,"Ipv4","","A IPv4 address, represented by four sequences of up to three ASCII digits.",2,null],[13,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"InvalidScheme","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"InvalidCharacter","","",3,null],[13,"InvalidBackslash","","",3,null],[13,"InvalidPercentEncoded","","",3,null],[13,"InvalidAtSymbolInUser","","",3,null],[13,"ExpectedTwoSlashes","","",3,null],[13,"ExpectedInitialSlash","","",3,null],[13,"NonUrlCodePoint","","",3,null],[13,"RelativeUrlWithScheme","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithNonRelativeBase","","",3,null],[13,"NonAsciiDomainsNotSupportedYet","","",3,null],[13,"CannotSetJavascriptFragment","","",3,null],[13,"CannotSetPortWithFileLikeScheme","","",3,null],[13,"CannotSetUsernameWithNonRelativeScheme","","",3,null],[13,"CannotSetPasswordWithNonRelativeScheme","","",3,null],[13,"CannotSetHostPortWithNonRelativeScheme","","",3,null],[13,"CannotSetHostWithNonRelativeScheme","","",3,null],[13,"CannotSetPortWithNonRelativeScheme","","",3,null],[13,"CannotSetPathWithNonRelativeScheme","","",3,null],[4,"Origin","","The origin of the URL",null,null],[13,"UID","","A globally unique identifier",4,null],[13,"Tuple","","Consists of the URL&#39;s scheme, host and port",4,null],[4,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*.",null,null],[13,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5,null],[13,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5,null],[4,"SchemeType","","Determines the behavior of the URL parser for a given scheme.",null,null],[13,"NonRelative","","Indicate that the scheme is *non-relative*.",6,null],[13,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6,null],[13,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6,null],[5,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#special-scheme",null,{"inputs":[{"name":"str"}],"output":{"name":"schemetype"}}],[11,"cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"eq","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"serialize","","Serialize the host as a string.",2,{"inputs":[{"name":"host"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"urlutils","","These methods are not meant for use in Rust code,\nonly to help implement the JavaScript URLUtils API: http://url.spec.whatwg.org/#urlutils",null,null],[3,"UrlUtilsWrapper","url::urlutils","",null,null],[12,"url","","",7,null],[12,"parser","","",7,null],[0,"percent_encoding","url","",null,null],[3,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded.",null,null],[5,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`.",null,null],[5,"percent_encode","","Percent-encode the given bytes.",null,null],[5,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`.",null,{"inputs":[{"name":"str"},{"name":"encodeset"},{"name":"string"}],"output":null}],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"encodeset"}],"output":{"name":"string"}}],[5,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`.",null,null],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[5,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8.",null,null],[5,"from_hex","","Convert the given hex character into its numeric value.",null,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[7,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data.",null,null],[7,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[7,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[7,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords.",null,null],[7,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL.",null,null],[7,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL.",null,null],[7,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization.",null,null],[7,"HTTP_VALUE_ENCODE_SET","","This encode set is used for HTTP header values and is defined at\nhttps://tools.ietf.org/html/rfc5987#section-3.2",null,null],[11,"clone","","",8,{"inputs":[{"name":"encodeset"}],"output":{"name":"encodeset"}}],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms.",null,null],[5,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs.",null,null],[5,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format.",null,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.",null,null],[5,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"format","url","Formatting utilities for URLs.",null,null],[3,"PathFormatter","url::format","Formatter and serializer for URL path data.",null,null],[12,"path","","The path as a slice of string-like objects (String or &amp;str).",9,null],[3,"UserInfoFormatter","","Formatter and serializer for URL username and password data.",null,null],[12,"username","","URL username as a string slice.",10,null],[12,"password","","URL password as an optional string slice.",10,null],[3,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field.",null,null],[12,"url","","",11,null],[11,"fmt","","",9,{"inputs":[{"name":"pathformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"userinfoformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"urlnofragmentformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"idna","url","International domain names",null,null],[3,"Uts46Flags","url::idna","",null,null],[12,"use_std3_ascii_rules","","",12,null],[12,"transitional_processing","","",12,null],[12,"verify_dns_length","","",12,null],[4,"Error","","",null,null],[13,"PunycodeError","","",13,null],[13,"ValidityCriteria","","",13,null],[13,"DissallowedByStd3AsciiRules","","",13,null],[13,"DissallowedMappedInStd3","","",13,null],[13,"DissallowedCharacter","","",13,null],[13,"TooLongForDns","","",13,null],[5,"uts46_to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"uts46flags"}],"output":{"name":"result"}}],[5,"domain_to_ascii","","https://url.spec.whatwg.org/#concept-domain-to-ascii",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"uts46_to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#concept-domain-to-unicode",null,null],[11,"clone","","",12,{"inputs":[{"name":"uts46flags"}],"output":{"name":"uts46flags"}}],[11,"fmt","","",13,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",13,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[6,"ErrorHandler","url","This is called on non-fatal parse errors.",null,null],[6,"ParseResult","","",null,null],[11,"cmp","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"eq","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"opaqueorigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"opaqueorigin"}],"output":{"name":"opaqueorigin"}}],[11,"eq","","",14,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"new","","Creates a new opaque origin with a random UUID.",14,{"inputs":[],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",4,{"inputs":[{"name":"origin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"origin"}],"output":{"name":"origin"}}],[11,"eq","","",4,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"schemedata"}],"output":{"name":"schemedata"}}],[11,"eq","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"relativeschemedata"}}],[11,"eq","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"new","","Return a new UrlParser with default parameters.",15,{"inputs":[],"output":{"name":"urlparser"}}],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",15,{"inputs":[{"name":"urlparser"},{"name":"url"}],"output":{"name":"urlparser"}}],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",15,{"inputs":[{"name":"urlparser"},{"name":"errorhandler"}],"output":{"name":"urlparser"}}],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",15,null],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",15,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",15,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"schemetype"}}],[11,"fmt","","",6,{"inputs":[{"name":"schemetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"default_port","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"option"}}],[11,"same_as","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"parse","","Parse an URL with the default `UrlParser` parameters.",0,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"serialize","","Return the serialization of this URL as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",0,{"inputs":[{"name":"url"}],"output":{"name":"origin"}}],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",0,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username","","If the URL is in a *relative scheme*, return its username.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_userinfo","","Serialize the URL&#39;s username and password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path","","If the URL is in a *relative scheme*, return its path components.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",0,{"inputs":[{"name":"url"},{"name":"i"}],"output":null}],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"join","","Join a path with a base URL.",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"encode","","",0,{"inputs":[{"name":"url"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"result"}}],[11,"domain","","If the host is a domain, return the domain as a string.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"serialize_path","","Serialize the path as a string.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"serialize_userinfo","","Serialize the userinfo as a string.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Url"],[3,"RelativeSchemeData"],[4,"Host"],[4,"ParseError"],[4,"Origin"],[4,"SchemeData"],[4,"SchemeType"],[3,"UrlUtilsWrapper"],[3,"EncodeSet"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[3,"Uts46Flags"],[4,"Error"],[3,"OpaqueOrigin"],[3,"UrlParser"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[11,"new","num_bigint","Creates and initializes a BigInt.",0,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",0,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",0,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",0,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",0,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",0,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",0,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",1,null],[11,"div_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",1,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"to_biguint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",1,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",1,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",1,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",2,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",0,null],[11,"div_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",0,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",3,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[11,"fmt","num_rational","",4,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",4,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",4,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",4,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"mul","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",4,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"eq","","",6,{"inputs":[{"name":"ratioerrorkind"},{"name":"ratioerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"ratioerrorkind"},{"name":"ratioerrorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"ratioerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"ratioerrorkind"}],"output":{"name":"ratioerrorkind"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}],[6,"Rational","num","",null,null],[6,"BigRational","","",null,null],[11,"new","num_complex","Create a new Complex",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Complex","num","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",9,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",9,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",15,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",16,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",17,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",18,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",20,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",20,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",20,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",20,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",20,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",23,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",23,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[6,"BigDigit","num::bigint","",null,null],[6,"DoubleBigDigit","","",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[0,"big_digit","","",null,null],[17,"BITS","num::bigint::big_digit","",null,null],[17,"BASE","","",null,null],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u64"}}],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",24,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",2,null],[13,"NoSign","","",2,null],[13,"Plus","","",2,null],[3,"BigInt","","A big signed integer type.",null,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",25,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",26,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",26,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",26,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",26,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",26,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",3,null],[13,"Other","","",3,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","num_iter","",27,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",27,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",28,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",29,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",30,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",15,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",16,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",17,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",18,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",20,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",20,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",20,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",20,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",20,null],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",23,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num::traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",9,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",9,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","num_traits","",31,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FloatErrorKind","num::traits","",null,null],[13,"Empty","","",31,null],[13,"Invalid","","",31,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",32,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",20,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",20,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",20,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",20,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",20,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,{"inputs":[],"output":{"name":"self"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",17,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",15,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",16,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",18,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",23,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[6,"Rational","","",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","",null,null],[3,"ParseRatioError","","",null,null],[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"BigInt"],[3,"BigUint"],[4,"Sign"],[4,"ParseBigIntError"],[3,"Ratio"],[3,"ParseRatioError"],[4,"RatioErrorKind"],[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[4,"FloatErrorKind"],[3,"ParseFloatError"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"Bytes","serde::bytes","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[3,"ByteBuf","","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[11,"cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",0,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",0,null],[11,"deref","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"bytes"},{"name":"s"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"new","","Construct a new, empty `ByteBuf`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_ref","","",1,null],[11,"as_mut","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"bytebuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"bytebufvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",2,null],[11,"visit_byte_buf","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&amp;str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"FieldName","","Represents a struct field name.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"VariantName","","Represents an enum variant name.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",4,{"inputs":[{"name":"unitvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",4,{"inputs":[{"name":"unitvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","collections::string","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",8,{"inputs":[{"name":"phantomdatavisitor"}],"output":{"name":"result"}}],[11,"deserialize","core::marker","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",10,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",10,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",10,{"inputs":[{"name":"binaryheapvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::binary_heap","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",12,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",12,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",12,{"inputs":[{"name":"btreesetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::set","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",14,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",14,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",14,{"inputs":[{"name":"linkedlistvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::linked_list","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",16,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",16,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",16,{"inputs":[{"name":"hashsetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::set","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",18,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",18,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",18,{"inputs":[{"name":"vecvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",20,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",20,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",20,{"inputs":[{"name":"vecdequevisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec_deque","",21,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",22,{"inputs":[{"name":"tuplevisitor1"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",23,{"inputs":[{"name":"tuplevisitor2"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",24,{"inputs":[{"name":"tuplevisitor3"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",25,{"inputs":[{"name":"tuplevisitor4"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"tuplevisitor5"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",27,{"inputs":[{"name":"tuplevisitor6"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"tuplevisitor7"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",29,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",29,{"inputs":[{"name":"tuplevisitor8"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",30,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",30,{"inputs":[{"name":"tuplevisitor9"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",31,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",31,{"inputs":[{"name":"tuplevisitor10"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",32,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",32,{"inputs":[{"name":"tuplevisitor11"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",33,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",33,{"inputs":[{"name":"tuplevisitor12"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",34,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",34,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",34,{"inputs":[{"name":"btreemapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::map","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",36,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",36,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",36,{"inputs":[{"name":"hashmapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::map","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",38,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",39,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",43,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",44,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",46,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",47,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",48,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",49,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",50,null],[13,"InvalidType","","The value had an incorrect type.",50,null],[13,"InvalidLength","","The value had an invalid length.",50,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",50,null],[13,"EndOfStream","","EOF while deserializing a value.",50,null],[13,"UnknownVariant","","Unknown variant in enum.",50,null],[13,"UnknownField","","Unknown field in struct.",50,null],[13,"MissingField","","Struct is missing a field.",50,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",51,null],[10,"into_deserializer","","Convert this value into a deserializer.",51,{"inputs":[{"name":"valuedeserializer"}],"output":{"name":"deserializer"}}],[11,"eq","","",50,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",50,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",50,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",50,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",50,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",50,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",50,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"deserialize","","",52,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",52,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",53,{"inputs":[{"name":"booldeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",54,{"inputs":[{"name":"i8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",55,{"inputs":[{"name":"i16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",56,{"inputs":[{"name":"i32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",57,{"inputs":[{"name":"i64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",58,{"inputs":[{"name":"isizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",59,{"inputs":[{"name":"u8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",60,{"inputs":[{"name":"u16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",61,{"inputs":[{"name":"u32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",62,{"inputs":[{"name":"u64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",63,{"inputs":[{"name":"usizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",64,{"inputs":[{"name":"f32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",65,{"inputs":[{"name":"f64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",66,{"inputs":[{"name":"chardeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",67,{"inputs":[{"name":"strdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",67,null],[11,"visit_variant","","",67,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",67,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"into_deserializer","collections::string","",6,{"inputs":[{"name":"string"}],"output":{"name":"stringdeserializer"}}],[11,"deserialize","serde::de::value","",68,{"inputs":[{"name":"stringdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",68,null],[11,"visit_variant","","",68,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",68,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",69,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",69,{"inputs":[{"name":"seqdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",69,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"end","","",69,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",69,null],[11,"into_deserializer","collections::vec","",19,{"inputs":[{"name":"vec"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","collections::btree::set","",13,{"inputs":[{"name":"btreeset"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"}],"output":{"name":"deserializer"}}],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",70,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",70,{"inputs":[{"name":"seqvisitordeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V&gt;`.",71,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",71,{"inputs":[{"name":"mapdeserializer"},{"name":"v_"}],"output":{"name":"result"}}],[11,"visit_key","","",71,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"visit_value","","",71,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"end","","",71,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",71,null],[11,"into_deserializer","collections::btree::map","",35,{"inputs":[{"name":"btreemap"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","std::collections::hash::map","",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"deserializer"}}],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",72,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",72,{"inputs":[{"name":"mapvisitordeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",73,{"inputs":[{"name":"bytesdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"deserializer"}}],[11,"deserialize","serde::de::value","",74,{"inputs":[{"name":"bytebufdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",75,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",75,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",75,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",75,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",75,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",75,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",75,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",75,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",76,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",77,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_fixed_size_array","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",77,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",77,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.",77,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",77,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",77,null],[11,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",77,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",77,null],[11,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",78,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",78,{"inputs":[{"name":"visitor"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",78,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",78,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_bool` deserializes a `SeqVisitor` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",78,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",79,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",79,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",79,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",79,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",80,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",80,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",80,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",80,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",80,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",80,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",80,{"inputs":[{"name":"mapvisitor"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",81,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",81,{"inputs":[{"name":"enumvisitor"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",82,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",82,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",82,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",82,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",82,{"inputs":[{"name":"variantvisitor"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",82,null],[11,"fmt","","",3,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",83,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",6,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::option","",7,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit","","",7,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",7,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"serialize","core::marker","",9,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor&lt;Iter&gt;`.",84,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",84,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",84,{"inputs":[{"name":"seqiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::binary_heap","",11,{"inputs":[{"name":"binaryheap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::btree::set","",13,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::linked_list","",15,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec","",19,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec_deque","",21,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",85,null],[11,"visit","","",85,{"inputs":[{"name":"tuplevisitor1"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",85,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",86,null],[11,"visit","","",86,{"inputs":[{"name":"tuplevisitor2"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",86,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",87,null],[11,"visit","","",87,{"inputs":[{"name":"tuplevisitor3"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",87,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",88,null],[11,"visit","","",88,{"inputs":[{"name":"tuplevisitor4"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",88,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",89,null],[11,"visit","","",89,{"inputs":[{"name":"tuplevisitor5"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",89,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",90,null],[11,"visit","","",90,{"inputs":[{"name":"tuplevisitor6"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",90,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",91,null],[11,"visit","","",91,{"inputs":[{"name":"tuplevisitor7"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",91,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",92,null],[11,"visit","","",92,{"inputs":[{"name":"tuplevisitor8"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",92,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",93,null],[11,"visit","","",93,{"inputs":[{"name":"tuplevisitor9"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",93,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",94,null],[11,"visit","","",94,{"inputs":[{"name":"tuplevisitor10"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",94,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",95,null],[11,"visit","","",95,{"inputs":[{"name":"tuplevisitor11"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",95,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",96,null],[11,"visit","","",96,{"inputs":[{"name":"tuplevisitor12"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",96,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"option"}}],[11,"new","","Construct a new `MapIteratorVisitor&lt;Iter&gt;`.",97,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",97,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",97,{"inputs":[{"name":"mapiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::btree::map","",35,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::map","",37,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::boxed","",44,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::rc","",46,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::arc","",45,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::borrow","",47,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::result","",48,{"inputs":[{"name":"result"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::net::ip","",38,{"inputs":[{"name":"ipv4addr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",39,{"inputs":[{"name":"ipv6addr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::net::addr","",40,{"inputs":[{"name":"socketaddr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",41,{"inputs":[{"name":"socketaddrv4"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",42,{"inputs":[{"name":"socketaddrv6"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::path","",98,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",43,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",99,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",99,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",100,{"inputs":[{"name":"serialize"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",101,null],[10,"serialize_bool","","Serializes a `bool` value.",101,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_isize","","Serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",101,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"serialize_i8","","Serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",101,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","Serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",101,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","Serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",101,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serializes a `i64` value.",101,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_usize","","Serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `serialize_u64` method.",101,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_u8","","Serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",101,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",101,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",101,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","`Serializes a `u64` value.",101,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","Serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `serialize_f64` method.",101,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serializes a `f64` value.",101,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","Serializes a character. By default it serializes it as a `&amp;str` containing a\nsingle character.",101,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serializes a `&amp;str`.",101,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","Enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",101,null],[10,"serialize_unit","","Serializes a `()` value.",101,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","Serializes a unit struct value.",101,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_none","","Serializes a `None` value..serialize",101,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[10,"serialize_some","","Serializes a `Some(...)` value.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq","","Serializes a sequence.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq_elt","","Serializes a sequence element.",101,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple","","Serializes a tuple.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_elt","","Serializes a tuple element.",101,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_fixed_size_array","","Serializes a fixed-size array.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","Serializes a tuple struct.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct_elt","","Serializes a tuple struct element.",101,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","Serializes a tuple variant.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant_elt","","Serializes a tuple element.",101,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_map","","Serializes a map.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_map_elt","","Serializes a map element (key-value pair).",101,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct","","Serializes a struct.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_elt","","Serializes an element of a struct.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","Serializes a struct variant.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant_elt","","Serializes an element of a struct variant.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",102,{"inputs":[{"name":"seqvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the sequence if known.",102,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"option"}}],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",103,{"inputs":[{"name":"mapvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the map if known.",103,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"option"}}]],"paths":[[3,"Bytes"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"String"],[4,"Option"],[3,"PhantomDataVisitor"],[3,"PhantomData"],[3,"BinaryHeapVisitor"],[3,"BinaryHeap"],[3,"BTreeSetVisitor"],[3,"BTreeSet"],[3,"LinkedListVisitor"],[3,"LinkedList"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"Vec"],[3,"VecDequeVisitor"],[3,"VecDeque"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"BTreeMapVisitor"],[3,"BTreeMap"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Cow"],[4,"Result"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",0,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexSet","regex","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",0,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",0,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",0,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexSet","regex::bytes","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIterBytes","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIntoIterBytes","","An owned iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",1,{"inputs":[{"name":"replacer"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",1,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"fmt","regex","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"no_expansion","regex::re_bytes","Return a fixed unchanging replacement byte string.",1,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"clone","regex::bytes","",2,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",2,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",2,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",2,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",2,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",2,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",2,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",2,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",2,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",2,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",2,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",2,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",2,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",2,null],[11,"shortest_match","","Returns the end location of a match in the text given.",2,null],[11,"as_str","","Returns the original string of this regex.",2,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",2,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",2,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"splits"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"splitsn"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",8,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",8,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",8,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",8,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",8,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",8,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",8,null],[11,"len","","Returns the number of captured groups.",8,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",8,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",8,null],[11,"index","","",8,null],[11,"next","","",9,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"replace_append","","",12,{"inputs":[{"name":"noexpand"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",12,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"clone","regex","",13,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",13,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",13,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",13,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",13,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",13,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",13,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",13,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",13,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",13,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",13,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",13,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",13,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",13,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",13,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",13,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",13,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",13,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",14,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"reg_replace","","",15,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",15,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",17,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",18,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",18,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",18,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",18,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",18,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",18,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",18,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",18,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",18,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",18,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",18,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",19,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"regexset"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",24,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",24,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",24,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",24,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",25,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatches"}}],[11,"matched_any","","Whether this set contains any matches.",25,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",25,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",25,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",25,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",25,{"inputs":[{"name":"setmatches"}],"output":{"name":"intoiter"}}],[11,"next","","",26,{"inputs":[{"name":"setmatchesintoiter"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",27,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"option"}}],[11,"clone","regex::bytes","",28,{"inputs":[{"name":"regexset"}],"output":{"name":"regexsetbytes"}}],[11,"new","","Create a new regex set with the given regular expressions.",28,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",28,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",28,null],[11,"len","","Returns the total number of regular expressions in this set.",28,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",29,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesbytes"}}],[11,"matched_any","","Whether this set contains any matches.",29,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",29,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",29,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",29,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiterbytes"}}],[11,"into_iter","","",29,{"inputs":[{"name":"setmatches"}],"output":{"name":"intoiter"}}],[11,"next","","",30,{"inputs":[{"name":"setmatchesintoiterbytes"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"setmatchesiterbytes"}],"output":{"name":"setmatchesiterbytes"}}],[11,"next","","",31,{"inputs":[{"name":"setmatchesiterbytes"}],"output":{"name":"option"}}],[11,"fmt","regex","",24,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","regex::bytes","",28,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Replacer","regex","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",32,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",32,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",32,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}]],"paths":[[4,"Error"],[8,"Replacer"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"NoExpand"],[3,"Regex"],[3,"CaptureNames"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIterBytes"],[3,"SetMatchesIterBytes"],[8,"Replacer"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event\nnotification, and other useful utilities for building high performance IO\napps.","items":[[11,"new","std::net::ip","Creates a new IPv4 address from four eight-bit octets.",0,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",0,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address 0.0.0.0.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"from","alloc::boxed","",1,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",2,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",3,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",4,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",5,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",6,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",7,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"description","","",8,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"description","alloc::boxed","",1,{"inputs":[{"name":"box"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"is","","Returns true if the boxed type is the same as `T`",9,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",10,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"clone","std::thread::local","",12,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",12,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",13,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",13,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",14,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",14,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",14,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",15,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",15,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",15,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",15,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",16,null],[11,"name","","Gets the thread&#39;s name.",16,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",16,{"inputs":[{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",17,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",17,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",18,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",19,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",20,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",20,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",20,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",21,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",21,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",21,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",22,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",22,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",19,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",19,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",19,{"inputs":[{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",19,{"inputs":[{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",19,{"inputs":[{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit&#39;s initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",19,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",19,null],[11,"next","","",22,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",22,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",22,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key&#39;s hash,\ninto this bucket in the hashtable. Note how `self` is &#39;moved&#39; into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",22,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",21,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",21,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the &#39;ideal&#39; location\nas determined by the key&#39;s hash stored in it.",21,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",21,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",21,null],[11,"take","","Removes this bucket&#39;s key and value from the hashtable.",21,null],[11,"replace","","",21,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",21,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",21,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",21,null],[11,"expect_full","","",23,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",24,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",24,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",25,{"inputs":[{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable&#39;s capacity, similar to a vector&#39;s.",25,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",25,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",25,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",25,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",25,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",25,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",26,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",26,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",28,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"len","","",28,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",29,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"len","","",29,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",30,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"len","","",30,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",31,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"len","","",31,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",31,null],[11,"clone","","",25,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",25,null],[11,"clone","std::collections::hash::map","",32,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",33,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",33,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",33,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",33,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",33,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",33,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",33,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",33,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",33,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",33,null],[11,"get","","Returns a reference to the value corresponding to the key.",33,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",33,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",33,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",33,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",33,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",33,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",33,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",34,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",35,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",36,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",33,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",34,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"len","","",34,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",37,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"len","","",37,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",38,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"len","","",38,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",35,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"len","","",35,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",36,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"len","","",36,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",39,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"len","","",39,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",40,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",40,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",41,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",41,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",41,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",41,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",41,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",42,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"clone","","",43,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",43,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",43,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"randomstate"}}],[11,"get","","",33,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",33,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",33,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",44,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",44,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",44,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",44,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",44,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",44,{"inputs":[{"name":"hashset"}],"output":{"name":"s"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",44,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",44,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",44,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",44,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",44,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",44,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",44,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",44,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",44,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",44,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",44,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",44,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",44,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",44,null],[11,"contains","","Returns `true` if the set contains a value.",44,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",44,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",44,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",44,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",44,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",44,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",44,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",44,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",44,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",44,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",44,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",44,null],[11,"extend","","",44,null],[11,"default","","",44,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",44,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"len","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",46,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"len","","",46,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",47,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"len","","",47,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",48,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",48,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",49,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",50,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",51,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"hasher","std::collections::hash::state","",52,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",52,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",53,null],[11,"default","","",53,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",53,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",53,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",53,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",53,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",53,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",53,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",53,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",53,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",53,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",53,null],[11,"drop","","",54,null],[11,"clone","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",57,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",53,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",53,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",53,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",53,null],[11,"extend","","",53,null],[11,"clone","collections::linked_list","",59,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",61,{"inputs":[{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",61,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",62,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",62,null],[11,"iter","","Provides a forward iterator.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",62,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",62,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",62,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",62,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"drop","","",62,null],[11,"next","","",59,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",63,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",62,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",62,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",62,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",62,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"make_place","","",64,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[11,"pointer","","",64,null],[11,"finalize","","",64,null],[11,"make_place","","",65,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[11,"pointer","","",65,null],[11,"finalize","","",65,null],[11,"clone","collections::vec_deque","",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",66,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",66,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",66,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",66,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",66,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",66,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",66,null],[11,"iter","","Returns a front-to-back iterator.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",66,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",66,null],[11,"len","","Returns the number of elements in the `VecDeque`.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",66,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",66,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",66,null],[11,"push_back","","Appends an element to the back of a buffer",66,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",66,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",66,null],[11,"retain","","Retains only the elements specified by the predicate.",66,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",66,null],[11,"clone","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",70,null],[11,"next","","",70,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",66,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",66,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",66,null],[11,"index","","",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",66,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",66,null],[11,"extend","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",71,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",71,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process&#39;s search path for dynamic libraries",71,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",71,null],[11,"envvar","","Returns the environment variable for this process&#39;s dynamic library\nsearch path",71,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",71,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",71,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",72,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next","","",73,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"clone","","",74,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",74,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",74,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",75,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"fmt","","",76,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",76,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",77,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"len","","",77,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",78,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"len","","",78,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",79,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",79,null],[11,"cmp","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"fmt","","",81,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",82,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",79,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",79,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",79,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",79,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",79,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",79,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",79,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",79,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",79,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",80,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",80,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",80,null],[11,"as_ptr","","Returns the inner pointer to this C string.",80,null],[11,"to_bytes","","Converts this C string to a byte slice.",80,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",80,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",80,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",80,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",79,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",79,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",58,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",80,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",79,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",81,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",81,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",81,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",81,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",83,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",82,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",80,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",80,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",79,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",79,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",80,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",79,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",84,{"inputs":[],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",84,{"inputs":[{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",84,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",84,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity. The string will be\nable to hold exactly `capacity` bytes without reallocating. If\n`capacity` is 0, the string will not allocate.",84,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",84,null],[11,"capacity","","Returns the number of bytes this `OsString` can hold without\nreallocating.",84,{"inputs":[{"name":"osstring"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `OsString`. The collection may reserve more space to avoid\nfrequent reallocations.",84,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",84,null],[11,"from","","",84,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",84,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",84,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",85,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid unicode.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether the `OsStr` is empty.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of bytes in this `OsStr`.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"usize"}}],[11,"deref","","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",84,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",84,null],[11,"eq","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"eq","","",84,{"inputs":[{"name":"osstring"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"osstr"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"osstring"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstr"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"eq","","",84,{"inputs":[{"name":"osstring"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"osstring"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",86,{"inputs":[{"name":"cow"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"cow"}],"output":{"name":"option"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",85,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",85,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",89,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",90,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",92,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",92,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",92,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",92,null],[11,"read_to_end","","",92,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",92,null],[11,"flush","","",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",92,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",89,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","Sets the option to always create a new file.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",89,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"modified","","Returns the last modification time listed in this metadata.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"result"}}],[11,"accessed","","Returns the last access time of this metadata.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"result"}}],[11,"created","","Returns the creation time listed in the this metadata.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"result"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",90,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",90,null],[11,"is_dir","","Test whether this file type represents a directory.",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",93,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",95,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",96,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",96,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",96,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",97,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",97,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",97,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",97,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",97,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",97,null],[11,"fill_buf","","",97,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",97,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",99,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",99,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",99,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",99,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",99,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",99,null],[11,"flush","","",99,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",99,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",99,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",98,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",98,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",83,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",98,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",98,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",100,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",100,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",100,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",100,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",100,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",100,null],[11,"flush","","",100,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",101,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",101,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",101,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",101,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",101,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",101,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",101,null],[11,"seek","","",101,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",101,null],[11,"fill_buf","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",101,null],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",83,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",103,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",83,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",83,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",83,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",83,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",104,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",83,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",1,null],[11,"read_to_end","","",1,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",1,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",1,null],[11,"write_fmt","","",1,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",1,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",1,null],[11,"read_until","","",1,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",1,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",58,null],[11,"write_all","","",58,null],[11,"flush","","",58,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",105,null],[11,"get","","",105,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",106,null],[11,"fill_buf","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",106,null],[11,"read","","",107,null],[11,"write","","",108,null],[11,"flush","","",108,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",109,null],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",111,null],[11,"flush","","",111,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",112,null],[11,"flush","","",112,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",112,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",113,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",113,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",113,null],[11,"read_to_end","","",113,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",113,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",113,null],[11,"read","","",114,null],[11,"read_to_end","","",114,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",114,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",114,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",115,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",115,null],[11,"flush","","",115,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",115,null],[11,"write_fmt","","",115,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",116,null],[11,"flush","","",116,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",117,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",117,null],[11,"flush","","",117,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",117,null],[11,"write_fmt","","",117,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",118,null],[11,"flush","","",118,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",119,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",119,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",120,null],[11,"flush","","",120,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",121,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",122,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",122,null],[11,"fill_buf","","",122,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",122,null],[11,"read","","",123,null],[11,"next","","",124,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",125,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",126,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",125,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",125,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",125,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",127,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",128,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",129,null],[11,"fmt","","",129,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",130,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"clone","","",130,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",130,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"fmt","","",129,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",131,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",131,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address ::.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",131,null],[11,"partial_cmp","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",132,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"eq","","",132,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",132,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",132,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"set_ip","","Change the IP address associated with this socket address.",132,null],[11,"port","","Returns the port number associated with this socket address.",132,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"set_port","","Change the port number associated with this socket address.",132,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",133,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",133,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"set_ip","","Change the IP address associated with this socket address.",133,null],[11,"port","","Returns the port number associated with this socket address.",133,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"set_port","","Change the port number associated with this socket address.",133,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",134,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"set_ip","","Change the IP address associated with this socket address.",134,null],[11,"port","","Returns the port number associated with this socket address.",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"set_port","","Change the port number associated with this socket address.",134,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"set_flowinfo","","Change the flow information associated with this socket address.",134,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"set_scope_id","","Change the scope ID associated with this socket address.",134,null],[11,"fmt","","",132,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",133,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",133,null],[11,"hash","","",134,null],[11,"to_socket_addrs","","",132,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",133,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",135,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",135,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",135,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",135,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",135,null],[11,"read_to_end","","",135,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",135,null],[11,"flush","","",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",136,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",137,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",136,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",138,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",138,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",138,null],[11,"local_addr","","Returns the socket address that this socket was created from.",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",138,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",138,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",129,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",131,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",133,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",134,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",132,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",139,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",139,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",139,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",140,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",141,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::linux::raw::arch","",142,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_stat","std::fs","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"st_dev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_ino","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_mode","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"st_nlink","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_uid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"st_gid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"st_rdev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_size","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_atime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_atime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_mtime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_mtime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_ctime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_ctime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_blksize","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_blocks","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"as_raw_fd","","",92,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",92,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",92,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",135,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",136,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",138,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",84,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",85,null],[11,"as_bytes","","",85,null],[11,"mode","std::fs","",90,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",90,null],[11,"from_mode","","",90,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",89,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"custom_flags","","",89,{"inputs":[{"name":"openoptions"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"dev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"atime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"blocks","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"is_block_device","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",94,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",96,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",143,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",143,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",143,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"before_exec","","",143,{"inputs":[{"name":"command"},{"name":"f"}],"output":{"name":"command"}}],[11,"exec","","",143,{"inputs":[{"name":"command"}],"output":{"name":"error"}}],[11,"signal","","",144,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",145,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",146,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",147,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",148,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",146,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",147,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",148,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",17,{"inputs":[{"name":"joinhandle"}],"output":{"name":"u64"}}],[11,"into_pthread_t","","",17,{"inputs":[{"name":"joinhandle"}],"output":{"name":"u64"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",149,{"inputs":[{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"into_inner","","Consumes the `AssertRecoverSafe`, returning the wrapped value.",149,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref","","",149,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",149,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",150,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",150,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",150,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",150,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",150,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",150,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",150,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",150,null],[11,"fmt","","",150,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",150,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",151,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",151,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",151,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",151,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",151,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",151,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",152,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",152,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",152,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",152,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",152,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",152,null],[11,"fmt","","",153,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",153,null],[11,"cmp","","",153,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",153,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",153,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",153,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",153,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",153,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",153,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",153,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",154,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",155,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",154,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",154,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",154,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",154,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",155,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",155,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",155,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",155,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",155,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",154,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",154,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",154,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",154,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",156,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",156,null],[11,"pop","","Truncate `self` to `self.parent()`.",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",156,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",156,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",156,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",156,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",156,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",156,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",157,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",157,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",157,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",157,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",157,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",157,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",157,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",157,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",157,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",157,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",157,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",157,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",157,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",157,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",157,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",157,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",157,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",157,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",157,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",157,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",157,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",157,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",157,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Query the file system to get information about a file, directory, etc.",157,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",157,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",157,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",157,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Returns an iterator over the entries within a directory.",157,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Returns whether the path points at an existing entity.",157,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether the path is pointing at a regular file.",157,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Returns whether the path is pointing at a directory.",157,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",86,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",86,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",157,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",156,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"partial_cmp","","",156,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",156,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",157,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",157,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",157,null],[11,"partial_cmp","","",157,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",157,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",157,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","collections::borrow","",86,{"inputs":[{"name":"cow"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",156,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","","",156,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",157,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",157,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",86,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",156,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",156,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","","",156,{"inputs":[{"name":"pathbuf"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",156,{"inputs":[{"name":"pathbuf"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",156,{"inputs":[{"name":"pathbuf"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"pathbuf"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",156,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",156,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",156,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",156,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",157,{"inputs":[{"name":"path"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",157,{"inputs":[{"name":"path"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",157,{"inputs":[{"name":"path"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"path"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",157,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",157,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",157,{"inputs":[{"name":"path"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",157,{"inputs":[{"name":"path"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",85,{"inputs":[{"name":"osstr"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstr"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"osstring"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",86,{"inputs":[{"name":"cow"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","std::path","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",158,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",146,null],[11,"flush","","",146,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",147,null],[11,"read","","",148,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",143,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",143,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",143,null],[11,"env","","Inserts or updates an environment variable mapping.",143,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",143,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",143,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",143,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",143,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",143,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",143,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",143,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",143,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",143,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",143,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",160,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",145,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",145,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",145,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",144,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",144,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",144,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",144,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",144,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",161,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",161,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",161,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",161,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",162,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",162,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe&#39;s state\nflag.",162,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe&#39;s state\nflag.",162,{"inputs":[{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",163,null],[11,"new","std::sync::mpsc::oneshot","",164,{"inputs":[],"output":{"name":"packet"}}],[11,"send","","",164,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",164,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",164,null],[11,"drop_port","","",164,null],[11,"can_recv","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",164,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",164,null],[11,"eq","std::sync::mpsc::select","",165,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",166,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",166,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",166,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",167,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",167,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",167,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",167,null],[11,"drop","","",166,null],[11,"drop","","",167,null],[11,"next","","",168,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"fmt","","",166,{"inputs":[{"name":"select"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"handle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sync::mpsc::shared","",169,{"inputs":[],"output":{"name":"packet"}}],[11,"postinit_lock","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",169,null],[11,"send","","",169,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",169,null],[11,"drop_chan","","",169,null],[11,"drop_port","","",169,null],[11,"can_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",169,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",169,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",169,null],[11,"new","std::sync::mpsc::stream","",170,{"inputs":[],"output":{"name":"packet"}}],[11,"send","","",170,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",170,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",170,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",170,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",170,null],[11,"drop_port","","",170,null],[11,"can_recv","","",170,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",170,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",170,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",170,null],[11,"fmt","std::sync::mpsc::sync","",171,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",172,{"inputs":[{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",172,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",172,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",172,null],[11,"drop_chan","","",172,null],[11,"drop_port","","",172,null],[11,"can_recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",172,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",172,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",173,{"inputs":[],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",173,null],[11,"pop","","Pops some data from this queue.",173,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",173,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",174,{"inputs":[{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",174,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",174,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",174,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",174,null],[11,"clone","std::sync::mpsc","",175,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",175,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",176,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",178,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",179,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",179,null],[11,"fmt","","",179,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value on this synchronous channel.",180,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",180,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",180,null],[11,"fmt","","",180,{"inputs":[{"name":"syncsender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",181,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",181,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",181,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",182,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",183,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",181,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",181,null],[11,"fmt","","",181,{"inputs":[{"name":"receiver"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",175,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",175,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",178,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",178,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",178,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",176,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",176,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",176,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",177,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",177,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",184,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",184,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",185,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",186,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",186,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",186,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",186,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",187,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",187,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",187,null],[11,"drop","","",187,null],[11,"new","","Creates a new condition variable",188,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",188,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",188,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",188,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",189,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"drop","","",189,null],[11,"fmt","","",189,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",190,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",190,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",190,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",190,null],[11,"deref","","",191,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",191,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",191,null],[11,"new","std::sync::once","Creates a new `Once` value.",192,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",192,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",193,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",193,null],[11,"fmt","","",193,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",194,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",194,null],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",195,{"inputs":[{"name":"rwlockreadguard"},{"name":"f"}],"output":{"name":"rwlockreadguard"}}],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",196,{"inputs":[{"name":"rwlockwriteguard"},{"name":"f"}],"output":{"name":"rwlockwriteguard"}}],[11,"deref","","",195,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",196,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",196,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",195,null],[11,"drop","","",196,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",197,{"inputs":[{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",197,null],[11,"release","","Release a resource from this semaphore.",197,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",197,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",198,null],[11,"default","core::sync::atomic","",199,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",200,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",201,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",202,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",203,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",199,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",199,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",199,null],[11,"swap","","Stores a value into the bool, returning the old value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",199,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",200,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",200,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",200,null],[11,"swap","","Stores a value into the isize, returning the old value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",200,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",201,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",201,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",201,null],[11,"swap","","Stores a value into the usize, returning the old value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",201,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",202,null],[11,"load","","Loads a value from the pointer.",202,null],[11,"store","","Stores a value into the pointer.",202,null],[11,"swap","","Stores a value into the pointer, returning the old value.",202,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",202,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",202,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",202,null],[11,"fmt","","",201,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",204,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",204,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",204,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",204,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",204,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",204,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",204,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",204,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",207,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",205,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",205,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",205,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",205,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"fmt","","",205,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",206,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",206,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",206,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",206,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",206,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",207,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",207,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",207,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",208,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",208,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",208,null],[11,"wait","","Waits for a signal on the specified mutex.",208,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",208,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",208,null],[11,"clone","std::sys_common::dwarf::eh","",209,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",210,null],[11,"read","","",210,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",210,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",210,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",211,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",212,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",213,{"inputs":[],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",213,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",213,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",213,null],[11,"destroy","","Deallocates all resources associated with this mutex.",213,null],[11,"next","std::sys_common::net","",214,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",214,null],[11,"connect","","",215,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",215,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",215,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",215,null],[11,"write","","",215,null],[11,"peer_addr","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",215,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",216,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",217,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",217,null],[11,"send_to","","",217,null],[11,"duplicate","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",217,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",217,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",218,{"inputs":[],"output":{"name":"flag"}}],[11,"borrow","","",218,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",218,null],[11,"get","","",218,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",219,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",219,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",220,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",220,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",220,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",220,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",221,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",221,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",221,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",221,null],[11,"fmt","","",221,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",222,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",222,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",223,{"inputs":[],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",223,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",223,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",223,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",223,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",223,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",223,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",223,null],[11,"new","std::sys_common::thread_local","",224,{"inputs":[{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",224,null],[11,"set","","Sets this TLS key to a new value.",224,null],[11,"destroy","","Deallocates this OS TLS key.",224,null],[11,"new","","Creates a new managed OS TLS key.",225,{"inputs":[{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",225,null],[11,"set","","See StaticKey::set",225,null],[11,"drop","","",225,null],[11,"clone","std::sys_common::wtf8","",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",226,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",226,{"inputs":[{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",226,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",226,{"inputs":[{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&amp;str` slice.",228,{"inputs":[{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"is_empty","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b&#39;\\xFF&#39; otherwise.",228,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&amp;str` slice.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&amp;str` slice if the contents are well-formed in UTF-8.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",227,{"inputs":[],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",227,{"inputs":[{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",227,{"inputs":[{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&amp;str` slice.",227,{"inputs":[{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"clear","","",227,null],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",227,null],[11,"as_slice","","",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",227,null],[11,"reserve_exact","","",227,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",227,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",227,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",227,null],[11,"push","","Append a code point at the end of the string.",227,null],[11,"truncate","","Shortens a string to the specified length.",227,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",227,{"inputs":[{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",227,null],[11,"partial_cmp","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",228,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",229,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",229,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"clone","","",230,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",230,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",230,null],[11,"hash","","",226,null],[11,"hash","","",227,null],[11,"hash","","",228,null],[11,"is_ascii","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",228,null],[11,"make_ascii_lowercase","","",228,null],[11,"new","std::sys::weak","",231,{"inputs":[{"name":"str"}],"output":{"name":"weak"}}],[11,"get","","",231,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"new","std::sys::condvar","",232,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","",232,null],[11,"notify_all","","",232,null],[11,"wait","","",232,null],[11,"wait_timeout","","",232,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",232,null],[11,"new","std::sys::fd","",233,{"inputs":[{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",233,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",233,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",233,null],[11,"write","","",233,null],[11,"set_cloexec","","",233,null],[11,"duplicate","","",233,{"inputs":[{"name":"filedesc"}],"output":{"name":"result"}}],[11,"drop","","",233,null],[11,"clone","std::sys::fs","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",235,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",236,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",236,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",236,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",237,null],[11,"eq","","",237,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",237,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"modified","","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"result"}}],[11,"accessed","","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"result"}}],[11,"created","","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"result"}}],[11,"readonly","","",236,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",236,null],[11,"mode","","",236,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",237,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",237,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",237,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",237,{"inputs":[{"name":"filetype"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"next","","",238,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",239,null],[11,"path","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",235,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","",235,null],[11,"write","","",235,null],[11,"append","","",235,null],[11,"truncate","","",235,null],[11,"create","","",235,null],[11,"create_new","","",235,null],[11,"custom_flags","","",235,null],[11,"mode","","",235,null],[11,"open","","",241,{"inputs":[{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",241,{"inputs":[{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",241,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",241,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",241,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",241,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",241,null],[11,"write","","",241,null],[11,"flush","","",241,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",241,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"duplicate","","",241,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fd","","",241,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",241,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",242,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",242,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",242,null],[11,"fmt","","",241,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",243,{"inputs":[],"output":{"name":"mutex"}}],[11,"lock","","",243,null],[11,"unlock","","",243,null],[11,"try_lock","","",243,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",243,null],[11,"uninitialized","","",244,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"init","","",244,null],[11,"lock","","",244,null],[11,"try_lock","","",244,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",244,null],[11,"destroy","","",244,null],[11,"new","std::sys::net","",245,{"inputs":[{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",245,null],[11,"duplicate","","",245,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",245,null],[11,"set_timeout","","",245,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",245,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",245,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",246,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",247,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",248,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",249,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",250,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",251,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",252,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",253,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",254,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",255,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",256,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",257,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::notbsd","",258,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",259,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",260,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",261,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",262,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",263,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",264,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",265,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",266,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",267,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",268,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",269,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",270,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","libc::unix::notbsd::linux","",271,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",272,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",273,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",274,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",275,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",276,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",277,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",278,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",279,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",280,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",281,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",282,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",283,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",284,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",285,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",286,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",287,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","libc::unix::notbsd::linux::other","",288,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",289,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",290,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",291,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",292,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",293,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",294,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",295,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",296,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","libc::unix::notbsd::linux::other::b64","",297,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",298,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",299,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",300,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::unix::notbsd::linux::other","",301,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",302,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"next","std::sys::os","",303,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",303,null],[11,"fmt","","",304,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",304,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",305,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",305,null],[11,"len","","",305,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",306,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",306,null],[11,"hash","std::sys::os_str","",307,null],[11,"clone","","",307,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",308,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",307,{"inputs":[{"name":"string"}],"output":{"name":"buf"}}],[11,"with_capacity","","",307,{"inputs":[{"name":"usize"}],"output":{"name":"buf"}}],[11,"clear","","",307,null],[11,"capacity","","",307,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[11,"reserve","","",307,null],[11,"reserve_exact","","",307,null],[11,"as_slice","","",307,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",307,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",307,null],[11,"from_str","","",308,{"inputs":[{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",308,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",308,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",308,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",309,{"inputs":[{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",309,null],[11,"write","","",309,null],[11,"fd","","",309,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",309,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"new","std::sys::process","",310,{"inputs":[{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",310,null],[11,"env","","",310,null],[11,"env_remove","","",310,null],[11,"env_clear","","",310,null],[11,"cwd","","",310,null],[11,"uid","","",310,null],[11,"gid","","",310,null],[11,"session_leader","","",310,null],[11,"before_exec","","",310,null],[11,"stdin","","",310,null],[11,"stdout","","",310,null],[11,"stderr","","",310,null],[11,"spawn","","",310,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"exec","","",310,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"error"}}],[11,"fmt","","",310,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",311,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",311,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",311,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",311,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",311,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",311,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","",312,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"kill","","",312,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"wait","","",312,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"new","std::sys::rand::imp","Create a new `OsRng`.",313,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",313,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",313,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",313,null],[11,"new","std::sys::rwlock","",314,{"inputs":[],"output":{"name":"rwlock"}}],[11,"read","","",314,null],[11,"try_read","","",314,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",314,null],[11,"try_write","","",314,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",314,null],[11,"write_unlock","","",314,null],[11,"destroy","","",314,null],[11,"new","std::sys::stack_overflow","",315,{"inputs":[],"output":{"name":"handler"}}],[11,"drop","","",315,null],[11,"new","std::sys::thread","",316,{"inputs":[{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",316,null],[11,"set_name","","",316,null],[11,"sleep","","",316,null],[11,"join","","",316,null],[11,"id","","",316,{"inputs":[{"name":"thread"}],"output":{"name":"u64"}}],[11,"into_id","","",316,{"inputs":[{"name":"thread"}],"output":{"name":"u64"}}],[11,"drop","","",316,null],[11,"clone","std::sys::time::inner","",317,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"cmp","","",318,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",318,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",318,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",318,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",318,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",318,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",318,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",318,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",318,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",319,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",319,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",319,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",319,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",319,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",319,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",319,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",319,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",319,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",318,{"inputs":[],"output":{"name":"instant"}}],[11,"sub_instant","","",318,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",318,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",318,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",318,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","",319,{"inputs":[],"output":{"name":"systemtime"}}],[11,"sub_time","","",319,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",319,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",319,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"from","","",319,{"inputs":[{"name":"timespec"}],"output":{"name":"systemtime"}}],[11,"fmt","","",319,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","",317,{"inputs":[{"name":"i32"}],"output":{"name":"timespec"}}],[11,"eq","","",317,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",317,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"cmp","","",317,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"new","std::sys::stdio","",320,{"inputs":[],"output":{"name":"result"}}],[11,"read","","",320,null],[11,"new","","",321,{"inputs":[],"output":{"name":"result"}}],[11,"write","","",321,null],[11,"new","","",322,{"inputs":[],"output":{"name":"result"}}],[11,"write","","",322,null],[11,"write","","",322,null],[11,"flush","","",322,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",323,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",324,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",324,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",325,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",325,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",326,{"inputs":[{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",326,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",326,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",326,null],[11,"clone","std::rand","",327,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",327,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",327,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",327,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",327,null],[11,"from_seed","","",327,null],[11,"reseed","","",328,null],[11,"clone","","",329,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",329,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",329,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",329,null],[11,"new","","Create a new `OsRng`.",330,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",330,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",330,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",330,null],[11,"fmt","","",331,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",331,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",331,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",331,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",331,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",331,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",331,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",331,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",332,null],[11,"fmt","","",332,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",332,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",332,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",332,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",332,{"inputs":[],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",333,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",333,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",333,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",333,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",333,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",333,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",333,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",334,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",334,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",334,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",334,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",335,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",335,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",335,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",335,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",335,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",335,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",335,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",335,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",335,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",336,null],[11,"clone","","",336,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",337,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",337,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",337,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",337,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",338,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",338,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",339,null],[11,"deref","","",338,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",338,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",340,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",340,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",340,null],[11,"fmt","core::cmp","",341,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",341,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",341,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",341,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",341,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",341,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",341,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",342,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",342,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",342,null],[11,"finish","","",342,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",342,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",342,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",343,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",343,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",343,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::iter","",344,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",344,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",344,null],[11,"next_back","","",344,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",345,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",345,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",345,null],[11,"next_back","","",345,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",346,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",346,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"clone","","",347,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",348,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",347,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",347,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",347,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",347,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"next_back","","",347,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",349,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",349,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"next_back","","",349,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",350,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",350,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"next_back","","",350,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",351,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",351,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"next_back","","",351,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",352,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",352,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next_back","","",352,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",353,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",353,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"nth","","",353,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",353,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",353,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",354,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",354,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",354,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",354,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",354,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",354,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",354,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",354,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",355,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",355,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",355,null],[11,"clone","","",356,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",356,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",356,null],[11,"clone","","",357,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",357,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",357,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",357,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",357,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",357,null],[11,"clone","","",358,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",358,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",358,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",358,null],[11,"clone","","",359,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",359,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",359,null],[11,"clone","","",360,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",360,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",360,null],[11,"next_back","","",360,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",361,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",361,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",361,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",361,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",361,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",361,null],[11,"next_back","","",361,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",362,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",362,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",362,null],[11,"next_back","","",362,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",363,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",364,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",365,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",363,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",363,null],[11,"clone","","",366,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",366,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",366,null],[11,"next_back","","",366,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",363,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",363,null],[11,"next","core::ops","",365,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",365,null],[11,"next_back","","",365,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",364,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",367,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",367,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",367,null],[11,"next_back","","",367,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",368,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next_back","","",368,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",368,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",368,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",368,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",369,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",369,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"next_back","","",369,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",369,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",370,null],[11,"eq","","",370,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",370,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",370,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",370,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",370,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",371,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",371,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",371,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",371,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",365,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",365,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",365,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",365,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",364,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",364,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",364,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",364,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",372,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",372,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",372,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",372,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",373,null],[11,"get","","Dereferences the content.",373,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",373,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",373,null],[11,"fmt","","",373,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",374,null],[11,"clone","","",374,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",374,null],[11,"fmt","","",374,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",375,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",376,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",377,null],[11,"fmt","","",377,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",377,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",377,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",377,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",377,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",377,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",377,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",377,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",377,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",377,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",377,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",377,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",377,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",377,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",377,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",377,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",377,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",377,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",377,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",377,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",377,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",378,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",378,null],[11,"next_back","","",378,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",378,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",379,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",379,null],[11,"next_back","","",379,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",380,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",380,null],[11,"next_back","","",380,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",377,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",381,null],[11,"fmt","","",381,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",381,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",381,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",381,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",381,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",381,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",381,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",381,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",381,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",381,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",381,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",381,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",381,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",381,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",381,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",381,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",381,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",381,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",381,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",381,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",381,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",381,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",381,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",381,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",381,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",382,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",382,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",382,null],[11,"next_back","","",382,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",383,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",383,null],[11,"next_back","","",383,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",383,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",384,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",384,null],[11,"next_back","","",384,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",385,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",385,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",385,null],[11,"next_back","","",385,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",381,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",386,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",387,null],[11,"make_place","","",387,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",387,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",1,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",386,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",387,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",1,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",1,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",1,null],[11,"clone","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",1,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",1,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",1,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",388,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",388,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",388,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",388,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",388,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",388,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",388,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",388,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",388,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",388,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc&lt;T&gt;`.",388,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",388,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",388,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",388,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",388,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",388,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",388,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",388,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",388,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",388,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",388,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",388,null],[11,"fmt","","",388,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",388,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",389,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",389,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",389,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",389,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",389,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",388,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",388,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",86,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",86,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",86,null],[11,"into_owned","","Extracts the owned data.",86,null],[11,"deref","","",86,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",86,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",86,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",86,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"into_cow","","",86,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",86,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"borrow","collections::vec","",58,null],[11,"borrow_mut","","",58,null],[11,"clone","collections::str","",390,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[11,"next","","",390,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",390,null],[11,"borrow","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",391,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",391,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",391,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",391,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",392,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",393,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",392,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",392,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",392,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",394,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",394,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",394,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",394,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",394,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",394,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",394,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",394,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",395,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",395,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",395,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",395,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",395,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",395,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",395,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",395,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",396,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",396,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",396,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",396,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",396,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",396,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",396,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",396,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",397,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",397,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",398,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",398,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",399,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",399,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",397,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",397,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",397,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",397,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",397,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",400,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",400,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",401,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",401,null],[11,"matching","","",401,null],[11,"use_early_reject","","",402,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",402,null],[11,"matching","","",402,null],[11,"cmp","collections::string","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",87,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",87,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",87,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",87,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",87,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",87,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",87,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",87,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",87,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",87,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",87,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",87,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",87,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",87,null],[11,"push","","Appends the given `char` to the end of this `String`.",87,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",87,null],[11,"truncate","","Shortens this `String` to the specified length.",87,null],[11,"pop","","Removes the last character from the string buffer and returns it.",87,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",87,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",87,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",87,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",87,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",87,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",87,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",87,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",87,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",6,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",6,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",6,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",87,null],[11,"from_iter","","",87,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",87,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",87,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",86,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",87,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",87,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"add","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",87,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",8,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",87,null],[11,"from","","",87,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",86,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",86,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",87,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",87,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",403,null],[11,"next","","",403,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",403,null],[11,"next_back","","",403,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",58,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",58,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",58,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",58,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",58,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",58,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",58,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",58,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",58,null],[11,"as_slice","","Extracts a slice containing the entire vector.",58,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",58,null],[11,"set_len","","Sets the length of a vector.",58,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",58,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",58,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",58,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",58,null],[11,"push","","Appends an element to the back of a collection.",58,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",58,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",58,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",58,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",58,null],[11,"len","","Returns the number of elements in the vector.",58,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",58,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",58,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",58,null],[11,"push_all","","",58,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",58,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",58,null],[11,"clone","","",58,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",58,null],[11,"hash","","",58,null],[11,"index","","",58,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",58,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",58,null],[11,"index","","",58,null],[11,"index","","",58,null],[11,"index","","",58,null],[11,"index_mut","","",58,null],[11,"index_mut","","",58,null],[11,"index_mut","","",58,null],[11,"index_mut","","",58,null],[11,"deref","","",58,null],[11,"deref_mut","","",58,null],[11,"from_iter","","",58,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",58,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","collections::borrow","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"partial_cmp","","",58,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",58,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",58,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",58,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",58,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",58,null],[11,"as_mut","","",58,null],[11,"from","","",58,null],[11,"from","","",58,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",86,null],[11,"from","","",86,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",86,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",58,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",404,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",404,null],[11,"count","","",404,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",404,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",404,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"drop","","",404,null],[11,"next","","",405,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",405,null],[11,"next_back","","",405,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",405,null],[11,"next","rustc_unicode::char","",406,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",407,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",408,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",409,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",409,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",409,null],[3,"Ipv4Addr","mio","Representation of an IPv4 address.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"PollOpt","","",null,null],[3,"EventSet","","",null,null],[3,"IoEvent","","",null,null],[12,"kind","","",410,null],[12,"token","","",410,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Poll","","",null,null],[3,"Events","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[3,"Io","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",411,null],[13,"V6","","",411,null],[4,"NotifyError","","",null,null],[13,"Io","","",412,null],[13,"Full","","",412,null],[13,"Closed","","",412,null],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[11,"with_capacity","","",413,{"inputs":[{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",413,{"inputs":[{"name":"boundedqueue"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",413,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"option"}}],[11,"clone","","",413,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"queue"}}],[6,"Slab","","",null,null],[11,"cmp","mio","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"option"}}],[11,"lt","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",414,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"eq","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"edge","","",414,{"inputs":[],"output":{"name":"pollopt"}}],[11,"empty","","",414,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","",414,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","",414,{"inputs":[],"output":{"name":"pollopt"}}],[11,"all","","",414,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","",414,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_level","","",414,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",414,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"bits","","",414,{"inputs":[{"name":"pollopt"}],"output":{"name":"usize"}}],[11,"contains","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"remove","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",414,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",414,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",414,{"inputs":[{"name":"pollopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"option"}}],[11,"lt","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"le","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"gt","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ge","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"clone","","",415,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"eq","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ne","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"none","","",415,{"inputs":[],"output":{"name":"eventset"}}],[11,"readable","","",415,{"inputs":[],"output":{"name":"eventset"}}],[11,"writable","","",415,{"inputs":[],"output":{"name":"eventset"}}],[11,"error","","",415,{"inputs":[],"output":{"name":"eventset"}}],[11,"hup","","",415,{"inputs":[],"output":{"name":"eventset"}}],[11,"all","","",415,{"inputs":[],"output":{"name":"eventset"}}],[11,"is_readable","","",415,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_writable","","",415,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_error","","",415,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_hup","","",415,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"insert","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":null}],[11,"remove","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":null}],[11,"bits","","",415,{"inputs":[{"name":"eventset"}],"output":{"name":"usize"}}],[11,"contains","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"bitor","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitxor","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitand","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"sub","","",415,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"not","","",415,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"fmt","","",415,{"inputs":[{"name":"eventset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",410,{"inputs":[{"name":"ioevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",410,{"inputs":[{"name":"ioevent"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"ne","","",410,{"inputs":[{"name":"ioevent"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"clone","","",410,{"inputs":[{"name":"ioevent"}],"output":{"name":"ioevent"}}],[11,"new","","Create a new IoEvent.",410,{"inputs":[{"name":"eventset"},{"name":"token"}],"output":{"name":"ioevent"}}],[11,"fmt","","",416,{"inputs":[{"name":"eventloopconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",416,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"new","","Creates a new configuration for the event loop with all default options\nspecified.",416,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event\nloop&#39;s notification channel before a send will fail.",416,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of\nthe event loop.",416,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_tick_ms","","",416,{"inputs":[{"name":"eventloopconfig"},{"name":"u64"}],"output":{"name":"self"}}],[11,"timer_wheel_size","","",416,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_capacity","","",416,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",416,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",417,{"inputs":[{"name":"eventloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The\nevent loop will not be running yet.",417,{"inputs":[],"output":{"name":"result"}}],[11,"configured","","",417,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",417,{"inputs":[{"name":"eventloop"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",417,{"inputs":[{"name":"eventloop"},{"name":"timeout"},{"name":"u64"}],"output":{"name":"timerresult"}}],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",417,{"inputs":[{"name":"eventloop"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",417,{"inputs":[{"name":"eventloop"}],"output":null}],[11,"is_running","","Indicates whether the event loop is currently running. If it&#39;s not it has either\nstopped or is scheduled to stop on the next tick.",417,{"inputs":[{"name":"eventloop"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",417,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",417,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",417,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",417,{"inputs":[{"name":"eventloop"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the\nhandler if any of the registered handles become ready during that\ntime.",417,{"inputs":[{"name":"eventloop"},{"name":"h"},{"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",417,{"inputs":[{"name":"eventloop"}],"output":null}],[11,"clone","","",418,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"fmt","","",418,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","",418,{"inputs":[{"name":"sender"},{"name":"m"}],"output":{"name":"result"}}],[11,"read_to_end","mio::io","Read all bytes until EOF in this source, placing them into `buf`.",419,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",419,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",419,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",419,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",419,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",419,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",419,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",419,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",419,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",420,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",420,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",420,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",420,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[11,"from_str","mio","",411,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",412,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",412,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",412,{"inputs":[{"name":"notifyerror"}],"output":{"name":"str"}}],[11,"cause","","",412,{"inputs":[{"name":"notifyerror"}],"output":{"name":"option"}}],[11,"new","","",421,{"inputs":[],"output":{"name":"result"}}],[11,"register","","",421,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",421,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",421,{"inputs":[{"name":"poll"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","",421,{"inputs":[{"name":"poll"},{"name":"option"}],"output":{"name":"result"}}],[11,"event","","",421,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"events","","",421,{"inputs":[{"name":"poll"}],"output":{"name":"events"}}],[11,"fmt","","",421,{"inputs":[{"name":"poll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",422,{"inputs":[{"name":"events"}],"output":{"name":"option"}}],[11,"fmt","","",423,{"inputs":[{"name":"selector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",423,{"inputs":[],"output":{"name":"result"}}],[11,"id","","",423,{"inputs":[{"name":"selector"}],"output":{"name":"usize"}}],[11,"select","","Wait for events from the OS",423,{"inputs":[{"name":"selector"},{"name":"events"},{"name":"option"}],"output":{"name":"result"}}],[11,"register","","Register event interests for the given IO handle with the OS",423,{"inputs":[{"name":"selector"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Register event interests for the given IO handle with the OS",423,{"inputs":[{"name":"selector"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister event interests for the given IO handle with the OS",423,{"inputs":[{"name":"selector"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"drop","","",423,{"inputs":[{"name":"selector"}],"output":null}],[11,"fmt","","",424,{"inputs":[{"name":"io"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",424,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from","","",424,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from_raw_fd","","",424,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",424,{"inputs":[{"name":"io"}],"output":{"name":"rawfd"}}],[11,"register","","",424,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",424,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",424,{"inputs":[{"name":"io"},{"name":"selector"}],"output":{"name":"result"}}],[11,"read","","",424,null],[11,"write","","",424,null],[11,"flush","","",424,{"inputs":[{"name":"io"}],"output":{"name":"result"}}],[11,"drop","","",424,{"inputs":[{"name":"io"}],"output":null}],[11,"clone","libc::types::os::common::posix01","",425,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",426,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",427,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",428,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","libc::types::os::common::bsd43","",429,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","libc::types::os::common::bsd44","",430,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",431,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",432,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",433,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",434,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",435,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",436,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",437,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",438,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",439,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",440,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","libc::types::os::arch::posix01","",441,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",442,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",443,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::types::os::arch::extra","",444,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"from_errno","nix","",445,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",445,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",445,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",445,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"eq","nix::errno::consts","",446,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",446,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",446,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",446,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",446,{"inputs":[],"output":{"name":"errno"}}],[11,"desc","","",446,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"from_i32","","",446,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",446,null],[11,"fmt","nix::fcntl::ffi::os","",447,{"inputs":[{"name":"flock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",447,{"inputs":[],"output":{"name":"flock"}}],[11,"clone","","",447,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"hash","nix::fcntl::consts","",448,null],[11,"cmp","","",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",448,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",448,{"inputs":[{"name":"oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",448,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",448,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",448,{"inputs":[{"name":"oflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",448,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",448,{"inputs":[{"name":"i32"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",448,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",448,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",448,null],[11,"remove","","Removes the specified flags in-place.",448,null],[11,"toggle","","Toggles the specified flags in-place.",448,null],[11,"bitor","","Returns the union of the two sets of flags.",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",448,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",448,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"from_iter","","",448,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",449,null],[11,"cmp","","",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",449,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",449,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",449,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",449,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",449,{"inputs":[{"name":"fdflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",449,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",449,{"inputs":[{"name":"i32"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",449,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",449,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",449,null],[11,"remove","","Removes the specified flags in-place.",449,null],[11,"toggle","","Toggles the specified flags in-place.",449,null],[11,"bitor","","Returns the union of the two sets of flags.",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",449,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",449,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",449,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",450,null],[11,"cmp","","",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"option"}}],[11,"lt","","",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"le","","",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"gt","","",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ge","","",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"clone","","",450,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"eq","","",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ne","","",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"fmt","","",450,{"inputs":[{"name":"sealflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",450,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",450,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",450,{"inputs":[{"name":"sealflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",450,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",450,{"inputs":[{"name":"i32"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",450,{"inputs":[{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",450,{"inputs":[{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",450,null],[11,"remove","","Removes the specified flags in-place.",450,null],[11,"toggle","","Toggles the specified flags in-place.",450,null],[11,"bitor","","Returns the union of the two sets of flags.",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",450,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"not","","Returns the complement of this set of flags.",450,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"from_iter","","",450,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[11,"hash","nix::mount","",451,null],[11,"cmp","","",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",451,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"eq","","",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"fmt","","",451,{"inputs":[{"name":"msflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",451,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",451,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",451,{"inputs":[{"name":"msflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",451,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",451,{"inputs":[{"name":"u64"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",451,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",451,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",451,null],[11,"remove","","Removes the specified flags in-place.",451,null],[11,"toggle","","Toggles the specified flags in-place.",451,null],[11,"bitor","","Returns the union of the two sets of flags.",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",451,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",451,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"from_iter","","",451,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",452,null],[11,"cmp","","",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"option"}}],[11,"lt","","",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",452,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"eq","","",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"fmt","","",452,{"inputs":[{"name":"mntflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",452,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",452,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",452,{"inputs":[{"name":"mntflags"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",452,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",452,{"inputs":[{"name":"i32"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",452,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",452,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",452,null],[11,"remove","","Removes the specified flags in-place.",452,null],[11,"toggle","","Toggles the specified flags in-place.",452,null],[11,"bitor","","Returns the union of the two sets of flags.",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",452,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",452,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"from_iter","","",452,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[11,"hash","nix::mqueue::consts","",453,null],[11,"cmp","","",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"option"}}],[11,"lt","","",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"le","","",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"gt","","",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ge","","",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"clone","","",453,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"eq","","",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ne","","",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",453,{"inputs":[{"name":"mq_oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",453,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",453,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",453,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",453,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",453,{"inputs":[{"name":"i32"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",453,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",453,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",453,null],[11,"remove","","Removes the specified flags in-place.",453,null],[11,"toggle","","Toggles the specified flags in-place.",453,null],[11,"bitor","","Returns the union of the two sets of flags.",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",453,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"not","","Returns the complement of this set of flags.",453,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"from_iter","","",453,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",454,null],[11,"cmp","","",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",454,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",454,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",454,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",454,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",454,{"inputs":[{"name":"fdflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",454,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",454,{"inputs":[{"name":"i32"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",454,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",454,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",454,null],[11,"remove","","Removes the specified flags in-place.",454,null],[11,"toggle","","Toggles the specified flags in-place.",454,null],[11,"bitor","","Returns the union of the two sets of flags.",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",454,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",454,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",454,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"eq","nix::mqueue","",455,{"inputs":[{"name":"mqattr"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"ne","","",455,{"inputs":[{"name":"mqattr"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"fmt","","",455,{"inputs":[{"name":"mqattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",455,{"inputs":[{"name":"mqattr"}],"output":{"name":"mqattr"}}],[11,"new","","",455,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"mqattr"}}],[11,"clone","nix::sched","",456,{"inputs":[{"name":"cpuset"}],"output":{"name":"cpuset"}}],[11,"new","","",456,{"inputs":[],"output":{"name":"cpuset"}}],[11,"set","","",456,null],[11,"unset","","",456,null],[11,"hash","nix::sys::epoll","",457,null],[11,"cmp","","",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"option"}}],[11,"lt","","",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"le","","",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"gt","","",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ge","","",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"clone","","",457,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"eq","","",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ne","","",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"fmt","","",457,{"inputs":[{"name":"epolleventkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",457,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",457,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",457,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",457,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",457,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",457,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",457,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",457,null],[11,"remove","","Removes the specified flags in-place.",457,null],[11,"toggle","","Toggles the specified flags in-place.",457,null],[11,"bitor","","Returns the union of the two sets of flags.",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",457,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",457,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"from_iter","","",457,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",458,{"inputs":[{"name":"epollop"}],"output":{"name":"epollop"}}],[11,"clone","","",459,{"inputs":[{"name":"epollevent"}],"output":{"name":"epollevent"}}],[11,"hash","nix::sys::memfd","",460,null],[11,"cmp","","",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"option"}}],[11,"lt","","",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"le","","",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"gt","","",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ge","","",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"clone","","",460,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"eq","","",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ne","","",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"fmt","","",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",460,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",460,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",460,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",460,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",460,{"inputs":[{"name":"u32"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",460,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",460,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",460,null],[11,"remove","","Removes the specified flags in-place.",460,null],[11,"toggle","","Toggles the specified flags in-place.",460,null],[11,"bitor","","Returns the union of the two sets of flags.",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",460,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"not","","Returns the complement of this set of flags.",460,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"from_iter","","",460,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[11,"hash","nix::sys::signal::signal","",461,null],[11,"cmp","","",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",461,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",461,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",461,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",461,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",461,{"inputs":[{"name":"sockflag"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",461,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",461,{"inputs":[{"name":"u64"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",461,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",461,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",461,null],[11,"remove","","Removes the specified flags in-place.",461,null],[11,"toggle","","Toggles the specified flags in-place.",461,null],[11,"bitor","","Returns the union of the two sets of flags.",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",461,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",461,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",461,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"hash","","",462,null],[11,"cmp","","",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"option"}}],[11,"lt","","",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"le","","",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"gt","","",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ge","","",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"clone","","",462,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"eq","","",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ne","","",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"fmt","","",462,{"inputs":[{"name":"howflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",462,{"inputs":[],"output":{"name":"howflag"}}],[11,"all","","Returns the set containing all flags.",462,{"inputs":[],"output":{"name":"howflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",462,{"inputs":[{"name":"howflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",462,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",462,{"inputs":[{"name":"i32"}],"output":{"name":"howflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",462,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",462,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",462,null],[11,"remove","","Removes the specified flags in-place.",462,null],[11,"toggle","","Toggles the specified flags in-place.",462,null],[11,"bitor","","Returns the union of the two sets of flags.",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",462,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"not","","Returns the complement of this set of flags.",462,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"from_iter","","",462,{"inputs":[{"name":"t"}],"output":{"name":"howflag"}}],[11,"clone","","",463,{"inputs":[{"name":"siginfo"}],"output":{"name":"siginfo"}}],[11,"clone","","",464,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","nix::sys::signal","",465,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"all","","",465,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",465,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",465,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove","","",465,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"contains","","",465,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",465,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",465,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",465,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",465,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",465,{"inputs":[{"name":"sigset"},{"name":"howflag"}],"output":{"name":"result"}}],[11,"as_ref","","",465,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset_t"}}],[11,"new","","",466,null],[11,"hash","nix::sys::socket::addr","",467,null],[11,"fmt","","",467,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",467,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"ne","","",467,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",467,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",468,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",468,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",468,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",468,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",468,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",468,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",468,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",468,null],[11,"clone","","",468,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",468,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",469,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",469,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",469,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",470,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",470,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",470,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",470,null],[11,"to_std","","",470,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",470,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",470,null],[11,"clone","","",470,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",470,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",471,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"new","","",471,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",471,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",471,null],[11,"to_std","","",471,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",471,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",472,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",472,null],[11,"path","","If this address represents a filesystem path, return that path.",472,{"inputs":[{"name":"unixaddr"}],"output":{"name":"option"}}],[11,"eq","","",472,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",472,null],[11,"clone","","",472,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",472,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",473,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",473,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",473,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",473,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",473,null],[11,"eq","","",473,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",473,null],[11,"clone","","",473,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",473,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","nix::sys::socket::multicast","",474,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",474,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",474,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",475,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[11,"fmt","nix::sys::socket::sockopt","",476,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",476,{"inputs":[{"name":"reuseaddr"}],"output":{"name":"reuseaddr"}}],[11,"set","","",476,{"inputs":[{"name":"reuseaddr"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",476,{"inputs":[{"name":"reuseaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",477,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",477,{"inputs":[{"name":"reuseport"}],"output":{"name":"reuseport"}}],[11,"set","","",477,{"inputs":[{"name":"reuseport"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",477,{"inputs":[{"name":"reuseport"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",478,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",478,{"inputs":[{"name":"tcpnodelay"}],"output":{"name":"tcpnodelay"}}],[11,"set","","",478,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",478,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",479,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",479,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"set","","",479,{"inputs":[{"name":"linger"},{"name":"i32"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",479,{"inputs":[{"name":"linger"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",480,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",480,{"inputs":[{"name":"ipaddmembership"}],"output":{"name":"ipaddmembership"}}],[11,"set","","",480,{"inputs":[{"name":"ipaddmembership"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",481,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",481,{"inputs":[{"name":"ipdropmembership"}],"output":{"name":"ipdropmembership"}}],[11,"set","","",481,{"inputs":[{"name":"ipdropmembership"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",482,{"inputs":[{"name":"ipv6addmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",482,{"inputs":[{"name":"ipv6addmembership"}],"output":{"name":"ipv6addmembership"}}],[11,"set","","",482,{"inputs":[{"name":"ipv6addmembership"},{"name":"i32"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",483,{"inputs":[{"name":"ipv6dropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",483,{"inputs":[{"name":"ipv6dropmembership"}],"output":{"name":"ipv6dropmembership"}}],[11,"set","","",483,{"inputs":[{"name":"ipv6dropmembership"},{"name":"i32"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",484,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",484,{"inputs":[{"name":"ipmulticastttl"}],"output":{"name":"ipmulticastttl"}}],[11,"set","","",484,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",484,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",485,{"inputs":[{"name":"ipmulticastloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",485,{"inputs":[{"name":"ipmulticastloop"}],"output":{"name":"ipmulticastloop"}}],[11,"set","","",485,{"inputs":[{"name":"ipmulticastloop"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",485,{"inputs":[{"name":"ipmulticastloop"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",486,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",486,{"inputs":[{"name":"receivetimeout"}],"output":{"name":"receivetimeout"}}],[11,"set","","",486,{"inputs":[{"name":"receivetimeout"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",486,{"inputs":[{"name":"receivetimeout"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",487,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",487,{"inputs":[{"name":"sendtimeout"}],"output":{"name":"sendtimeout"}}],[11,"set","","",487,{"inputs":[{"name":"sendtimeout"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",487,{"inputs":[{"name":"sendtimeout"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",488,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",488,{"inputs":[{"name":"broadcast"}],"output":{"name":"broadcast"}}],[11,"set","","",488,{"inputs":[{"name":"broadcast"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",488,{"inputs":[{"name":"broadcast"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",489,{"inputs":[{"name":"oobinline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",489,{"inputs":[{"name":"oobinline"}],"output":{"name":"oobinline"}}],[11,"set","","",489,{"inputs":[{"name":"oobinline"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",489,{"inputs":[{"name":"oobinline"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",490,{"inputs":[{"name":"socketerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",490,{"inputs":[{"name":"socketerror"}],"output":{"name":"socketerror"}}],[11,"get","","",490,{"inputs":[{"name":"socketerror"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"keepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",491,{"inputs":[{"name":"keepalive"}],"output":{"name":"keepalive"}}],[11,"set","","",491,{"inputs":[{"name":"keepalive"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",491,{"inputs":[{"name":"keepalive"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",492,{"inputs":[{"name":"tcpkeepidle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",492,{"inputs":[{"name":"tcpkeepidle"}],"output":{"name":"tcpkeepidle"}}],[11,"set","","",492,{"inputs":[{"name":"tcpkeepidle"},{"name":"i32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",492,{"inputs":[{"name":"tcpkeepidle"},{"name":"i32"}],"output":{"name":"result"}}],[11,"blank","","",493,{"inputs":[],"output":{"name":"getstruct"}}],[11,"ffi_ptr","","",493,null],[11,"ffi_len","","",493,null],[11,"unwrap","","",493,{"inputs":[{"name":"getstruct"}],"output":{"name":"t"}}],[11,"new","","",494,{"inputs":[{"name":"t"}],"output":{"name":"setstruct"}}],[11,"ffi_ptr","","",494,null],[11,"ffi_len","","",494,{"inputs":[{"name":"setstruct"}],"output":{"name":"u32"}}],[11,"blank","","",495,{"inputs":[],"output":{"name":"getbool"}}],[11,"ffi_ptr","","",495,null],[11,"ffi_len","","",495,null],[11,"unwrap","","",495,{"inputs":[{"name":"getbool"}],"output":{"name":"bool"}}],[11,"new","","",496,{"inputs":[{"name":"bool"}],"output":{"name":"setbool"}}],[11,"ffi_ptr","","",496,null],[11,"ffi_len","","",496,{"inputs":[{"name":"setbool"}],"output":{"name":"u32"}}],[11,"blank","","",497,{"inputs":[],"output":{"name":"getu8"}}],[11,"ffi_ptr","","",497,null],[11,"ffi_len","","",497,null],[11,"unwrap","","",497,{"inputs":[{"name":"getu8"}],"output":{"name":"u8"}}],[11,"new","","",498,{"inputs":[{"name":"u8"}],"output":{"name":"setu8"}}],[11,"ffi_ptr","","",498,null],[11,"ffi_len","","",498,{"inputs":[{"name":"setu8"}],"output":{"name":"u32"}}],[11,"fmt","nix::sys::socket","",499,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",499,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"ne","","",499,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"clone","","",499,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"hash","","",500,null],[11,"cmp","","",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",500,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",500,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",500,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",500,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",500,{"inputs":[{"name":"sockflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",500,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",500,{"inputs":[{"name":"i32"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",500,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",500,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",500,null],[11,"remove","","Removes the specified flags in-place.",500,null],[11,"toggle","","Toggles the specified flags in-place.",500,null],[11,"bitor","","Returns the union of the two sets of flags.",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",500,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",500,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",500,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",501,{"inputs":[],"output":{"name":"cmsgspace"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",502,{"inputs":[{"name":"recvmsg"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",503,{"inputs":[{"name":"cmsgiterator"}],"output":{"name":"option"}}],[11,"fmt","","",504,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",504,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",505,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",505,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",505,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",505,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"hash","nix::sys::stat","",506,null],[11,"cmp","","",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",506,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"fmt","","",506,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",506,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",506,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",506,{"inputs":[{"name":"sflag"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",506,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",506,{"inputs":[{"name":"u32"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",506,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",506,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",506,null],[11,"remove","","Removes the specified flags in-place.",506,null],[11,"toggle","","Toggles the specified flags in-place.",506,null],[11,"bitor","","Returns the union of the two sets of flags.",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",506,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",506,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"from_iter","","",506,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",507,null],[11,"cmp","","",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",507,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"fmt","","",507,{"inputs":[{"name":"mode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",507,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",507,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",507,{"inputs":[{"name":"mode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",507,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",507,{"inputs":[{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",507,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",507,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",507,null],[11,"remove","","Removes the specified flags in-place.",507,null],[11,"toggle","","Toggles the specified flags in-place.",507,null],[11,"bitor","","Returns the union of the two sets of flags.",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",507,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",507,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"from_iter","","",507,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"clone","nix::sys::termios::ffi::consts","",508,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"hash","","",509,null],[11,"cmp","","",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",509,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",509,{"inputs":[{"name":"inputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",509,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",509,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",509,{"inputs":[{"name":"inputflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",509,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",509,{"inputs":[{"name":"u32"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",509,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",509,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",509,null],[11,"remove","","Removes the specified flags in-place.",509,null],[11,"toggle","","Toggles the specified flags in-place.",509,null],[11,"bitor","","Returns the union of the two sets of flags.",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",509,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",509,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"from_iter","","",509,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",510,null],[11,"cmp","","",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",510,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",510,{"inputs":[{"name":"outputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",510,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",510,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",510,{"inputs":[{"name":"outputflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",510,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",510,{"inputs":[{"name":"u32"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",510,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",510,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",510,null],[11,"remove","","Removes the specified flags in-place.",510,null],[11,"toggle","","Toggles the specified flags in-place.",510,null],[11,"bitor","","Returns the union of the two sets of flags.",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",510,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",510,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"from_iter","","",510,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",511,null],[11,"cmp","","",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",511,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"fmt","","",511,{"inputs":[{"name":"controlflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",511,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",511,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",511,{"inputs":[{"name":"controlflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",511,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",511,{"inputs":[{"name":"u32"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",511,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",511,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",511,null],[11,"remove","","Removes the specified flags in-place.",511,null],[11,"toggle","","Toggles the specified flags in-place.",511,null],[11,"bitor","","Returns the union of the two sets of flags.",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",511,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",511,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"from_iter","","",511,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",512,null],[11,"cmp","","",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",512,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"fmt","","",512,{"inputs":[{"name":"localflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",512,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",512,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",512,{"inputs":[{"name":"localflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",512,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",512,{"inputs":[{"name":"u32"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",512,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",512,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",512,null],[11,"remove","","Removes the specified flags in-place.",512,null],[11,"toggle","","Toggles the specified flags in-place.",512,null],[11,"bitor","","Returns the union of the two sets of flags.",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",512,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",512,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"from_iter","","",512,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",513,{"inputs":[{"name":"setarg"}],"output":{"name":"setarg"}}],[11,"clone","","",514,{"inputs":[{"name":"flusharg"}],"output":{"name":"flusharg"}}],[11,"clone","","",515,{"inputs":[{"name":"flowarg"}],"output":{"name":"flowarg"}}],[11,"clone","nix::sys::utsname","",516,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"sysname","","",516,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"nodename","","",516,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"release","","",516,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"version","","",516,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"machine","","",516,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"hash","nix::sys::wait","",517,null],[11,"cmp","","",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",517,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"fmt","","",517,{"inputs":[{"name":"waitpidflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",517,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",517,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",517,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",517,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",517,{"inputs":[{"name":"i32"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",517,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",517,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",517,null],[11,"remove","","Removes the specified flags in-place.",517,null],[11,"toggle","","Toggles the specified flags in-place.",517,null],[11,"bitor","","Returns the union of the two sets of flags.",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",517,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",517,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"from_iter","","",517,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",518,{"inputs":[{"name":"waitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",518,{"inputs":[{"name":"waitstatus"}],"output":{"name":"waitstatus"}}],[11,"eq","","",518,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",518,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"as_slice","nix::sys::uio","",519,null],[11,"from_slice","","",519,null],[11,"from_mut_slice","","",519,null],[11,"fmt","nix::sys::time","",520,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",520,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",520,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",520,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",520,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",520,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",520,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",520,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",520,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",520,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",520,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",520,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",520,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"neg","","",520,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"add","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",520,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",520,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",520,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",520,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","nix::sys::select","",521,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",521,null],[11,"remove","","",521,null],[11,"contains","","",521,{"inputs":[{"name":"fdset"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"clear","","",521,null],[11,"as_int","nix::sys::quota::quota","",522,{"inputs":[{"name":"quotacmd"}],"output":{"name":"i32"}}],[11,"hash","","",523,null],[11,"cmp","","",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"option"}}],[11,"lt","","",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"le","","",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"gt","","",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ge","","",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"clone","","",523,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"eq","","",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ne","","",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"default","","",523,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",523,{"inputs":[{"name":"quotavalidflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",523,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",523,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",523,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",523,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",523,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",523,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",523,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",523,null],[11,"remove","","Removes the specified flags in-place.",523,null],[11,"toggle","","Toggles the specified flags in-place.",523,null],[11,"bitor","","Returns the union of the two sets of flags.",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",523,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"not","","Returns the complement of this set of flags.",523,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"from_iter","","",523,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",524,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"fmt","","",524,{"inputs":[{"name":"dqblk"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",524,{"inputs":[],"output":{"name":"dqblk"}}],[11,"clone","nix::sys::statfs::vfs","",525,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"fmt","","",525,{"inputs":[{"name":"statfs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","nix::sys::statvfs::vfs","",526,null],[11,"cmp","","",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"option"}}],[11,"lt","","",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",526,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"eq","","",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"default","","",526,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",526,{"inputs":[{"name":"fsflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",526,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",526,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",526,{"inputs":[{"name":"fsflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",526,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",526,{"inputs":[{"name":"u64"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",526,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",526,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",526,null],[11,"remove","","Removes the specified flags in-place.",526,null],[11,"toggle","","Toggles the specified flags in-place.",526,null],[11,"bitor","","Returns the union of the two sets of flags.",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",526,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",526,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"from_iter","","",526,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",527,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"fmt","","",527,{"inputs":[{"name":"statvfs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",527,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",527,{"inputs":[{"name":"statvfs"},{"name":"p"}],"output":{"name":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",527,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",527,{"inputs":[{"name":"statvfs"},{"name":"t"}],"output":{"name":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",527,{"inputs":[],"output":{"name":"statvfs"}}],[11,"clone","nix::unistd","",528,{"inputs":[{"name":"fork"}],"output":{"name":"fork"}}],[11,"is_child","","",528,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",528,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"eq","nix","",445,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",445,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",445,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",445,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",445,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",445,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",445,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",83,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"len","std::path","",157,{"inputs":[{"name":"path"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",157,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",156,{"inputs":[{"name":"pathbuf"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",156,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","mio","",529,{"inputs":[{"name":"timeout"}],"output":{"name":"timeout"}}],[11,"fmt","","",530,{"inputs":[{"name":"timererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",531,null],[11,"cmp","","",531,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",531,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"option"}}],[11,"lt","","",531,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",531,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",531,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",531,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eq","","",531,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",531,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",531,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",531,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"as_usize","","",531,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[11,"from_usize","","",531,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[11,"as_usize","","",531,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[0,"tcp","","",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",140,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",140,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",140,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[11,"fmt","","",532,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified\naddress.",532,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",532,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",532,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",532,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",532,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",532,null],[11,"write","","",532,null],[11,"flush","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",532,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",532,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",532,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",533,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",533,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",533,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"register","","",533,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",533,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",533,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",532,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",533,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[0,"udp","mio","",null,null],[3,"UdpSocket","mio::udp","",null,null],[11,"fmt","","",534,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",534,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",534,{"inputs":[],"output":{"name":"result"}}],[11,"bound","","",534,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",534,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",534,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",534,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",534,null],[11,"recv_from","","",534,null],[11,"set_broadcast","","",534,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",534,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",534,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",534,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",534,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",534,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",534,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",534,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",534,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",534,{"inputs":[{"name":"udpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",534,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[0,"unix","mio","",null,null],[3,"PipeReader","mio::unix","",null,null],[3,"PipeWriter","","",null,null],[3,"UnixListener","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"EventedFd","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[0,"prelude","mio","",null,null],[3,"EventLoop","mio::prelude","Single threaded IO event loop.",null,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",535,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",535,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",536,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",536,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",537,null],[16,"Message","","",537,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop&#39;s channel.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","Invoked when a timeout has completed.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[8,"TryRead","","",null,null],[11,"try_read_buf","","",535,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",535,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",536,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",536,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"TryAccept","","",null,null],[16,"Output","","",538,null],[10,"accept","","",538,{"inputs":[{"name":"tryaccept"}],"output":{"name":"result"}}],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop&#39;s channel.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","Invoked when a timeout has completed.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",537,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"try_read_buf","mio::prelude","",535,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[11,"try_write_buf","","",536,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[11,"fmt","mio::tcp","",532,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified\naddress.",532,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",532,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",532,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",532,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",532,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",532,null],[11,"write","","",532,null],[11,"flush","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",532,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",532,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",532,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",533,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",533,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",533,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"register","","",533,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",533,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",533,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",532,{"inputs":[{"name":"tcpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",532,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",533,{"inputs":[{"name":"tcplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",533,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::udp","",534,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",534,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",534,{"inputs":[],"output":{"name":"result"}}],[11,"bound","","",534,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",534,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",534,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",534,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",534,null],[11,"recv_from","","",534,null],[11,"set_broadcast","","",534,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",534,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",534,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",534,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",534,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",534,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",534,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",534,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",534,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",534,{"inputs":[{"name":"udpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",534,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::unix","",539,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",539,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",539,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",539,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",539,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_clone","","",539,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"register","","",539,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",539,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",539,{"inputs":[{"name":"unixsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",539,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",540,{"inputs":[{"name":"unixstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",540,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",540,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"read_recv_fd","","",540,null],[11,"try_read_recv_fd","","",540,null],[11,"try_read_buf_recv_fd","","",540,{"inputs":[{"name":"unixstream"},{"name":"b"}],"output":{"name":"result"}}],[11,"write_send_fd","","",540,null],[11,"try_write_send_fd","","",540,null],[11,"try_write_buf_send_fd","","",540,{"inputs":[{"name":"unixstream"},{"name":"b"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"read","","",540,null],[11,"write","","",540,null],[11,"flush","","",540,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"register","","",540,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",540,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",540,{"inputs":[{"name":"unixstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",540,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",541,{"inputs":[{"name":"unixlistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",541,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",541,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"try_clone","","",541,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"register","","",541,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",541,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",541,{"inputs":[{"name":"unixlistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",541,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"from","","",541,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",542,{"inputs":[{"name":"pipereader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",542,null],[11,"register","","",542,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",542,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",542,{"inputs":[{"name":"pipereader"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",542,{"inputs":[{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",543,{"inputs":[{"name":"pipewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",543,null],[11,"flush","","",543,{"inputs":[{"name":"pipewriter"}],"output":{"name":"result"}}],[11,"register","","",543,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",543,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",543,{"inputs":[{"name":"pipewriter"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",543,{"inputs":[{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",539,{"inputs":[{"name":"unixsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",539,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",540,{"inputs":[{"name":"unixstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",540,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",541,{"inputs":[{"name":"unixlistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",541,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",542,{"inputs":[{"name":"pipereader"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",542,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",543,{"inputs":[{"name":"pipewriter"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",543,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipewriter"}}],[11,"fmt","","",544,{"inputs":[{"name":"eventedfd"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",544,{"inputs":[{"name":"eventedfd"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",544,{"inputs":[{"name":"eventedfd"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",544,{"inputs":[{"name":"eventedfd"},{"name":"selector"}],"output":{"name":"result"}}]],"paths":[[3,"Ipv4Addr"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"ScopedKey"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Weak"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"sockaddr_nl"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sigset_t"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"OsRng"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Timespec"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[3,"OsRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Rc"],[3,"Weak"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"IoEvent"],[4,"IpAddr"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"PollOpt"],[3,"EventSet"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[8,"Read"],[8,"Write"],[3,"Poll"],[3,"Events"],[3,"Selector"],[3,"Io"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"],[4,"Error"],[4,"Errno"],[3,"flock"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"CpuSet"],[3,"EpollEventKind"],[4,"EpollOp"],[3,"EpollEvent"],[3,"MemFdCreateFlag"],[3,"SockFlag"],[3,"HowFlag"],[3,"siginfo"],[3,"sigset_t"],[3,"SigSet"],[3,"SigAction"],[4,"AddressFamily"],[4,"InetAddr"],[4,"IpAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[4,"SockAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepIdle"],[3,"GetStruct"],[3,"SetStruct"],[3,"GetBool"],[3,"SetBool"],[3,"GetU8"],[3,"SetU8"],[4,"SockType"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"RecvMsg"],[3,"CmsgIterator"],[3,"linger"],[4,"Shutdown"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"UtsName"],[3,"WaitPidFlag"],[4,"WaitStatus"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"QuotaValidFlags"],[3,"Dqblk"],[3,"Statfs"],[3,"FsFlags"],[3,"Statvfs"],[4,"Fork"],[3,"Timeout"],[3,"TimerError"],[3,"Token"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[8,"TryAccept"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"],[3,"EventedFd"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["toml"] = {"doc":"A TOML-parsing library","items":[[3,"Parser","toml","Parser for converting a string to a TOML `Value` instance.",null,null],[12,"errors","","A list of all errors which have occurred during parsing.",0,null],[3,"ParserError","","A structure representing a parse error.",null,null],[12,"lo","","The low byte at which this error is pointing at.",1,null],[12,"hi","","One byte beyond the last character at which this error is pointing at.",1,null],[12,"desc","","A human-readable description explaining what the error is.",1,null],[3,"Encoder","","A structure to transform Rust values into TOML values.",null,null],[12,"toml","","Output TOML that is emitted. The current version of this encoder forces\nthe top-level representation of a structure to be a table.",2,null],[3,"Decoder","","A structure to transform TOML values into Rust values.",null,null],[12,"toml","","The TOML value left over after decoding. This can be used to inspect\nwhether fields were decoded or not.",3,null],[3,"DecodeError","","Description for errors which can occur while decoding a type.",null,null],[12,"field","","Field that this error applies to.",4,null],[12,"kind","","The type of error which occurred while decoding,",4,null],[4,"Error","","Enumeration of errors which can occur while encoding a rust value into a\nTOML value.",null,null],[13,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key\nwas previously emitted.",5,null],[13,"NoValue","","Indication that a key was emitted, but not value was emitted.",5,null],[13,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid\nlocation.",5,null],[13,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a\nmap key type.",5,null],[13,"Custom","","A custom error type was generated",5,null],[4,"DecodeErrorKind","","Enumeration of possible errors which can occur while decoding a structure.",null,null],[13,"ApplicationError","","An error flagged by the application, e.g. value out of range",6,null],[13,"ExpectedField","","A field was expected, but none was found.",6,null],[13,"UnknownField","","A field was found, but it was not an expected one.",6,null],[13,"ExpectedType","","A field was found, but it had the wrong type.",6,null],[13,"ExpectedMapKey","","The nth map key was expected, but none was found.",6,null],[13,"ExpectedMapElement","","The nth map element was expected, but none was found.",6,null],[13,"NoEnumVariants","","An enum decoding was requested, but no variants were supplied",6,null],[13,"NilTooLong","","The unit type was being decoded, but a non-zero length string was found",6,null],[13,"SyntaxError","","There was an error with the syntactical structure of the TOML.",6,null],[13,"CustomError","","A custom error was generated when decoding.",6,null],[13,"EndOfStream","","The end of the TOML input was reached too soon",6,null],[13,"InvalidType","","Produced by serde ...",6,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","",7,null],[13,"Integer","","",7,null],[13,"Float","","",7,null],[13,"Boolean","","",7,null],[13,"Datetime","","",7,null],[13,"Array","","",7,null],[13,"Table","","",7,null],[5,"encode","","Encodes an encodable value into a TOML value.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"encode_str","","Encodes an encodable value into a TOML string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decodes a TOML value into a decodable type.",null,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[5,"decode_str","","Decodes a string into a toml-encoded value.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"parsererror"}],"output":{"name":"parsererror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new parser for a string.",0,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}],[11,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0,null],[11,"parse","","Executes the parser, parsing the string contained within.",0,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"emit_nil","","",2,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_usize","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u8","","",2,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_u16","","",2,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u32","","",2,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u64","","",2,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_isize","","",2,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i8","","",2,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_i16","","",2,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i32","","",2,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i64","","",2,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_bool","","",2,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f32","","",2,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_f64","","",2,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_char","","",2,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",2,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",2,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",2,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_option_some","","",2,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"value"},{"name":"e"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new encoder which will emit to the given output stream.",2,{"inputs":[],"output":{"name":"encoder"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"read_nil","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",3,null],[11,"read_enum_variant_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",3,null],[11,"read_enum_struct_variant_field","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"error","","",3,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodeerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"decodeerror"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"decodeerror"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"decodeerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"decodeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new decoder, consuming the TOML value to decode.",3,{"inputs":[{"name":"value"}],"output":{"name":"decoder"}}],[11,"fmt","","",4,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"decodeerror"}],"output":{"name":"str"}}],[6,"Array","","Type representing a TOML array, payload of the Value::Array variant",null,null],[6,"Table","","Type representing a TOML table, payload of the Value::Table variant",null,null],[11,"fmt","","",7,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"eq","","",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"same_type","","Tests whether this and another value have the same type.",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"type_str","","Returns a human-readable representation of the type of this value.",7,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"as_str","","Extracts the string of this value if it is a string.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_integer","","Extracts the integer value if it is an integer.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_float","","Extracts the float value if it is a float.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_bool","","Extracts the boolean value if it is a boolean.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_slice","","Extracts the array value if it is an array.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_table","","Extracts the table value if it is a table.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"lookup","","Lookups for value at specified path.",7,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Parser"],[3,"ParserError"],[3,"Encoder"],[3,"Decoder"],[3,"DecodeError"],[4,"Error"],[4,"DecodeErrorKind"],[4,"Value"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID)",null,null],[3,"Simple","","Adaptor for formatting a Uuid as a simple string.",null,null],[3,"Hyphenated","","Adaptor for formatting a Uuid as a hyphenated string.",null,null],[3,"Urn","","Adaptor for formatting a Uuid as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID",null,null],[11,"clone","","",0,{"inputs":[{"name":"uuidversion"}],"output":{"name":"uuidversion"}}],[11,"eq","","",0,{"inputs":[{"name":"uuidversion"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"uuidversion"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"uuidvariant"}],"output":{"name":"uuidvariant"}}],[11,"eq","","",1,{"inputs":[{"name":"uuidvariant"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"uuidvariant"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","","Returns a nil or empty UUID (containing all zeroes)",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Create a new UUID of the specified version.",3,{"inputs":[{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"new_v4","","Creates a new random UUID",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a UUID using the supplied field values",3,null],[11,"from_bytes","","Creates a UUID using the supplied bytes",3,null],[11,"get_variant","","Returns the variant of the UUID structure",3,{"inputs":[{"name":"uuid"}],"output":{"name":"option"}}],[11,"get_version_num","","Returns the version number of the UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a\nstring of 32 hexadecimal digits.",3,{"inputs":[{"name":"uuid"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a\nstring of hexadecimal digits separated into gropus with a hyphen.",3,{"inputs":[{"name":"uuid"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a\nstring of the UUID as a full URN string.",3,{"inputs":[{"name":"uuid"}],"output":{"name":"urn"}}],[11,"parse_str","","Parses a UUID from a string of hexadecimal digits with optional hyphens",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"uuid"}],"output":{"name":"bool"}}],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a UUID",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"uuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"uuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,{"inputs":[{"name":"uuid"},{"name":"s"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"simple"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"hyphenated"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"urn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple *.next()*\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"interleave"}],"output":{"name":"interleave"}}],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,{"inputs":[{"name":"interleave"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"interleaveshortest"}}],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"putback"}],"output":{"name":"putback"}}],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,{"inputs":[{"name":"putback"},{"name":"item"}],"output":null}],[11,"next","","",9,{"inputs":[{"name":"putback"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,{"inputs":[{"name":"putbackn"},{"name":"item"}],"output":null}],[11,"next","","",10,{"inputs":[{"name":"putbackn"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"putbackn"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"product"}],"output":{"name":"product"}}],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,{"inputs":[{"name":"product"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"batching"}],"output":{"name":"batching"}}],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,{"inputs":[{"name":"batching"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"groupby"}],"output":{"name":"groupby"}}],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,{"inputs":[{"name":"groupby"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"step"}],"output":{"name":"step"}}],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,{"inputs":[{"name":"step"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"merge"}],"output":{"name":"self"}}],[11,"next","","",15,{"inputs":[{"name":"merge"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"mergeby"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"mergeby"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"multipeek"}],"output":{"name":"multipeek"}}],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like *.next()* with the only difference that it doesn&#39;t\nadvance itself. *.peek()* can be called multiple times, to peek\nfurther ahead.",17,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"next","","",17,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"coalesce"}],"output":{"name":"self"}}],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,{"inputs":[{"name":"coalesce"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"dedup"}],"output":{"name":"self"}}],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,{"inputs":[{"name":"dedup"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"mendslices"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"mendslices"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,{"inputs":[{"name":"takewhileref"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"whilesome"}],"output":{"name":"whilesome"}}],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,{"inputs":[{"name":"whilesome"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"combinations"}],"output":{"name":"combinations"}}],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,{"inputs":[{"name":"combinations"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,{"inputs":[{"name":"combinationsn"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"uniqueby"}],"output":{"name":"uniqueby"}}],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,{"inputs":[{"name":"uniqueby"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"next","","",26,{"inputs":[{"name":"unique"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"unique"}],"output":{"name":"unique"}}],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"next_back","","",27,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"flatten"}],"output":{"name":"self"}}],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"clone","itertools","",28,{"inputs":[{"name":"formatdefault"}],"output":{"name":"formatdefault"}}],[11,"fmt","","",29,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"groups"}],"output":{"name":"option"}}],[11,"drop","","",31,{"inputs":[{"name":"group"}],"output":null}],[11,"next","","",31,{"inputs":[{"name":"group"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"drop","","",33,{"inputs":[{"name":"chunk"}],"output":null}],[11,"next","","",33,{"inputs":[{"name":"chunk"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"intersperse"}],"output":{"name":"intersperse"}}],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,{"inputs":[{"name":"intersperse"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"islice"}],"output":{"name":"islice"}}],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,{"inputs":[{"name":"islice"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"kmerge"}],"output":{"name":"kmerge"}}],[11,"next","","",36,{"inputs":[{"name":"kmerge"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"linspace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"linspace"}],"output":{"name":"linspace"}}],[11,"next","","",37,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"minmaxresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"option"}}],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,{"inputs":[{"name":"intoiteratortuple"}],"output":{"name":"output"}}],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,{"inputs":[{"name":"appendtuple"},{"name":"x"}],"output":{"name":"result"}}],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,{"inputs":[{"name":"flattuples"}],"output":{"name":"flattuples"}}],[11,"next","","",41,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"start","core::ops","",42,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",43,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",44,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",44,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","itertools","",45,{"inputs":[{"name":"padusing"}],"output":{"name":"padusing"}}],[11,"new","","Create a new **PadUsing** iterator.",45,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",45,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"rciter"}}],[11,"next","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"new","","Create a new **RepeatN** with **n** repetitions.",46,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",46,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"new","","Create a new `RepeatCall` from a closure.",47,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",47,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",48,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",49,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",48,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",48,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",48,{"inputs":[{"name":"stride"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",48,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",48,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",48,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",48,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",48,{"inputs":[{"name":"stride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",48,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",48,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",49,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",49,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",49,{"inputs":[{"name":"stridemut"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",49,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",49,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",49,{"inputs":[{"name":"stridemut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",49,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"clone","","",48,{"inputs":[{"name":"stride"}],"output":{"name":"stride"}}],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"next","","",50,{"inputs":[{"name":"tee"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"zipeq"}],"output":{"name":"zipeq"}}],[11,"next","","",51,{"inputs":[{"name":"zipeq"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"ziplongest"}],"output":{"name":"ziplongest"}}],[11,"new","","Create a new `ZipLongest` iterator.",52,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",52,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"eitherorboth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"eitherorboth"}],"output":{"name":"eitherorboth"}}],[11,"clone","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"new","","Create a new `Zip` from a tuple of iterators.",53,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"zipslices"}],"output":{"name":"zipslices"}}],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",54,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",54,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",54,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"len","","",54,{"inputs":[{"name":"zipslices"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",54,{"inputs":[{"name":"zipslices"},{"name":"usize"}],"output":{"name":"item"}}],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",55,{"inputs":[{"name":"itertools"},{"name":"item"}],"output":{"name":"intersperse"}}],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupbylazy"}}],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"chunkslazy"}}],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",55,null],[11,"slice","","Return a sliced iterator.",55,{"inputs":[{"name":"itertools"},{"name":"r"}],"output":{"name":"islice"}}],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"rciter"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"step"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",55,{"inputs":[{"name":"itertools"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"kmerge"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"product"}}],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"multipeek"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"mendslices"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"whilesome"}}],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"combinations"}}],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",55,{"inputs":[{"name":"itertools"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"flatten"}}],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",55,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",55,{"inputs":[{"name":"itertools"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",55,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"string"}}],[11,"format_default","","Format all iterator elements, separated by `sep`.",55,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"formatdefault"}}],[11,"format","","Format all iterator elements, separated by `sep`.",55,{"inputs":[{"name":"itertools"},{"name":"str"},{"name":"f"}],"output":{"name":"format"}}],[11,"fold_results","","Fold `Result` values from an iterator.",55,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",55,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",55,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"option"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",55,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",2,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",4,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",11,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"fmt","","",1,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"streammatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"streammatches"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"matchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"matchesoverlapping"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"streammatchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"streammatchesoverlapping"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"automaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"transitions"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"transitions"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"transitions"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"acautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",9,{"inputs":[{"name":"dense"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"dense"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"sparse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"sparse"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"acautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[11,"clone","libc::types::os::common::posix01","",0,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","libc::types::os::common::bsd43","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","libc::types::os::common::bsd44","",5,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",6,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",8,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",9,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",10,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",11,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",12,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",15,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","libc::types::os::arch::posix01","",16,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",17,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",18,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::types::os::arch::extra","",19,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[6,"c_int","nix","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[4,"Error","","",null,null],[13,"Sys","","",20,null],[13,"InvalidPath","","",20,null],[5,"from_ffi","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"result"}}],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",21,null],[13,"EPERM","","",21,null],[13,"ENOENT","","",21,null],[13,"ESRCH","","",21,null],[13,"EINTR","","",21,null],[13,"EIO","","",21,null],[13,"ENXIO","","",21,null],[13,"E2BIG","","",21,null],[13,"ENOEXEC","","",21,null],[13,"EBADF","","",21,null],[13,"ECHILD","","",21,null],[13,"EAGAIN","","",21,null],[13,"ENOMEM","","",21,null],[13,"EACCES","","",21,null],[13,"EFAULT","","",21,null],[13,"ENOTBLK","","",21,null],[13,"EBUSY","","",21,null],[13,"EEXIST","","",21,null],[13,"EXDEV","","",21,null],[13,"ENODEV","","",21,null],[13,"ENOTDIR","","",21,null],[13,"EISDIR","","",21,null],[13,"EINVAL","","",21,null],[13,"ENFILE","","",21,null],[13,"EMFILE","","",21,null],[13,"ENOTTY","","",21,null],[13,"ETXTBSY","","",21,null],[13,"EFBIG","","",21,null],[13,"ENOSPC","","",21,null],[13,"ESPIPE","","",21,null],[13,"EROFS","","",21,null],[13,"EMLINK","","",21,null],[13,"EPIPE","","",21,null],[13,"EDOM","","",21,null],[13,"ERANGE","","",21,null],[13,"EDEADLK","","",21,null],[13,"ENAMETOOLONG","","",21,null],[13,"ENOLCK","","",21,null],[13,"ENOSYS","","",21,null],[13,"ENOTEMPTY","","",21,null],[13,"ELOOP","","",21,null],[13,"ENOMSG","","",21,null],[13,"EIDRM","","",21,null],[13,"ECHRNG","","",21,null],[13,"EL2NSYNC","","",21,null],[13,"EL3HLT","","",21,null],[13,"EL3RST","","",21,null],[13,"ELNRNG","","",21,null],[13,"EUNATCH","","",21,null],[13,"ENOCSI","","",21,null],[13,"EL2HLT","","",21,null],[13,"EBADE","","",21,null],[13,"EBADR","","",21,null],[13,"EXFULL","","",21,null],[13,"ENOANO","","",21,null],[13,"EBADRQC","","",21,null],[13,"EBADSLT","","",21,null],[13,"EBFONT","","",21,null],[13,"ENOSTR","","",21,null],[13,"ENODATA","","",21,null],[13,"ETIME","","",21,null],[13,"ENOSR","","",21,null],[13,"ENONET","","",21,null],[13,"ENOPKG","","",21,null],[13,"EREMOTE","","",21,null],[13,"ENOLINK","","",21,null],[13,"EADV","","",21,null],[13,"ESRMNT","","",21,null],[13,"ECOMM","","",21,null],[13,"EPROTO","","",21,null],[13,"EMULTIHOP","","",21,null],[13,"EDOTDOT","","",21,null],[13,"EBADMSG","","",21,null],[13,"EOVERFLOW","","",21,null],[13,"ENOTUNIQ","","",21,null],[13,"EBADFD","","",21,null],[13,"EREMCHG","","",21,null],[13,"ELIBACC","","",21,null],[13,"ELIBBAD","","",21,null],[13,"ELIBSCN","","",21,null],[13,"ELIBMAX","","",21,null],[13,"ELIBEXEC","","",21,null],[13,"EILSEQ","","",21,null],[13,"ERESTART","","",21,null],[13,"ESTRPIPE","","",21,null],[13,"EUSERS","","",21,null],[13,"ENOTSOCK","","",21,null],[13,"EDESTADDRREQ","","",21,null],[13,"EMSGSIZE","","",21,null],[13,"EPROTOTYPE","","",21,null],[13,"ENOPROTOOPT","","",21,null],[13,"EPROTONOSUPPORT","","",21,null],[13,"ESOCKTNOSUPPORT","","",21,null],[13,"EOPNOTSUPP","","",21,null],[13,"EPFNOSUPPORT","","",21,null],[13,"EAFNOSUPPORT","","",21,null],[13,"EADDRINUSE","","",21,null],[13,"EADDRNOTAVAIL","","",21,null],[13,"ENETDOWN","","",21,null],[13,"ENETUNREACH","","",21,null],[13,"ENETRESET","","",21,null],[13,"ECONNABORTED","","",21,null],[13,"ECONNRESET","","",21,null],[13,"ENOBUFS","","",21,null],[13,"EISCONN","","",21,null],[13,"ENOTCONN","","",21,null],[13,"ESHUTDOWN","","",21,null],[13,"ETOOMANYREFS","","",21,null],[13,"ETIMEDOUT","","",21,null],[13,"ECONNREFUSED","","",21,null],[13,"EHOSTDOWN","","",21,null],[13,"EHOSTUNREACH","","",21,null],[13,"EALREADY","","",21,null],[13,"EINPROGRESS","","",21,null],[13,"ESTALE","","",21,null],[13,"EUCLEAN","","",21,null],[13,"ENOTNAM","","",21,null],[13,"ENAVAIL","","",21,null],[13,"EISNAM","","",21,null],[13,"EREMOTEIO","","",21,null],[13,"EDQUOT","","",21,null],[13,"ENOMEDIUM","","",21,null],[13,"EMEDIUMTYPE","","",21,null],[13,"ECANCELED","","",21,null],[13,"ENOKEY","","",21,null],[13,"EKEYEXPIRED","","",21,null],[13,"EKEYREVOKED","","",21,null],[13,"EKEYREJECTED","","",21,null],[13,"EOWNERDEAD","","",21,null],[13,"ENOTRECOVERABLE","","",21,null],[13,"ERFKILL","","",21,null],[13,"EHWPOISON","","",21,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","","",21,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",21,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",21,{"inputs":[],"output":{"name":"errno"}}],[11,"desc","","",21,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"from_i32","","",21,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",21,null],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"OFlag","nix::fcntl","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",22,null],[12,"l_whence","","",22,null],[12,"l_start","","",22,null],[12,"l_len","","",22,null],[12,"l_pid","","",22,null],[12,"l_sysid","","",22,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",23,null],[13,"F_DUPFD_CLOEXEC","","",23,null],[13,"F_GETFD","","",23,null],[13,"F_SETFD","","",23,null],[13,"F_GETFL","","",23,null],[13,"F_SETFL","","",23,null],[13,"F_SETLK","","",23,null],[13,"F_SETLKW","","",23,null],[13,"F_GETLK","","",23,null],[13,"F_OFD_SETLK","","",23,null],[13,"F_OFD_SETLKW","","",23,null],[13,"F_OFD_GETLK","","",23,null],[13,"F_ADD_SEALS","","",23,null],[13,"F_GET_SEALS","","",23,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",24,null],[13,"LockExclusive","","",24,null],[13,"Unlock","","",24,null],[13,"LockSharedNonblock","","",24,null],[13,"LockExclusiveNonblock","","",24,null],[13,"UnlockNonblock","","",24,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"flock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"flock"}}],[11,"clone","","",22,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"hash","","",25,null],[11,"cmp","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",25,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",25,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",25,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",25,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"from_iter","","",25,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",26,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",27,null],[11,"cmp","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"eq","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"sealflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"from_iter","","",27,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETATCH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"hash","","",28,null],[11,"cmp","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"eq","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"msflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",28,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"from_iter","","",28,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",29,null],[11,"cmp","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"eq","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"mntflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"from_iter","","",29,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",30,null],[12,"mq_maxmsg","","",30,null],[12,"mq_msgsize","","",30,null],[12,"mq_curmsgs","","",30,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,{"inputs":[{"name":"mqd"},{"name":"cstring"},{"name":"u32"}],"output":{"name":"result"}}],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only O_NONBLOCK can be set, everything else will be ignored\nReturns the old attributes\nIt is recommend to use the mq_set_nonblock() and mq_remove_nonblock() convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_set_nonblock","","Convenience function.\nSets the O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function.\nRemoves O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"cmp","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"eq","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"not","","Returns the complement of this set of flags.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"from_iter","","",31,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",32,null],[11,"cmp","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",32,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"eq","","",30,{"inputs":[{"name":"mqattr"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"mqattr"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"mqattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"mqattr"}],"output":{"name":"mqattr"}}],[11,"new","","",30,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[0,"sched","nix","",null,null],[3,"CpuSet","nix::sched","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneFlags","","",null,null],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[7,"CLONE_VM","","",null,null],[7,"CLONE_FS","","",null,null],[7,"CLONE_FILES","","",null,null],[7,"CLONE_SIGHAND","","",null,null],[7,"CLONE_PTRACE","","",null,null],[7,"CLONE_VFORK","","",null,null],[7,"CLONE_PARENT","","",null,null],[7,"CLONE_THREAD","","",null,null],[7,"CLONE_NEWNS","","",null,null],[7,"CLONE_SYSVSEM","","",null,null],[7,"CLONE_SETTLS","","",null,null],[7,"CLONE_PARENT_SETTID","","",null,null],[7,"CLONE_CHILD_CLEARTID","","",null,null],[7,"CLONE_DETACHED","","",null,null],[7,"CLONE_UNTRACED","","",null,null],[7,"CLONE_CHILD_SETTID","","",null,null],[7,"CLONE_NEWUTS","","",null,null],[7,"CLONE_NEWIPC","","",null,null],[7,"CLONE_NEWUSER","","",null,null],[7,"CLONE_NEWPID","","",null,null],[7,"CLONE_NEWNET","","",null,null],[7,"CLONE_IO","","",null,null],[11,"clone","","",33,{"inputs":[{"name":"cpuset"}],"output":{"name":"cpuset"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"cpuset"}}],[11,"set","","",33,{"inputs":[{"name":"cpuset"},{"name":"usize"}],"output":null}],[11,"unset","","",33,{"inputs":[{"name":"cpuset"},{"name":"usize"}],"output":null}],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",34,null],[12,"data","","",34,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",35,null],[13,"EpollCtlDel","","",35,null],[13,"EpollCtlMod","","",35,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"hash","","",36,null],[11,"cmp","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"eq","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",36,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",36,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",36,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",36,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"from_iter","","",36,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",35,{"inputs":[{"name":"epollop"}],"output":{"name":"epollop"}}],[11,"clone","","",34,{"inputs":[{"name":"epollevent"}],"output":{"name":"epollevent"}}],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"hash","","",37,null],[11,"cmp","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"eq","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",37,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",37,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",37,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",37,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"not","","Returns the complement of this set of flags.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[0,"types","nix::sys::ioctl::libc","",null,null],[0,"common","nix::sys::ioctl::libc::types","",null,null],[0,"c95","nix::sys::ioctl::libc::types::common","",null,null],[4,"c_void","nix::sys::ioctl::libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","nix::sys::ioctl::libc::types::common","",null,null],[6,"int8_t","nix::sys::ioctl::libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","nix::sys::ioctl::libc::types::common","",null,null],[4,"DIR","nix::sys::ioctl::libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","nix::sys::ioctl::libc::types","",null,null],[0,"common","nix::sys::ioctl::libc::types::os","",null,null],[0,"posix01","nix::sys::ioctl::libc::types::os::common","",null,null],[6,"pthread_t","nix::sys::ioctl::libc::types::os::common::posix01","",null,null],[6,"rlim_t","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",0,null],[12,"gl_pathv","","",0,null],[12,"gl_offs","","",0,null],[12,"__unused1","","",0,null],[12,"__unused2","","",0,null],[12,"__unused3","","",0,null],[12,"__unused4","","",0,null],[12,"__unused5","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[4,"timezone","","",null,null],[6,"sighandler_t","","",null,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[0,"bsd43","nix::sys::ioctl::libc::types::os::common","",null,null],[3,"rusage","nix::sys::ioctl::libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[0,"bsd44","nix::sys::ioctl::libc::types::os::common","",null,null],[6,"socklen_t","nix::sys::ioctl::libc::types::os::common::bsd44","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"in_addr","","",null,null],[12,"s_addr","","",8,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",11,null],[12,"imr_interface","","",11,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",12,null],[12,"ipv6mr_interface","","",12,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_addr","","",13,null],[12,"ai_canonname","","",13,null],[12,"ai_next","","",13,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",15,null],[12,"ifa_name","","",15,null],[12,"ifa_flags","","",15,null],[12,"ifa_addr","","",15,null],[12,"ifa_netmask","","",15,null],[12,"ifa_ifu","","",15,null],[12,"ifa_data","","",15,null],[0,"arch","nix::sys::ioctl::libc::types::os","",null,null],[0,"c95","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"c_char","nix::sys::ioctl::libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"c_longlong","nix::sys::ioctl::libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"off_t","nix::sys::ioctl::libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"nlink_t","nix::sys::ioctl::libc::types::os::arch::posix01","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",16,null],[12,"st_ino","","",16,null],[12,"st_nlink","","",16,null],[12,"st_mode","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"__pad0","","",16,null],[12,"st_rdev","","",16,null],[12,"st_size","","",16,null],[12,"st_blksize","","",16,null],[12,"st_blocks","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"__unused","","",16,null],[3,"utimbuf","","",null,null],[12,"actime","","",17,null],[12,"modtime","","",17,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",18,null],[0,"extra","nix::sys::ioctl::libc::types::os::arch","",null,null],[3,"sockaddr_ll","nix::sys::ioctl::libc::types::os::arch::extra","",null,null],[12,"sll_family","","",19,null],[12,"sll_protocol","","",19,null],[12,"sll_ifindex","","",19,null],[12,"sll_hatype","","",19,null],[12,"sll_pkttype","","",19,null],[12,"sll_halen","","",19,null],[12,"sll_addr","","",19,null],[0,"consts","nix::sys::ioctl::libc","",null,null],[0,"os","nix::sys::ioctl::libc::consts","",null,null],[0,"c95","nix::sys::ioctl::libc::consts::os","",null,null],[17,"EXIT_FAILURE","nix::sys::ioctl::libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","nix::sys::ioctl::libc::consts::os","",null,null],[17,"O_RDONLY","nix::sys::ioctl::libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","nix::sys::ioctl::libc::consts::os","",null,null],[17,"F_DUPFD","nix::sys::ioctl::libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"posix08","nix::sys::ioctl::libc::consts::os","",null,null],[17,"O_CLOEXEC","nix::sys::ioctl::libc::consts::os::posix08","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[0,"bsd44","nix::sys::ioctl::libc::consts::os","",null,null],[17,"MADV_NORMAL","nix::sys::ioctl::libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[0,"extra","nix::sys::ioctl::libc::consts::os","",null,null],[17,"AF_PACKET","nix::sys::ioctl::libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"PATH_MAX","","",null,null],[0,"sysconf","nix::sys::ioctl::libc::consts::os","",null,null],[17,"_SC_ARG_MAX","nix::sys::ioctl::libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[0,"funcs","nix::sys::ioctl::libc","",null,null],[0,"c95","nix::sys::ioctl::libc::funcs","",null,null],[0,"ctype","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"isalnum","nix::sys::ioctl::libc::funcs::c95::ctype","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isalpha","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"iscntrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isgraph","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"islower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isprint","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ispunct","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isspace","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isxdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"tolower","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[5,"toupper","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[0,"stdio","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"fopen","nix::sys::ioctl::libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"abs","nix::sys::ioctl::libc::funcs::c95::stdlib","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"labs","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"srand","","",null,null],[0,"string","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"strcpy","nix::sys::ioctl::libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","nix::sys::ioctl::libc::funcs","",null,null],[0,"stat_","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"chmod","nix::sys::ioctl::libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"i32"}}],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"popen","nix::sys::ioctl::libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"open","nix::sys::ioctl::libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"dirent","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"opendir","nix::sys::ioctl::libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"access","nix::sys::ioctl::libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"dup","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"dup2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"fpathconf","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"getcwd","","",null,null],[5,"getegid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getsid","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isatty","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"link","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"pathconf","","",null,null],[5,"pause","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"setpgid","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"setsid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"setuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"sleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"usleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[5,"tcgetpgrp","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[0,"signal","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"kill","nix::sys::ioctl::libc::funcs::posix88::signal","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"mman","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"mlock","nix::sys::ioctl::libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"munlockall","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"if_nametoindex","nix::sys::ioctl::libc::funcs::posix88::net","",null,null],[0,"posix01","nix::sys::ioctl::libc::funcs","",null,null],[0,"stat_","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"lstat","nix::sys::ioctl::libc::funcs::posix01::stat_","",null,null],[0,"unistd","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"readlink","nix::sys::ioctl::libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[0,"signal","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"signal","nix::sys::ioctl::libc::funcs::posix01::signal","",null,{"inputs":[{"name":"i32"},{"name":"u64"}],"output":{"name":"u64"}}],[0,"glob","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"glob","nix::sys::ioctl::libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"posix_madvise","nix::sys::ioctl::libc::funcs::posix01::mman","",null,null],[0,"resource","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"getrlimit","nix::sys::ioctl::libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","nix::sys::ioctl::libc::funcs","",null,null],[5,"socket","nix::sys::ioctl::libc::funcs::bsd43","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"bsd44","nix::sys::ioctl::libc::funcs","",null,null],[5,"getdtablesize","nix::sys::ioctl::libc::funcs::bsd44","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"ioctl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"madvise","","",null,null],[5,"mincore","","",null,null],[5,"flock","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[4,"fpos_t","nix::sys::ioctl::libc","",null,null],[4,"FILE","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[6,"uint8_t","","",null,null],[6,"int32_t","","",null,null],[6,"uint32_t","","",null,null],[6,"int16_t","","",null,null],[6,"uint64_t","","",null,null],[6,"uint16_t","","",null,null],[6,"int8_t","","",null,null],[6,"int64_t","","",null,null],[4,"dirent_t","","",null,null],[4,"DIR","","",null,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[6,"pthread_t","","",null,null],[6,"sighandler_t","","",null,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[6,"rlim_t","","",null,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",0,null],[12,"gl_pathv","","",0,null],[12,"gl_offs","","",0,null],[12,"__unused1","","",0,null],[12,"__unused2","","",0,null],[12,"__unused3","","",0,null],[12,"__unused4","","",0,null],[12,"__unused5","","",0,null],[4,"timezone","","",null,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",11,null],[12,"imr_interface","","",11,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_addr","","",13,null],[12,"ai_canonname","","",13,null],[12,"ai_next","","",13,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",12,null],[12,"ipv6mr_interface","","",12,null],[6,"in_port_t","","",null,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[6,"in_addr_t","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[6,"socklen_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"in_addr","","",null,null],[12,"s_addr","","",8,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",15,null],[12,"ifa_name","","",15,null],[12,"ifa_flags","","",15,null],[12,"ifa_addr","","",15,null],[12,"ifa_netmask","","",15,null],[12,"ifa_ifu","","",15,null],[12,"ifa_data","","",15,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[6,"c_char","","",null,null],[6,"c_ushort","","",null,null],[6,"c_ulong","","",null,null],[6,"c_double","","",null,null],[6,"clock_t","","",null,null],[6,"c_short","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"c_long","","",null,null],[6,"size_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_int","","",null,null],[6,"wchar_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"time_t","","",null,null],[6,"c_uchar","","",null,null],[6,"uintptr_t","","",null,null],[6,"intptr_t","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"c_longlong","","",null,null],[6,"ssize_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"mode_t","","",null,null],[6,"off_t","","",null,null],[6,"gid_t","","",null,null],[6,"uid_t","","",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",17,null],[12,"modtime","","",17,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",18,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"nlink_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",16,null],[12,"st_ino","","",16,null],[12,"st_nlink","","",16,null],[12,"st_mode","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"__pad0","","",16,null],[12,"st_rdev","","",16,null],[12,"st_size","","",16,null],[12,"st_blksize","","",16,null],[12,"st_blocks","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"__unused","","",16,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",19,null],[12,"sll_protocol","","",19,null],[12,"sll_ifindex","","",19,null],[12,"sll_hatype","","",19,null],[12,"sll_pkttype","","",19,null],[12,"sll_halen","","",19,null],[12,"sll_addr","","",19,null],[17,"BUFSIZ","","",null,null],[17,"SEEK_END","","",null,null],[17,"EOF","","",null,null],[17,"_IOLBF","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"L_tmpnam","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOFBF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"TMP_MAX","","",null,null],[17,"RAND_MAX","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EL2HLT","","",null,null],[17,"ENOENT","","",null,null],[17,"EISDIR","","",null,null],[17,"SIGKILL","","",null,null],[17,"S_IFIFO","","",null,null],[17,"EREMOTE","","",null,null],[17,"SIGABRT","","",null,null],[17,"ENOSR","","",null,null],[17,"ELIBMAX","","",null,null],[17,"S_IWUSR","","",null,null],[17,"ENXIO","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EIDRM","","",null,null],[17,"PROT_READ","","",null,null],[17,"ENOLINK","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EBADFD","","",null,null],[17,"SIGQUIT","","",null,null],[17,"EIO","","",null,null],[17,"ENOSPC","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ELNRNG","","",null,null],[17,"O_WRONLY","","",null,null],[17,"ESRMNT","","",null,null],[17,"ENOTTY","","",null,null],[17,"F_TEST","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IRUSR","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"EBADRQC","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"S_IFLNK","","",null,null],[17,"ELOOP","","",null,null],[17,"SIGALRM","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"EACCES","","",null,null],[17,"EBADR","","",null,null],[17,"ENOMEM","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EILSEQ","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"ENODATA","","",null,null],[17,"EREMCHG","","",null,null],[17,"S_IROTH","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPIPE","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ECANCELED","","",null,null],[17,"W_OK","","",null,null],[17,"SIGILL","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EDOM","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EALREADY","","",null,null],[17,"F_OK","","",null,null],[17,"EBADE","","",null,null],[17,"ENOSTR","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"S_IXGRP","","",null,null],[17,"EBUSY","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"EMLINK","","",null,null],[17,"S_IXUSR","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EROFS","","",null,null],[17,"S_IRWXO","","",null,null],[17,"SIGHUP","","",null,null],[17,"ECHRNG","","",null,null],[17,"EHWPOISON","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ENETRESET","","",null,null],[17,"O_CREAT","","",null,null],[17,"S_IXOTH","","",null,null],[17,"EBADMSG","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"ENODEV","","",null,null],[17,"EUNATCH","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESRCH","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"EBADSLT","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EL3HLT","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENAVAIL","","",null,null],[17,"ECHILD","","",null,null],[17,"ETXTBSY","","",null,null],[17,"S_IWOTH","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENONET","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"ENOEXEC","","",null,null],[17,"ENOPKG","","",null,null],[17,"ERANGE","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EFAULT","","",null,null],[17,"EEXIST","","",null,null],[17,"EFBIG","","",null,null],[17,"S_IFMT","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"O_APPEND","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGFPE","","",null,null],[17,"F_TLOCK","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"O_RDWR","","",null,null],[17,"MAP_FILE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ERESTART","","",null,null],[17,"SIGINT","","",null,null],[17,"EDEADLK","","",null,null],[17,"ELIBACC","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"EXDEV","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"ENOKEY","","",null,null],[17,"ESPIPE","","",null,null],[17,"ENOTDIR","","",null,null],[17,"S_IRGRP","","",null,null],[17,"EL3RST","","",null,null],[17,"S_IWRITE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"ENOCSI","","",null,null],[17,"EISNAM","","",null,null],[17,"ENOTNAM","","",null,null],[17,"SIGPIPE","","",null,null],[17,"X_OK","","",null,null],[17,"S_IREAD","","",null,null],[17,"EINTR","","",null,null],[17,"E2BIG","","",null,null],[17,"ETIME","","",null,null],[17,"EAGAIN","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IFREG","","",null,null],[17,"ENOMSG","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"PROT_NONE","","",null,null],[17,"ENOBUFS","","",null,null],[17,"R_OK","","",null,null],[17,"EISCONN","","",null,null],[17,"F_LOCK","","",null,null],[17,"ENOANO","","",null,null],[17,"ENOLCK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EUSERS","","",null,null],[17,"ERFKILL","","",null,null],[17,"ESTALE","","",null,null],[17,"EPROTO","","",null,null],[17,"EPERM","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"SIGTERM","","",null,null],[17,"ELIBSCN","","",null,null],[17,"EINVAL","","",null,null],[17,"EADV","","",null,null],[17,"EDQUOT","","",null,null],[17,"EDOTDOT","","",null,null],[17,"S_IFDIR","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"EBADF","","",null,null],[17,"ECOMM","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"SIGTRAP","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"F_GETFL","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"F_SETFD","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFL","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"F_DUPFD","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"LOCK_SH","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"LOCK_UN","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_INFO","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"AF_UNIX","","",null,null],[17,"IP_TTL","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"TCP_CORK","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"LOCK_NB","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"AF_INET","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"AF_INET6","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"LOCK_EX","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"O_DSYNC","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_STACK","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"AF_PACKET","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_TYPE","","",null,null],[5,"islower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isprint","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isalnum","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isalpha","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isgraph","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"iscntrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"tolower","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[5,"isxdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"toupper","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[5,"ispunct","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isspace","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"rewind","","",null,null],[5,"fputs","","",null,null],[5,"remove","","",null,null],[5,"fputc","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"setbuf","","",null,null],[5,"ungetc","","",null,null],[5,"fgetc","","",null,null],[5,"fsetpos","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"fgetpos","","",null,null],[5,"puts","","",null,null],[5,"rename","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fclose","","",null,null],[5,"fopen","","",null,null],[5,"feof","","",null,null],[5,"fseek","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"ftell","","",null,null],[5,"fgets","","",null,null],[5,"_exit","","",null,null],[5,"srand","","",null,null],[5,"atoi","","",null,null],[5,"strtol","","",null,null],[5,"rand","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"atexit","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"labs","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"system","","",null,null],[5,"free","","",null,null],[5,"getenv","","",null,null],[5,"atof","","",null,null],[5,"strtod","","",null,null],[5,"strtoul","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"abs","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"calloc","","",null,null],[5,"strcoll","","",null,null],[5,"strncmp","","",null,null],[5,"memcmp","","",null,null],[5,"strspn","","",null,null],[5,"memchr","","",null,null],[5,"strpbrk","","",null,null],[5,"strcmp","","",null,null],[5,"strchr","","",null,null],[5,"wcslen","","",null,null],[5,"strrchr","","",null,null],[5,"strcat","","",null,null],[5,"strerror","","",null,null],[5,"strcspn","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"strcpy","","",null,null],[5,"strlen","","",null,null],[5,"strstr","","",null,null],[5,"strncat","","",null,null],[5,"strncpy","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fchmod","","",null,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"i32"}}],[5,"stat","","",null,null],[5,"mkdir","","",null,null],[5,"chmod","","",null,null],[5,"fstat","","",null,null],[5,"mkfifo","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"popen","","",null,null],[5,"setsid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getpgrp","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getsid","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"getcwd","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"nanosleep","","",null,null],[5,"utime","","",null,null],[5,"pwrite","","",null,null],[5,"alarm","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"usleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"chdir","","",null,null],[5,"read","","",null,null],[5,"chown","","",null,null],[5,"pread","","",null,null],[5,"getlogin","","",null,null],[5,"getppid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"ttyname","","",null,null],[5,"pipe","","",null,null],[5,"execv","","",null,null],[5,"setpgid","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"write","","",null,null],[5,"execve","","",null,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"dup2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"isatty","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"unlink","","",null,null],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"execvp","","",null,null],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"pause","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"setuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"wait","","",null,null],[5,"getgid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"link","","",null,null],[5,"tcgetpgrp","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"rmdir","","",null,null],[5,"waitpid","","",null,null],[5,"getopt","","",null,null],[5,"dup","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"fpathconf","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"setgid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"getgroups","","",null,null],[5,"access","","",null,null],[5,"sleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"pathconf","","",null,null],[5,"sysconf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[5,"socket","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"recvfrom","","",null,null],[5,"getsockname","","",null,null],[5,"getifaddrs","","",null,null],[5,"getpeername","","",null,null],[5,"shutdown","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"send","","",null,null],[5,"bind","","",null,null],[5,"setsockopt","","",null,null],[5,"freeifaddrs","","",null,null],[5,"recv","","",null,null],[5,"sendto","","",null,null],[5,"listen","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"accept","","",null,null],[5,"connect","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[5,"msync","","",null,null],[5,"munlock","","",null,null],[5,"mlock","","",null,null],[5,"munmap","","",null,null],[5,"mmap","","",null,null],[5,"munlockall","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"shm_unlink","","",null,null],[5,"mlockall","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"rewinddir","","",null,null],[5,"closedir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"if_nametoindex","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"setenv","","",null,null],[5,"fdatasync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[5,"readlink","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"unsetenv","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the &quot;direction&quot; (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"howflag"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[0,"signal","","",null,null],[3,"SockFlag","nix::sys::signal::signal","",null,null],[3,"HowFlag","","",null,null],[3,"siginfo","","",null,null],[12,"si_signo","","",38,null],[12,"si_errno","","",38,null],[12,"si_code","","",38,null],[12,"pid","","",38,null],[12,"uid","","",38,null],[12,"status","","",38,null],[3,"sigaction","","",null,null],[12,"sa_handler","","",39,null],[12,"sa_mask","","",39,null],[12,"sa_flags","","",39,null],[3,"sigset_t","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGUNUSED","","",null,null],[11,"hash","","",40,null],[11,"cmp","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",40,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",40,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",40,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",40,{"inputs":[{"name":"c_ulong"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",40,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"hash","","",41,null],[11,"cmp","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"eq","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"howflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[],"output":{"name":"howflag"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[],"output":{"name":"howflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",41,{"inputs":[{"name":"c_int"}],"output":{"name":"howflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"not","","Returns the complement of this set of flags.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"howflag"}}],[11,"clone","","",38,{"inputs":[{"name":"siginfo"}],"output":{"name":"siginfo"}}],[11,"clone","","",42,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[6,"SigNum","nix::sys::signal","",null,null],[17,"SIGEMT","","",null,null],[11,"clone","","",43,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"all","","",43,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",43,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",43,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"remove","","",43,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"contains","","",43,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",43,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",43,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",43,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",43,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",43,{"inputs":[{"name":"sigset"},{"name":"howflag"}],"output":{"name":"result"}}],[11,"as_ref","","",43,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset_t"}}],[11,"new","","",44,null],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",8,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\nsize_of::&lt;sa_family_t&gt;().",null,null],[3,"Ipv4Addr","","",null,null],[3,"Ipv6Addr","","",null,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",45,null],[12,"imr_interface","","",45,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",46,null],[12,"ipv6mr_interface","","",46,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",47,null],[12,"address","","",47,null],[12,"flags","","",47,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",48,null],[12,"l_linger","","",48,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",49,null],[13,"Inet","","",49,null],[13,"Inet6","","",49,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",50,null],[13,"Unix","","",50,null],[4,"InetAddr","","",null,null],[13,"V4","","",51,null],[13,"V6","","",51,null],[4,"IpAddr","","",null,null],[13,"V4","","",52,null],[13,"V6","","",52,null],[4,"SockType","","",null,null],[13,"Stream","","",53,null],[13,"Datagram","","",53,null],[13,"SeqPacket","","",53,null],[13,"Raw","","",53,null],[13,"Rdm","","",53,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n&quot;Ancillary messages&quot; section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",54,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",55,null],[13,"Tcp","","",55,null],[13,"Ip","","",55,null],[13,"Ipv6","","",55,null],[13,"Udp","","",55,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",56,null],[13,"Write","","Further  transmissions will be disallowed.",56,null],[13,"Both","","Further receptions and transmissions will be disallowed.",56,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",51,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",51,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",51,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",51,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",51,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",51,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",51,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",51,{"inputs":[{"name":"inetaddr"},{"name":"h"}],"output":null}],[11,"clone","","",51,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",51,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",52,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",52,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",52,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",57,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",57,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",57,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",57,null],[11,"to_std","","",57,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",57,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",57,{"inputs":[{"name":"ipv4addr"},{"name":"h"}],"output":null}],[11,"clone","","",57,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",57,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"new","","",58,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",58,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",58,null],[11,"to_std","","",58,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",58,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",59,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",59,null],[11,"path","","If this address represents a filesystem path, return that path.",59,{"inputs":[{"name":"unixaddr"}],"output":{"name":"option"}}],[11,"eq","","",59,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",59,{"inputs":[{"name":"unixaddr"},{"name":"h"}],"output":null}],[11,"clone","","",59,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",59,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",50,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",50,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",50,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",50,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",50,{"inputs":[{"name":"sockaddr"},{"name":"h"}],"output":null}],[11,"clone","","",50,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",50,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",45,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",45,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",46,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"TcpKeepIdle","","",null,null],[11,"fmt","","",60,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"reuseaddr"}],"output":{"name":"reuseaddr"}}],[11,"set","","",60,{"inputs":[{"name":"reuseaddr"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",60,{"inputs":[{"name":"reuseaddr"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"reuseport"}],"output":{"name":"reuseport"}}],[11,"set","","",61,{"inputs":[{"name":"reuseport"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",61,{"inputs":[{"name":"reuseport"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"tcpnodelay"}],"output":{"name":"tcpnodelay"}}],[11,"set","","",62,{"inputs":[{"name":"tcpnodelay"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",62,{"inputs":[{"name":"tcpnodelay"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"set","","",63,{"inputs":[{"name":"linger"},{"name":"rawfd"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",63,{"inputs":[{"name":"linger"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"ipaddmembership"}],"output":{"name":"ipaddmembership"}}],[11,"set","","",64,{"inputs":[{"name":"ipaddmembership"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"ipdropmembership"}],"output":{"name":"ipdropmembership"}}],[11,"set","","",65,{"inputs":[{"name":"ipdropmembership"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"ipv6addmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"ipv6addmembership"}],"output":{"name":"ipv6addmembership"}}],[11,"set","","",66,{"inputs":[{"name":"ipv6addmembership"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"ipv6dropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"ipv6dropmembership"}],"output":{"name":"ipv6dropmembership"}}],[11,"set","","",67,{"inputs":[{"name":"ipv6dropmembership"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"ipmulticastttl"}],"output":{"name":"ipmulticastttl"}}],[11,"set","","",68,{"inputs":[{"name":"ipmulticastttl"},{"name":"rawfd"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",68,{"inputs":[{"name":"ipmulticastttl"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"ipmulticastloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"ipmulticastloop"}],"output":{"name":"ipmulticastloop"}}],[11,"set","","",69,{"inputs":[{"name":"ipmulticastloop"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",69,{"inputs":[{"name":"ipmulticastloop"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"receivetimeout"}],"output":{"name":"receivetimeout"}}],[11,"set","","",70,{"inputs":[{"name":"receivetimeout"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",70,{"inputs":[{"name":"receivetimeout"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"sendtimeout"}],"output":{"name":"sendtimeout"}}],[11,"set","","",71,{"inputs":[{"name":"sendtimeout"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",71,{"inputs":[{"name":"sendtimeout"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"broadcast"}],"output":{"name":"broadcast"}}],[11,"set","","",72,{"inputs":[{"name":"broadcast"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",72,{"inputs":[{"name":"broadcast"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"oobinline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"oobinline"}],"output":{"name":"oobinline"}}],[11,"set","","",73,{"inputs":[{"name":"oobinline"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",73,{"inputs":[{"name":"oobinline"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"socketerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"socketerror"}],"output":{"name":"socketerror"}}],[11,"get","","",74,{"inputs":[{"name":"socketerror"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"keepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"keepalive"}],"output":{"name":"keepalive"}}],[11,"set","","",75,{"inputs":[{"name":"keepalive"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",75,{"inputs":[{"name":"keepalive"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"tcpkeepidle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"tcpkeepidle"}],"output":{"name":"tcpkeepidle"}}],[11,"set","","",76,{"inputs":[{"name":"tcpkeepidle"},{"name":"rawfd"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",76,{"inputs":[{"name":"tcpkeepidle"},{"name":"rawfd"}],"output":{"name":"result"}}],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[6,"SockMessageFlags","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",77,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",78,null],[11,"fmt","","",53,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"hash","","",79,null],[11,"cmp","","",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",79,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",79,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",79,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",80,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",47,{"inputs":[{"name":"recvmsg"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",81,{"inputs":[{"name":"cmsgiterator"}],"output":{"name":"option"}}],[11,"fmt","","",48,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",56,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",16,null],[12,"st_ino","","",16,null],[12,"st_nlink","","",16,null],[12,"st_mode","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"__pad0","","",16,null],[12,"st_rdev","","",16,null],[12,"st_size","","",16,null],[12,"st_blksize","","",16,null],[12,"st_blocks","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"__unused","","",16,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",82,null],[11,"cmp","","",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,{"inputs":[{"name":"sflag"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",82,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",82,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",82,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",83,null],[11,"cmp","","",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"mode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,{"inputs":[{"name":"mode"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",83,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",83,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",83,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",84,null],[12,"c_oflag","","",84,null],[12,"c_cflag","","",84,null],[12,"c_lflag","","",84,null],[12,"c_line","","",84,null],[12,"c_cc","","",84,null],[12,"c_ispeed","","",84,null],[12,"c_ospeed","","",84,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",85,null],[13,"TCSADRAIN","","",85,null],[13,"TCSAFLUSH","","",85,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",86,null],[13,"TCOFLUSH","","",86,null],[13,"TCIOFLUSH","","",86,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",87,null],[13,"TCOON","","",87,null],[13,"TCIOFF","","",87,null],[13,"TCION","","",87,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"hash","","",88,null],[11,"cmp","","",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"inputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,{"inputs":[{"name":"inputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",88,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",88,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",88,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",88,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"from_iter","","",88,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",89,null],[11,"cmp","","",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"outputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,{"inputs":[{"name":"outputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",89,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",89,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",89,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",89,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",90,null],[11,"cmp","","",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"controlflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"inputs":[{"name":"controlflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",90,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",90,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",91,null],[11,"cmp","","",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"localflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",91,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",91,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,{"inputs":[{"name":"localflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",91,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",91,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",91,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",91,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",91,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"from_iter","","",91,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",85,{"inputs":[{"name":"setarg"}],"output":{"name":"setarg"}}],[11,"clone","","",86,{"inputs":[{"name":"flusharg"}],"output":{"name":"flusharg"}}],[11,"clone","","",87,{"inputs":[{"name":"flowarg"}],"output":{"name":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",92,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"sysname","","",92,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"nodename","","",92,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"release","","",92,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"version","","",92,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"machine","","",92,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",93,null],[13,"Signaled","","",93,null],[13,"Stopped","","",93,null],[13,"Continued","","",93,null],[13,"StillAlive","","",93,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[11,"hash","","",94,null],[11,"cmp","","",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"waitpidflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",94,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",94,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",94,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",94,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",94,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",94,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",94,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",94,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",94,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"from_iter","","",94,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",93,{"inputs":[{"name":"waitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"waitstatus"}],"output":{"name":"waitstatus"}}],[11,"eq","","",93,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[0,"mman","nix::sys","",null,null],[5,"mlock","nix::sys::mman","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap&#39;d region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[6,"MmapFlag","","",null,null],[6,"MmapProt","","",null,null],[6,"MmapAdvise","","",null,null],[6,"MmapSync","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MAP_FAILED","","",null,null],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",95,null],[11,"from_slice","","",95,null],[11,"from_mut_slice","","",95,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",96,null],[12,"tv_usec","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",96,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",96,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",96,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",96,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",96,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",96,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",96,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",96,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",96,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",96,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",96,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"neg","","",96,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"add","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",96,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",96,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",96,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",96,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with ptrace(PTRACE_SETOPTIONS,...).",null,{"inputs":[{"name":"pid_t"},{"name":"ptraceoptions"}],"output":{"name":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"timeval"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"new","","",97,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",97,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":null}],[11,"remove","","",97,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":null}],[11,"contains","","",97,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":{"name":"bool"}}],[11,"clear","","",97,{"inputs":[{"name":"fdset"}],"output":null}],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",98,null],[12,"bsoftlimit","","",98,null],[12,"curspace","","",98,null],[12,"ihardlimit","","",98,null],[12,"isoftlimit","","",98,null],[12,"curinodes","","",98,null],[12,"btime","","",98,null],[12,"itime","","",98,null],[12,"valid","","",98,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",99,{"inputs":[{"name":"quotacmd"}],"output":{"name":"c_int"}}],[11,"hash","","",100,null],[11,"cmp","","",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"option"}}],[11,"lt","","",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"le","","",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"gt","","",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ge","","",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"eq","","",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",100,{"inputs":[{"name":"quotavalidflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",100,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",100,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",100,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",100,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",100,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",100,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",100,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",100,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"not","","Returns the complement of this set of flags.",100,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"from_iter","","",100,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",98,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"fmt","","",98,{"inputs":[{"name":"dqblk"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",101,null],[12,"f_bsize","","",101,null],[12,"f_blocks","","",101,null],[12,"f_bfree","","",101,null],[12,"f_bavail","","",101,null],[12,"f_files","","",101,null],[12,"f_ffree","","",101,null],[12,"f_fsid","","",101,null],[12,"f_namelen","","",101,null],[12,"f_frsize","","",101,null],[12,"f_spare","","",101,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"clone","","",101,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"fmt","","",101,{"inputs":[{"name":"statfs"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",102,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",102,null],[12,"f_blocks","","Total number of blocks on the filesystem",102,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",102,null],[12,"f_bavail","","Number of blocks available to non-root users",102,null],[12,"f_files","","Total number of inodes available on the filesystem",102,null],[12,"f_ffree","","Number of inodes available on the filesystem",102,null],[12,"f_favail","","Number of inodes available to non-root users",102,null],[12,"f_fsid","","File System ID",102,null],[12,"f_flag","","Mount Flags",102,null],[12,"f_namemax","","Maximum filename length",102,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"hash","","",103,null],[11,"cmp","","",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"eq","","",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",103,{"inputs":[{"name":"fsflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",103,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",103,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",103,{"inputs":[{"name":"fsflags"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",103,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",103,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",103,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",103,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",103,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",103,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"from_iter","","",103,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",102,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"fmt","","",102,{"inputs":[{"name":"statvfs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",102,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",102,{"inputs":[{"name":"statvfs"},{"name":"p"}],"output":{"name":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",102,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",102,{"inputs":[{"name":"statvfs"},{"name":"t"}],"output":{"name":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",102,{"inputs":[],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",104,null],[13,"Child","","",104,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"fork"}],"output":{"name":"fork"}}],[11,"is_child","","",104,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",104,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",105,{"inputs":[{"name":"nixpath"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",105,{"inputs":[{"name":"nixpath"},{"name":"f"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_errno","","",20,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",20,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",20,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",20,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"from","","",20,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",20,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",106,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"len","std::path","",107,{"inputs":[{"name":"path"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",107,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",108,{"inputs":[{"name":"pathbuf"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",108,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}],[14,"ioc!","nix","Encode an ioctl command.",null,null],[14,"io!","","Encode an ioctl command that has no associated data.",null,null],[14,"ior!","","Encode an ioctl command that reads.",null,null],[14,"iow!","","Encode an ioctl command that writes.",null,null],[14,"iorw!","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res!","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl!","","Declare a wrapper function around an ioctl.",null,null]],"paths":[[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"FileStat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"],[4,"Error"],[4,"Errno"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[3,"siginfo"],[3,"sigaction"],[3,"SockFlag"],[3,"HowFlag"],[3,"sigset_t"],[3,"SigSet"],[3,"SigAction"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepIdle"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"Dqblk"],[3,"QuotaCmd"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"],[3,"Error"],[3,"Path"],[3,"PathBuf"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["miow"] = {"doc":"","items":[],"paths":[]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An &quot;in progress&quot; TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An &quot;in progress&quot; UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using\naccept()",0,{"inputs":[{"name":"tcpbuilder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"tcpbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"udpbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"udpbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_nodelay","std::net::tcp","",2,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_keepalive","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_write_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_ttl","","",2,{"inputs":[{"name":"tcpstream"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_only_v6","","",2,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"connect","","",2,{"inputs":[{"name":"tcpstream"},{"name":"t"}],"output":{"name":"result"}}],[11,"take_error","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_nonblocking","","",2,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_broadcast","std::net::udp","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_ttl","","",3,{"inputs":[{"name":"udpsocket"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_only_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_read_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_write_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"take_error","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"connect","","",3,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"send","","",3,null],[11,"recv","","",3,null],[11,"set_nonblocking","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_ttl","std::net::tcp","",4,{"inputs":[{"name":"tcplistener"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","",4,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"set_only_v6","","",4,{"inputs":[{"name":"tcplistener"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",4,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_error","","",4,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"set_nonblocking","","",4,{"inputs":[{"name":"tcplistener"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","net2","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"udpbuilder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"udpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"udpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"udpbuilder"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"udpbuilder"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",5,{"inputs":[{"name":"unixtcpbuilderext"},{"name":"bool"}],"output":{"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",6,{"inputs":[{"name":"unixudpbuilderext"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"tcpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"udpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so\nthe amount of milliseconds between them.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so\nthe duration of time between them.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection\nto the host specified by `addr`.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"bool"}],"output":{"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,{"inputs":[{"name":"tcplistenerext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,{"inputs":[{"name":"tcplistenerext"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,{"inputs":[{"name":"tcplistenerext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,{"inputs":[{"name":"tcplistenerext"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,{"inputs":[{"name":"tcplistenerext"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",8,{"inputs":[{"name":"tcplistenerext"},{"name":"bool"}],"output":{"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"udpsocketext"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"udpsocketext"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"udpsocketext"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"udpsocketext"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",9,{"inputs":[{"name":"udpsocketext"},{"name":"a"}],"output":{"name":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",9,null],[10,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",9,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[3,"TcpStream"],[3,"UdpSocket"],[3,"TcpListener"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"threadlocal"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"threadlocal"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,{"inputs":[{"name":"threadlocal"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,{"inputs":[{"name":"threadlocal"}],"output":{"name":"t"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",1,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",1,{"inputs":[{"name":"cachedthreadlocal"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",1,{"inputs":[{"name":"cachedthreadlocal"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",1,{"inputs":[{"name":"cachedthreadlocal"}],"output":{"name":"t"}}]],"paths":[[3,"ThreadLocal"],[3,"CachedThreadLocal"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition&#39;s characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition&#39;s characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",51,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",51,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",51,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",52,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",52,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"fmt","","",53,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",54,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",54,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",55,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",56,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",56,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",57,null],[11,"get","","Dereferences the content.",57,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",57,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",58,null],[11,"clone","","",58,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",59,null],[11,"eq","","",59,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",59,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",59,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",60,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",60,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",61,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",62,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",63,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",64,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",64,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",65,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",65,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",65,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",66,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",67,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",70,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",71,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",67,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",67,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",67,null],[11,"swap","","Stores a value into the bool, returning the old value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",67,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",68,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",68,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",68,null],[11,"swap","","Stores a value into the isize, returning the old value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",68,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",69,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",69,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",69,null],[11,"swap","","Stores a value into the usize, returning the old value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",69,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",70,null],[11,"load","","Loads a value from the pointer.",70,null],[11,"store","","Stores a value into the pointer.",70,null],[11,"swap","","Stores a value into the pointer, returning the old value.",70,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",70,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",70,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",70,null],[11,"fmt","","",69,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",72,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",72,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",72,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",72,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",72,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",72,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",74,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",74,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",74,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",74,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",76,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",76,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",76,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",76,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",77,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",77,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",78,null],[11,"deref","","",77,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",77,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",79,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",79,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",79,null],[11,"clone","core::char","",80,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",81,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",80,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"clone","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",83,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",84,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",84,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",85,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",86,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"clone","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",88,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",87,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",89,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",90,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",91,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",92,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",92,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"nth","","",93,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",94,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",94,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",94,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",95,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"clone","","",96,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",96,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",97,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"clone","","",98,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",98,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",98,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"clone","","",99,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",99,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"clone","","",100,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",100,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",101,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",102,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",62,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",61,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"clone","","",104,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",104,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","core::ops","",61,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",105,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",105,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",107,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",107,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",107,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",108,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",108,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",110,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",51,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",112,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",113,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",114,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",114,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",114,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",114,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",114,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",114,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",114,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",114,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",114,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",114,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",114,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",114,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",114,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",114,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",114,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",114,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",114,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",114,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",117,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",114,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",118,null],[11,"next","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"count","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",118,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",119,null],[11,"next","","",119,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"count","","",119,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",119,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",119,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",119,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",120,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",120,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",121,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",122,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next","","",123,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next","","",124,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next","","",125,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next","","",126,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"clone","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"count","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",127,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"count","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",128,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",129,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"count","","",129,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",129,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",129,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",129,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",130,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",131,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",132,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",131,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",131,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",131,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",136,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",137,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",138,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",139,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",140,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",140,null],[11,"matching","","",140,null],[11,"use_early_reject","","",141,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",141,null],[11,"matching","","",141,null],[11,"eq","core::str","",142,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",142,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",143,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",143,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",143,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",144,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"next_back","","",144,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",144,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",145,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",145,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"next_back","","",145,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",145,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"count","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",146,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",147,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",148,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",149,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",149,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",149,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",150,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",151,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",150,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",151,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",153,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",154,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",155,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",156,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",157,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",156,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",159,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",160,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",159,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",160,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",161,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",161,null],[11,"next_back","","",161,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",163,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",163,null],[11,"call_mut","","",163,null],[11,"call_once","","",163,null],[11,"next","","",162,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",162,null],[11,"next_back","","",162,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",165,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",165,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",165,null],[11,"finish","","",165,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",165,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",166,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",166,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",166,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",167,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",168,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",169,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",170,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",171,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",172,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",173,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",174,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",175,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",175,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",176,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",176,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",176,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",177,null],[11,"entry","","Adds a new entry to the set output.",178,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",178,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",178,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",179,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",179,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",179,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",180,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",180,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",180,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",181,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",182,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",183,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",184,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",184,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",185,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",185,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",185,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",185,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",185,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",185,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",185,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",185,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",185,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",59,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",72,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",186,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",186,null],[11,"clone","libc","",48,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",49,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",187,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",188,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",50,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",189,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",40,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",41,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",42,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",44,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",45,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",28,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",29,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",30,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",190,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",191,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",192,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",193,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",32,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",33,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",34,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",35,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",194,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",36,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",195,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",196,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",26,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",11,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `b`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the bytes (`b`) flag was enabled.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"literals"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"literals"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"literals"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"literals"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,{"inputs":[{"name":"lit"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"lit"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"lit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"push_all","","",7,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"clone","collections::binary_heap","",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",8,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",8,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",8,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",8,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",8,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",8,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",8,null],[11,"drop","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",8,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",8,null],[11,"extend","","",8,null],[11,"new_leaf","collections::btree::node","",13,{"inputs":[],"output":{"name":"root"}}],[11,"as_ref","","",13,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"as_mut","","",13,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"into_ref","","",13,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"push_level","","Add a new internal node with a single edge, pointing to the previous root, and make that\nnew node the root. This increases the height by 1 and is the opposite of `pop_level`.",13,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"pop_level","","Remove the root node, using its first child as the new root. This cannot be called when\nthe tree consists only of a leaf node. As it is intended only to be called when the root\nhas only one edge, no cleanup is done on any of the other children are elements of the root.\nThis decreases the height by 1 and is the opposite of `push_level`.",13,null],[11,"clone","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"len","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"usize"}}],[11,"forget_type","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"keys","","",14,null],[11,"vals","","",14,null],[11,"ascend","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"result"}}],[11,"first_edge","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"last_edge","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"deallocate_and_ascend","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"deallocate_and_ascend","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"keys_mut","","",14,null],[11,"vals_mut","","",14,null],[11,"into_slices","","",14,null],[11,"into_root_mut","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"root"}}],[11,"into_slices_mut","","",14,null],[11,"push","","",14,null],[11,"push_front","","",14,null],[11,"push","","",14,null],[11,"push_front","","",14,null],[11,"pop","","",14,null],[11,"pop_front","","",14,null],[11,"force","","",14,{"inputs":[{"name":"noderef"}],"output":{"name":"forceresult"}}],[11,"clone","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_node","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"new_kv","","",15,{"inputs":[{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_edge","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",15,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"reborrow","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"reborrow_mut","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"new_edge","","",15,{"inputs":[{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_kv","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"right_kv","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"insert","","",15,null],[11,"insert","","",15,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":{"name":"insertresult"}}],[11,"descend","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"noderef"}}],[11,"into_kv","","",15,null],[11,"into_kv_mut","","",15,null],[11,"kv_mut","","",15,null],[11,"split","","",15,null],[11,"remove","","",15,null],[11,"split","","",15,null],[11,"can_merge","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[11,"merge","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"force","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"drop","collections::btree::map","",16,null],[11,"clone","","",16,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",16,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",16,null],[11,"get","","Returns a reference to the value corresponding to the key.",16,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",16,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",16,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",16,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",16,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",16,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",16,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",16,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",18,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",18,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","","",16,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","","",19,null],[11,"next","","",19,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",19,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",20,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",20,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",20,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",21,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",21,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",21,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",22,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",23,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",16,null],[11,"extend","","",16,null],[11,"hash","","",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",16,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",16,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",16,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",16,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",16,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",16,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",16,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",16,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",16,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",16,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",24,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",24,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",25,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",26,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",26,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",26,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",26,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",26,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"partial_cmp","collections::btree::set","",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"clone","","",27,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",27,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",27,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",27,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",27,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",27,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",27,null],[11,"contains","","Returns `true` if the set contains a value.",27,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",27,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",27,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",27,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",27,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",27,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",27,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",27,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",27,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",27,null],[11,"extend","","",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",27,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",28,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",28,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",29,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",29,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"clone","","",30,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",31,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"clone","","",32,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",32,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",33,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"clone","","",34,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",34,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"borrow","collections::borrow","",35,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",35,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",35,null],[11,"into_owned","","Extracts the owned data.",35,null],[11,"deref","","",35,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",35,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",35,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"into_cow","","",35,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",35,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",36,null],[11,"cmp","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",36,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",36,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",36,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",36,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",36,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",36,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",36,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",36,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",36,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",36,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"from_iter","","",36,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",36,null],[11,"extend","","",36,null],[11,"clone","collections::linked_list","",38,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",40,{"inputs":[{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",40,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",41,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",41,null],[11,"iter","","Provides a forward iterator.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",41,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",41,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",41,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",41,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"drop","","",41,null],[11,"next","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",42,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",42,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",42,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",41,null],[11,"extend","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",41,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",41,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",41,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"make_place","","",43,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[11,"pointer","","",43,null],[11,"finalize","","",43,null],[11,"make_place","","",44,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[11,"pointer","","",44,null],[11,"finalize","","",44,null],[11,"start","core::ops","",45,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",46,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",47,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",47,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",48,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[11,"next","","",48,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"borrow","collections::string","",49,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",50,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",51,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",52,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",51,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",51,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",51,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",53,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",53,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",53,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",53,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",53,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",53,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",53,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",53,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",54,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",54,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",54,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",54,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",54,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",54,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",54,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",55,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",55,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",55,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",55,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",55,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",55,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",55,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",56,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",57,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",58,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",56,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",56,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",56,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",56,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",56,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",60,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",60,null],[11,"matching","","",60,null],[11,"use_early_reject","","",61,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",61,null],[11,"matching","","",61,null],[11,"cmp","collections::string","",49,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",49,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",49,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",49,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",49,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",49,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",49,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",49,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",49,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",49,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",49,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",49,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",49,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",49,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",49,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",49,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",49,null],[11,"push","","Appends the given `char` to the end of this `String`.",49,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",49,null],[11,"truncate","","Shortens this `String` to the specified length.",49,null],[11,"pop","","Removes the last character from the string buffer and returns it.",49,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",49,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",49,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",49,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",49,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",49,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",49,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",49,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",49,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",62,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",62,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",62,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",49,null],[11,"from_iter","","",49,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",49,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",49,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",49,null],[11,"extend","","",49,null],[11,"extend","","",49,null],[11,"extend","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",35,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",49,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",49,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"add","","",49,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",49,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",49,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",49,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",49,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",49,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",49,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",49,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",49,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",49,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",49,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",64,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",49,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",49,null],[11,"from","","",49,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",35,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",35,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",49,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",49,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",49,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",49,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",65,null],[11,"next","","",65,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",35,null],[11,"ne","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",7,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",35,null],[11,"from","","",35,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",35,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"count","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"drop","","",66,null],[11,"next","","",67,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",67,null],[11,"clone","collections::vec_deque","",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",68,null],[11,"default","","",68,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",68,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",68,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",68,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",68,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",68,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",68,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",68,null],[11,"iter","","Returns a front-to-back iterator.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",68,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",68,null],[11,"len","","Returns the number of elements in the `VecDeque`.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",68,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",68,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",68,null],[11,"push_back","","Appends an element to the back of a buffer",68,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",68,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",68,null],[11,"retain","","Retains only the elements specified by the predicate.",68,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",68,null],[11,"clone","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",71,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",72,null],[11,"next","","",72,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",68,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",68,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",68,null],[11,"index","","",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",68,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",68,null],[11,"extend","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",73,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",74,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",75,null],[11,"make_place","","",75,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",75,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",76,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",74,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",75,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",76,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",76,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",76,null],[11,"default","","",76,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",76,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",76,null],[11,"clone","","",76,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",76,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",76,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",76,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",76,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",76,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",76,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",76,null],[11,"from","","",76,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",76,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",76,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",76,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",76,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",76,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",76,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",76,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",76,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",76,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",76,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",76,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",76,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","regex_syntax","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",77,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"eq","","",78,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"byterange"}],"output":{"name":"byterange"}}],[11,"fmt","","",79,{"inputs":[{"name":"exprbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"new","","Create a new builder for configuring expression parsing.",79,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",79,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",79,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",79,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",79,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",79,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",79,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the Unicode flag can be used or not. By default, the flag is\nenabled but it cannot be toggled.",79,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",79,{"inputs":[{"name":"exprbuilder"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",79,{"inputs":[{"name":"exprbuilder"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"deref","","",77,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",77,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",77,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",77,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",77,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",77,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",77,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",78,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",78,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",78,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",78,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",78,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"deref","","",78,{"inputs":[{"name":"byteclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",78,{"inputs":[{"name":"byteclass"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",80,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",80,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",80,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",80,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Root"],[3,"NodeRef"],[3,"Handle"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["bytes"] = {"doc":"","items":[[3,"ByteBuf","bytes","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[3,"Bytes","","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[4,"BufError","","",null,null],[13,"Underflow","","",0,null],[13,"Overflow","","",0,null],[0,"alloc","","",null,null],[3,"Heap","bytes::alloc","",null,null],[3,"MemRef","","",null,null],[3,"Mem","","Memory allocated by an Allocator must be prefixed with Mem",null,null],[5,"heap","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"memref"}}],[11,"allocate","","",1,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[11,"allocate","","",1,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[8,"Allocator","","Allocates memory to be used by Bufs or Bytes. Allows allocating memory\nusing alternate stratgies than the default Rust heap allocator. Also does\nnot require that allocations are continuous in memory.",null,null],[10,"allocate","","Allocate memory. May or may not be contiguous.",2,{"inputs":[{"name":"allocator"},{"name":"usize"}],"output":{"name":"memref"}}],[10,"deallocate","","Deallocate a chunk of memory",2,null],[11,"new","","",3,null],[11,"none","","",3,{"inputs":[],"output":{"name":"memref"}}],[11,"is_none","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"bool"}}],[11,"ptr","","",3,null],[11,"bytes","","",3,null],[11,"bytes_mut","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"drop","","",3,{"inputs":[{"name":"memref"}],"output":null}],[11,"new","","",4,null],[0,"buf","bytes","",null,null],[3,"ByteBuf","bytes::buf","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[11,"from_slice","bytes","Create a new `ByteBuf` by copying the contents of the given slice.",5,null],[11,"mut_with_capacity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",5,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",5,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"resume","","Flips the buffer back to mutable, resetting the write position\nto the byte after the previous write.",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"read_slice","","",5,null],[11,"to_seq_byte_str","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",5,{"inputs":[{"name":"bytebuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",5,{"inputs":[{"name":"bytebuf"}],"output":null}],[11,"remaining","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",5,null],[11,"advance","","",5,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_mem_ref","","",6,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",6,{"inputs":[{"name":"robytebuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",6,{"inputs":[{"name":"robytebuf"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"robytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"robytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"capacity","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"bytebuf"}}],[11,"clear","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":null}],[11,"write_slice","","",7,null],[11,"bytes","","",7,null],[11,"remaining","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"advance","","",7,{"inputs":[{"name":"mutbytebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"mutbytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Allocates a new `RingBuf` with the specified capacity.",8,{"inputs":[{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","Returns `true` if the buf cannot accept any further writes.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if the buf cannot accept any further reads.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes that the buf can hold.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"mark","","Marks the current read location.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"clear","","Resets all internal state to the initial state.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"ringbuf"}}],[11,"fmt","","",8,{"inputs":[{"name":"ringbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",8,null],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",8,null],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"result"}}],[11,"wrap","","",9,null],[11,"remaining","","",9,{"inputs":[{"name":"slicebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",9,null],[11,"advance","","",9,{"inputs":[{"name":"slicebuf"},{"name":"usize"}],"output":null}],[11,"wrap","","",10,null],[11,"remaining","","",10,{"inputs":[{"name":"mutslicebuf"}],"output":{"name":"usize"}}],[11,"advance","","",10,{"inputs":[{"name":"mutslicebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"take"}}],[11,"into_inner","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_ref","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_mut","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"limit","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"set_limit","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"remaining","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"read","","",11,null],[11,"remaining","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"mut_bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[8,"Buf","bytes::buf","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",12,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",12,null],[10,"advance","","Advance the internal cursor of the Buf",12,{"inputs":[{"name":"buf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",12,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",12,null],[11,"read_byte","","Read a single byte from the `Buf`",12,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"BufExt","","An extension trait providing extra functions applicable to all `Buf` values.",null,null],[10,"read","","Read bytes from this Buf into the given sink and advance the cursor by\nthe number of bytes read.",13,{"inputs":[{"name":"bufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",14,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",14,{"inputs":[{"name":"mutbuf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",14,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",14,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",14,null],[11,"write_byte","","Write a single byte to the `MuBuf`",14,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[8,"MutBufExt","","An extension trait providing extra functions applicable to all `MutBuf` values.",null,null],[10,"write","","Write bytes from the given source into the current `MutBuf` and advance\nthe cursor by the number of bytes written.",15,{"inputs":[{"name":"mutbufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"Sink","","A value that reads bytes from a Buf into itself",null,null],[16,"Error","","",16,null],[10,"sink","","",16,{"inputs":[{"name":"sink"},{"name":"b"}],"output":{"name":"result"}}],[8,"Source","","A value that writes bytes from itself into a `MutBuf`.",null,null],[16,"Error","","",17,null],[10,"fill","","",17,{"inputs":[{"name":"source"},{"name":"b"}],"output":{"name":"result"}}],[11,"remaining","alloc::boxed","",18,{"inputs":[{"name":"box"}],"output":{"name":"usize"}}],[11,"bytes","","",18,null],[11,"advance","","",18,{"inputs":[{"name":"box"},{"name":"usize"}],"output":null}],[11,"read_slice","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","std::io::cursor","",19,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",19,null],[11,"advance","","",19,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":null}],[11,"remaining","collections::vec","",20,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"advance","","",20,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",20,null],[11,"remaining","std::io::cursor","",19,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",19,null],[11,"advance","","",19,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":null}],[11,"read","bytes","",5,null],[11,"read","","",6,null],[11,"read","","",21,null],[11,"read","alloc::boxed","",18,null],[11,"write","bytes","",7,null],[11,"flush","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"result"}}],[0,"str","","",null,null],[3,"Bytes","bytes::str","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[11,"from_slice","bytes","",22,null],[11,"of","","",22,{"inputs":[{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",22,{"inputs":[],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it\notherwise None.",22,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value,\notherwise, returns the original `Bytes` as `Err`.",22,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"buf","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"box"}}],[11,"concat","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"slice","","",22,{"inputs":[{"name":"bytes"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","",22,null],[11,"to_bytes","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"index","","",22,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",22,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"drop","","",22,{"inputs":[{"name":"bytes"}],"output":null}],[11,"from_slice","","",23,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",23,{"inputs":[{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"is_empty","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"bool"}}],[11,"buf","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"ropebuf"}}],[11,"concat","","",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"slice","","",23,{"inputs":[{"name":"rope"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"bytes"}}],[11,"index","","",23,{"inputs":[{"name":"rope"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"rope"}}],[11,"remaining","","",21,{"inputs":[{"name":"ropebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",21,null],[11,"advance","","",21,{"inputs":[{"name":"ropebuf"},{"name":"usize"}],"output":null}],[11,"from_slice","","Create a new `SeqByteStr` from a byte slice.",24,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",24,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[11,"buf","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"robytebuf"}}],[11,"concat","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"seqbytestr"}}],[11,"clone","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"zero","","",25,{"inputs":[],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",25,null],[11,"as_slice","","",25,null],[11,"buf","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestrbuf"}}],[11,"concat","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",26,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"smallbytestrbuf"}}],[11,"remaining","","",26,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",26,null],[11,"advance","","",26,{"inputs":[{"name":"smallbytestrbuf"},{"name":"usize"}],"output":null}],[8,"ByteStr","bytes::str","An immutable sequence of bytes. Operations will not mutate the original\nvalue. Since only immutable access is permitted, operations do not require\ncopying (though, sometimes copying will happen as an optimization).",null,null],[16,"Buf","","",27,null],[10,"buf","","Returns a read-only `Buf` for accessing the byte contents of the\n`ByteStr`.",27,{"inputs":[{"name":"bytestr"}],"output":{"name":"buf"}}],[10,"concat","","Returns a new `Bytes` value representing the concatenation of `self`\nwith the given `Bytes`.",27,{"inputs":[{"name":"bytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[10,"len","","Returns the number of bytes in the ByteStr",27,{"inputs":[{"name":"bytestr"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",27,{"inputs":[{"name":"bytestr"}],"output":{"name":"bool"}}],[10,"slice","","Returns a new ByteStr value containing the byte range between `begin`\n(inclusive) and `end` (exclusive)",27,{"inputs":[{"name":"bytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from\n`begin` (inclusive) to the end of the byte str.",27,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up\nto `end` (exclusive).",27,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","Divides the value into two `Bytes` at the given index.",27,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","Consumes the value and returns a `Bytes` instance containing\nidentical bytes",28,{"inputs":[{"name":"tobytes"}],"output":{"name":"bytes"}}],[11,"eq","bytes","",24,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[0,"traits","","All traits are re-exported here to allow glob imports.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"buferror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"buferror"}],"output":{"name":"buferror"}}]],"paths":[[4,"BufError"],[3,"Heap"],[8,"Allocator"],[3,"MemRef"],[3,"Mem"],[3,"ByteBuf"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"RingBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[3,"Take"],[8,"Buf"],[8,"BufExt"],[8,"MutBuf"],[8,"MutBufExt"],[8,"Sink"],[8,"Source"],[3,"Box"],[3,"Cursor"],[3,"Vec"],[3,"RopeBuf"],[3,"Bytes"],[3,"Rope"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[8,"ByteStr"],[8,"ToBytes"]]};
searchIndex["ws2_32"] = {"doc":"","items":[],"paths":[]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed\nright-to-left and left-to-right text.  It is written in safe Rust, compatible with the\ncurrent stable release.","items":[[3,"BidiInfo","unicode_bidi","Output of `process_text`",null,null],[12,"classes","","The BidiClass of the character at each byte in the text.",0,null],[12,"levels","","The directional embedding level of each byte in the text.",0,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",0,null],[3,"ParagraphInfo","","Info about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",1,null],[12,"level","","The paragraph embedding level. http://www.unicode.org/reports/tr9/#BD4",1,null],[3,"InitialProperties","","Output of `initial_scan`",null,null],[12,"initial_classes","","The BidiClass of the character at each byte in the text.\nIf a character is multiple bytes, its class will appear multiple times in the vector.",2,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",2,null],[5,"process_text","","Determine the bidirectional embedding levels for a single paragraph.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[5,"is_ltr","","Even embedding levels are left-to-right.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_rtl","","Odd levels are right-to-left.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"reorder_line","","Re-order a line based on resolved levels.",null,null],[5,"visual_runs","","Find the level runs within a line and return them in visual order.",null,null],[5,"initial_scan","","Find the paragraphs and BidiClasses in a string of text.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialproperties"}}],[0,"tables","","",null,null],[4,"BidiClass","unicode_bidi::tables","Represents the Unicode character property **Bidi_Class**, also known as\nthe *bidirectional character type*.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the BidiClass of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the `bidi_class` function is based on.",null,null],[11,"eq","","",3,{"inputs":[{"name":"bidiclass"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"bidiclass"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"bidiclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"bidiclass"}],"output":{"name":"bidiclass"}}],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",null,null],[11,"eq","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"initialproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"initialproperties"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"initialproperties"},{"name":"initialproperties"}],"output":{"name":"bool"}}]],"paths":[[3,"BidiInfo"],[3,"ParagraphInfo"],[3,"InitialProperties"],[4,"BidiClass"]]};
searchIndex["sha1"] = {"doc":"A minimal implementation of SHA1 for rust.","items":[[3,"Sha1","sha1","Represents a Sha1 hash object in memory.",null,null],[11,"clone","","",0,{"inputs":[{"name":"sha1"}],"output":{"name":"sha1"}}],[11,"new","","Creates an fresh sha1 hash object.",0,{"inputs":[],"output":{"name":"sha1"}}],[11,"reset","","Resets the hash object to it&#39;s initial state.",0,{"inputs":[{"name":"sha1"}],"output":null}],[11,"update","","Update hash with input data.",0,null],[11,"output","","Retrieve digest result.  The output must be large enough to\ncontain result (20 bytes).",0,null],[11,"digest","","Shortcut for getting `output` into a new vector.",0,{"inputs":[{"name":"sha1"}],"output":{"name":"vec"}}],[11,"hexdigest","","Shortcut for getting a hex output of the vector.",0,{"inputs":[{"name":"sha1"}],"output":{"name":"string"}}]],"paths":[[3,"Sha1"]]};
searchIndex["httparse"] = {"doc":"# httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","THe response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","INvalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for\nparsing.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"status"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is\n`Partial`.",4,{"inputs":[{"name":"status"}],"output":{"name":"t"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"header"}],"output":{"name":"header"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"utf8sequence"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"utf8range"}],"output":{"name":"utf8range"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"utf8range"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"utf8range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"utf8sequences"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"SlabIter","","",null,null],[3,"SlabMutIter","","",null,null],[8,"Index","","Slab can be indexed by any type implementing `Index` trait.",null,null],[10,"from_usize","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"as_usize","","",0,{"inputs":[{"name":"index"}],"output":{"name":"usize"}}],[11,"new","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"new_starting_at","","",1,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"count","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"is_empty","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"remaining","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"has_remaining","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"contains","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","",1,{"inputs":[{"name":"slab"},{"name":"t"}],"output":{"name":"result"}}],[11,"insert_with","","Like `insert` but for objects that require newly allocated\nusize in their constructor.",1,{"inputs":[{"name":"slab"},{"name":"f"}],"output":{"name":"option"}}],[11,"remove","","Releases the given slot",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"replace","","",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"t"}],"output":{"name":"option"}}],[11,"replace_with","","Execute a function on the *value* in the slot and put the result of\nthe function back into the slot. If function returns None,\nslot is left empty on exit.",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[11,"retain","","Retain only the elements specified by the predicate.",1,{"inputs":[{"name":"slab"},{"name":"f"}],"output":null}],[11,"iter","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"slabiter"}}],[11,"iter_mut","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"slabmutiter"}}],[11,"clear","","Empty the slab, by freeing all entries",1,{"inputs":[{"name":"slab"}],"output":null}],[11,"grow","","Grow the slab, by adding `entries_num`",1,{"inputs":[{"name":"slab"},{"name":"usize"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"slab"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"slabiter"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"slabmutiter"}],"output":{"name":"option"}}]],"paths":[[8,"Index"],[3,"Slab"],[3,"SlabIter"],[3,"SlabMutIter"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches!","matches","",null,null],[14,"_tt_as_expr_hack!","","Work around &quot;error: unexpected token: `an interpolated tt`&quot;, whatever that means.",null,null]],"paths":[]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[14,"quick_error!","quick_error","Main macro that does all the work",null,null]],"paths":[]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if!","cfg_if","",null,null]],"paths":[]};
initSearch(searchIndex);
